/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/alfrid/lib/alfrid.umd.js":
/*!***********************************************!*\
  !*** ./node_modules/alfrid/lib/alfrid.umd.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?e(exports,__webpack_require__(/*! events */ "./node_modules/events/events.js")):undefined}(this,(function(t,e){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e;
/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
var r=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var s=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var s,o,u=a(t),h=1;h<arguments.length;h++){for(var _ in s=Object(arguments[h]))n.call(s,_)&&(u[_]=s[_]);if(r){o=r(s);for(var c=0;c<o.length;c++)i.call(s,o[c])&&(u[o[c]]=s[o[c]])}}return u},o=1e-6,u="undefined"!=typeof Float32Array?Float32Array:Array,h=Math.random;var _=Math.PI/180;function c(t,e){return Math.abs(t-e)<=o*Math.max(1,Math.abs(t),Math.abs(e))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var l=Object.freeze({__proto__:null,EPSILON:o,get ARRAY_TYPE(){return u},RANDOM:h,setMatrixArrayType:function(t){u=t},toRadian:function(t){return t*_},equals:c});function E(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=r[0],u=r[1],h=r[2],_=r[3];return t[0]=n*o+a*u,t[1]=i*o+s*u,t[2]=n*h+a*_,t[3]=i*h+s*_,t}function f(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}var T=E,d=f,m=Object.freeze({__proto__:null,create:function(){var t=new u(4);return u!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t},clone:function(t){var e=new u(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},fromValues:function(t,e,r,n){var i=new u(4);return i[0]=t,i[1]=e,i[2]=r,i[3]=n,i},set:function(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t},transpose:function(t,e){if(t===e){var r=e[1];t[1]=e[2],t[2]=r}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=r*a-i*n;return s?(s=1/s,t[0]=a*s,t[1]=-n*s,t[2]=-i*s,t[3]=r*s,t):null},adjoint:function(t,e){var r=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=r,t},determinant:function(t){return t[0]*t[3]-t[2]*t[1]},multiply:E,rotate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=Math.sin(r),u=Math.cos(r);return t[0]=n*u+a*o,t[1]=i*u+s*o,t[2]=n*-o+a*u,t[3]=i*-o+s*u,t},scale:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=r[0],u=r[1];return t[0]=n*o,t[1]=i*o,t[2]=a*u,t[3]=s*u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t},str:function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3])},LDU:function(t,e,r,n){return t[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-t[2]*r[1],[t,e,r]},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t},subtract:f,exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=e[0],u=e[1],h=e[2],_=e[3];return Math.abs(r-s)<=o*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-u)<=o*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(i-h)<=o*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(a-_)<=o*Math.max(1,Math.abs(a),Math.abs(_))},multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},mul:T,sub:d});function p(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=r[0],_=r[1],c=r[2],l=r[3],E=r[4],f=r[5];return t[0]=n*h+a*_,t[1]=i*h+s*_,t[2]=n*c+a*l,t[3]=i*c+s*l,t[4]=n*E+a*f+o,t[5]=i*E+s*f+u,t}function M(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t}var R=p,A=M,v=Object.freeze({__proto__:null,create:function(){var t=new u(6);return u!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t},clone:function(t){var e=new u(6);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},fromValues:function(t,e,r,n,i,a){var s=new u(6);return s[0]=t,s[1]=e,s[2]=r,s[3]=n,s[4]=i,s[5]=a,s},set:function(t,e,r,n,i,a,s){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=a,t[5]=s,t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=r*a-n*i;return u?(u=1/u,t[0]=a*u,t[1]=-n*u,t[2]=-i*u,t[3]=r*u,t[4]=(i*o-a*s)*u,t[5]=(n*s-r*o)*u,t):null},determinant:function(t){return t[0]*t[3]-t[1]*t[2]},multiply:p,rotate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=Math.sin(r),_=Math.cos(r);return t[0]=n*_+a*h,t[1]=i*_+s*h,t[2]=n*-h+a*_,t[3]=i*-h+s*_,t[4]=o,t[5]=u,t},scale:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=r[0],_=r[1];return t[0]=n*h,t[1]=i*h,t[2]=a*_,t[3]=s*_,t[4]=o,t[5]=u,t},translate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=r[0],_=r[1];return t[0]=n,t[1]=i,t[2]=a,t[3]=s,t[4]=n*h+a*_+o,t[5]=i*h+s*_+u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=0,t[5]=0,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t},str:function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t},subtract:M,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=t[4],u=t[5],h=e[0],_=e[1],c=e[2],l=e[3],E=e[4],f=e[5];return Math.abs(r-h)<=o*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(n-_)<=o*Math.max(1,Math.abs(n),Math.abs(_))&&Math.abs(i-c)<=o*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(a-l)<=o*Math.max(1,Math.abs(a),Math.abs(l))&&Math.abs(s-E)<=o*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(u-f)<=o*Math.max(1,Math.abs(u),Math.abs(f))},mul:R,sub:A});function I(){var t=new u(9);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function g(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function N(t,e){if(t===e){var r=e[1],n=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=n,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function S(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=e[6],h=e[7],_=e[8],c=_*s-o*h,l=-_*a+o*u,E=h*a-s*u,f=r*c+n*l+i*E;return f?(f=1/f,t[0]=c*f,t[1]=(-_*n+i*h)*f,t[2]=(o*n-i*s)*f,t[3]=l*f,t[4]=(_*r-i*u)*f,t[5]=(-o*r+i*a)*f,t[6]=E*f,t[7]=(-h*r+n*u)*f,t[8]=(s*r-n*a)*f,t):null}function b(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=e[8],l=r[0],E=r[1],f=r[2],T=r[3],d=r[4],m=r[5],p=r[6],M=r[7],R=r[8];return t[0]=l*n+E*s+f*h,t[1]=l*i+E*o+f*_,t[2]=l*a+E*u+f*c,t[3]=T*n+d*s+m*h,t[4]=T*i+d*o+m*_,t[5]=T*a+d*u+m*c,t[6]=p*n+M*s+R*h,t[7]=p*i+M*o+R*_,t[8]=p*a+M*u+R*c,t}function L(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}var x=b,C=L,P=Object.freeze({__proto__:null,create:I,fromMat4:g,clone:function(t){var e=new u(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromValues:function(t,e,r,n,i,a,s,o,h){var _=new u(9);return _[0]=t,_[1]=e,_[2]=r,_[3]=n,_[4]=i,_[5]=a,_[6]=s,_[7]=o,_[8]=h,_},set:function(t,e,r,n,i,a,s,o,u,h){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=a,t[5]=s,t[6]=o,t[7]=u,t[8]=h,t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},transpose:N,invert:S,adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=e[6],h=e[7],_=e[8];return t[0]=s*_-o*h,t[1]=i*h-n*_,t[2]=n*o-i*s,t[3]=o*u-a*_,t[4]=r*_-i*u,t[5]=i*a-r*o,t[6]=a*h-s*u,t[7]=n*u-r*h,t[8]=r*s-n*a,t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],a=t[4],s=t[5],o=t[6],u=t[7],h=t[8];return e*(h*a-s*u)+r*(-h*i+s*o)+n*(u*i-a*o)},multiply:b,translate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=e[8],l=r[0],E=r[1];return t[0]=n,t[1]=i,t[2]=a,t[3]=s,t[4]=o,t[5]=u,t[6]=l*n+E*s+h,t[7]=l*i+E*o+_,t[8]=l*a+E*u+c,t},rotate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=e[8],l=Math.sin(r),E=Math.cos(r);return t[0]=E*n+l*s,t[1]=E*i+l*o,t[2]=E*a+l*u,t[3]=E*s-l*n,t[4]=E*o-l*i,t[5]=E*u-l*a,t[6]=h,t[7]=_,t[8]=c,t},scale:function(t,e,r){var n=r[0],i=r[1];return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=-r,t[4]=n,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=r+r,o=n+n,u=i+i,h=r*s,_=n*s,c=n*o,l=i*s,E=i*o,f=i*u,T=a*s,d=a*o,m=a*u;return t[0]=1-c-f,t[3]=_-m,t[6]=l+d,t[1]=_+m,t[4]=1-h-f,t[7]=E-T,t[2]=l-d,t[5]=E+T,t[8]=1-h-c,t},normalFromMat4:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=e[6],h=e[7],_=e[8],c=e[9],l=e[10],E=e[11],f=e[12],T=e[13],d=e[14],m=e[15],p=r*o-n*s,M=r*u-i*s,R=r*h-a*s,A=n*u-i*o,v=n*h-a*o,I=i*h-a*u,g=_*T-c*f,N=_*d-l*f,S=_*m-E*f,b=c*d-l*T,L=c*m-E*T,x=l*m-E*d,C=p*x-M*L+R*b+A*S-v*N+I*g;return C?(C=1/C,t[0]=(o*x-u*L+h*b)*C,t[1]=(u*S-s*x-h*N)*C,t[2]=(s*L-o*S+h*g)*C,t[3]=(i*L-n*x-a*b)*C,t[4]=(r*x-i*S+a*N)*C,t[5]=(n*S-r*L-a*g)*C,t[6]=(T*I-d*v+m*A)*C,t[7]=(d*R-f*I-m*M)*C,t[8]=(f*v-T*R+m*p)*C,t):null},projection:function(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t},subtract:L,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=t[4],u=t[5],h=t[6],_=t[7],c=t[8],l=e[0],E=e[1],f=e[2],T=e[3],d=e[4],m=e[5],p=e[6],M=e[7],R=e[8];return Math.abs(r-l)<=o*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(n-E)<=o*Math.max(1,Math.abs(n),Math.abs(E))&&Math.abs(i-f)<=o*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(a-T)<=o*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(s-d)<=o*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(u-m)<=o*Math.max(1,Math.abs(u),Math.abs(m))&&Math.abs(h-p)<=o*Math.max(1,Math.abs(h),Math.abs(p))&&Math.abs(_-M)<=o*Math.max(1,Math.abs(_),Math.abs(M))&&Math.abs(c-R)<=o*Math.max(1,Math.abs(c),Math.abs(R))},mul:x,sub:C});function O(){var t=new u(16);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function U(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function F(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function B(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=e[6],h=e[7],_=e[8],c=e[9],l=e[10],E=e[11],f=e[12],T=e[13],d=e[14],m=e[15],p=r*o-n*s,M=r*u-i*s,R=r*h-a*s,A=n*u-i*o,v=n*h-a*o,I=i*h-a*u,g=_*T-c*f,N=_*d-l*f,S=_*m-E*f,b=c*d-l*T,L=c*m-E*T,x=l*m-E*d,C=p*x-M*L+R*b+A*S-v*N+I*g;return C?(C=1/C,t[0]=(o*x-u*L+h*b)*C,t[1]=(i*L-n*x-a*b)*C,t[2]=(T*I-d*v+m*A)*C,t[3]=(l*v-c*I-E*A)*C,t[4]=(u*S-s*x-h*N)*C,t[5]=(r*x-i*S+a*N)*C,t[6]=(d*R-f*I-m*M)*C,t[7]=(_*I-l*R+E*M)*C,t[8]=(s*L-o*S+h*g)*C,t[9]=(n*S-r*L-a*g)*C,t[10]=(f*v-T*R+m*p)*C,t[11]=(c*R-_*v-E*p)*C,t[12]=(o*N-s*b-u*g)*C,t[13]=(r*b-n*N+i*g)*C,t[14]=(T*M-f*A-d*p)*C,t[15]=(_*A-c*M+l*p)*C,t):null}function D(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=e[8],l=e[9],E=e[10],f=e[11],T=e[12],d=e[13],m=e[14],p=e[15],M=r[0],R=r[1],A=r[2],v=r[3];return t[0]=M*n+R*o+A*c+v*T,t[1]=M*i+R*u+A*l+v*d,t[2]=M*a+R*h+A*E+v*m,t[3]=M*s+R*_+A*f+v*p,M=r[4],R=r[5],A=r[6],v=r[7],t[4]=M*n+R*o+A*c+v*T,t[5]=M*i+R*u+A*l+v*d,t[6]=M*a+R*h+A*E+v*m,t[7]=M*s+R*_+A*f+v*p,M=r[8],R=r[9],A=r[10],v=r[11],t[8]=M*n+R*o+A*c+v*T,t[9]=M*i+R*u+A*l+v*d,t[10]=M*a+R*h+A*E+v*m,t[11]=M*s+R*_+A*f+v*p,M=r[12],R=r[13],A=r[14],v=r[15],t[12]=M*n+R*o+A*c+v*T,t[13]=M*i+R*u+A*l+v*d,t[14]=M*a+R*h+A*E+v*m,t[15]=M*s+R*_+A*f+v*p,t}function w(t,e,r){var n,i,a,s,o,u,h,_,c,l,E,f,T=r[0],d=r[1],m=r[2];return e===t?(t[12]=e[0]*T+e[4]*d+e[8]*m+e[12],t[13]=e[1]*T+e[5]*d+e[9]*m+e[13],t[14]=e[2]*T+e[6]*d+e[10]*m+e[14],t[15]=e[3]*T+e[7]*d+e[11]*m+e[15]):(n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=e[8],l=e[9],E=e[10],f=e[11],t[0]=n,t[1]=i,t[2]=a,t[3]=s,t[4]=o,t[5]=u,t[6]=h,t[7]=_,t[8]=c,t[9]=l,t[10]=E,t[11]=f,t[12]=n*T+o*d+c*m+e[12],t[13]=i*T+u*d+l*m+e[13],t[14]=a*T+h*d+E*m+e[14],t[15]=s*T+_*d+f*m+e[15]),t}function y(t,e,r){var n=r[0],i=r[1],a=r[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function G(t,e,r){var n=Math.sin(r),i=Math.cos(r),a=e[4],s=e[5],o=e[6],u=e[7],h=e[8],_=e[9],c=e[10],l=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*i+h*n,t[5]=s*i+_*n,t[6]=o*i+c*n,t[7]=u*i+l*n,t[8]=h*i-a*n,t[9]=_*i-s*n,t[10]=c*i-o*n,t[11]=l*i-u*n,t}function V(t,e,r){var n=Math.sin(r),i=Math.cos(r),a=e[0],s=e[1],o=e[2],u=e[3],h=e[8],_=e[9],c=e[10],l=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i-h*n,t[1]=s*i-_*n,t[2]=o*i-c*n,t[3]=u*i-l*n,t[8]=a*n+h*i,t[9]=s*n+_*i,t[10]=o*n+c*i,t[11]=u*n+l*i,t}function X(t,e,r){var n=Math.sin(r),i=Math.cos(r),a=e[0],s=e[1],o=e[2],u=e[3],h=e[4],_=e[5],c=e[6],l=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i+h*n,t[1]=s*i+_*n,t[2]=o*i+c*n,t[3]=u*i+l*n,t[4]=h*i-a*n,t[5]=_*i-s*n,t[6]=c*i-o*n,t[7]=l*i-u*n,t}function H(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=n+n,u=i+i,h=a+a,_=n*o,c=n*u,l=n*h,E=i*u,f=i*h,T=a*h,d=s*o,m=s*u,p=s*h;return t[0]=1-(E+T),t[1]=c+p,t[2]=l-m,t[3]=0,t[4]=c-p,t[5]=1-(_+T),t[6]=f+d,t[7]=0,t[8]=l+m,t[9]=f-d,t[10]=1-(_+E),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function W(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function q(t,e){var r=e[0],n=e[1],i=e[2],a=e[4],s=e[5],o=e[6],u=e[8],h=e[9],_=e[10];return t[0]=Math.hypot(r,n,i),t[1]=Math.hypot(a,s,o),t[2]=Math.hypot(u,h,_),t}function Y(t,e){var r=new u(3);q(r,e);var n=1/r[0],i=1/r[1],a=1/r[2],s=e[0]*n,o=e[1]*i,h=e[2]*a,_=e[4]*n,c=e[5]*i,l=e[6]*a,E=e[8]*n,f=e[9]*i,T=e[10]*a,d=s+c+T,m=0;return d>0?(m=2*Math.sqrt(d+1),t[3]=.25*m,t[0]=(l-f)/m,t[1]=(E-h)/m,t[2]=(o-_)/m):s>c&&s>T?(m=2*Math.sqrt(1+s-c-T),t[3]=(l-f)/m,t[0]=.25*m,t[1]=(o+_)/m,t[2]=(E+h)/m):c>T?(m=2*Math.sqrt(1+c-s-T),t[3]=(E-h)/m,t[0]=(o+_)/m,t[1]=.25*m,t[2]=(l+f)/m):(m=2*Math.sqrt(1+T-s-c),t[3]=(o-_)/m,t[0]=(E+h)/m,t[1]=(l+f)/m,t[2]=.25*m),t}function j(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=r+r,o=n+n,u=i+i,h=r*s,_=n*s,c=n*o,l=i*s,E=i*o,f=i*u,T=a*s,d=a*o,m=a*u;return t[0]=1-c-f,t[1]=_+m,t[2]=l-d,t[3]=0,t[4]=_-m,t[5]=1-h-f,t[6]=E+T,t[7]=0,t[8]=l+d,t[9]=E-T,t[10]=1-h-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,e,r,n,i){var a,s=1/Math.tan(e/2);return t[0]=s/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(a=1/(n-i),t[10]=(i+n)*a,t[14]=2*i*n*a):(t[10]=-1,t[14]=-2*n),t}function z(t,e,r,n,i,a,s){var o=1/(e-r),u=1/(n-i),h=1/(a-s);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+r)*o,t[13]=(i+n)*u,t[14]=(s+a)*h,t[15]=1,t}function K(t,e,r,n){var i,a,s,u,h,_,c,l,E,f,T=e[0],d=e[1],m=e[2],p=n[0],M=n[1],R=n[2],A=r[0],v=r[1],I=r[2];return Math.abs(T-A)<o&&Math.abs(d-v)<o&&Math.abs(m-I)<o?F(t):(c=T-A,l=d-v,E=m-I,i=M*(E*=f=1/Math.hypot(c,l,E))-R*(l*=f),a=R*(c*=f)-p*E,s=p*l-M*c,(f=Math.hypot(i,a,s))?(i*=f=1/f,a*=f,s*=f):(i=0,a=0,s=0),u=l*s-E*a,h=E*i-c*s,_=c*a-l*i,(f=Math.hypot(u,h,_))?(u*=f=1/f,h*=f,_*=f):(u=0,h=0,_=0),t[0]=i,t[1]=u,t[2]=c,t[3]=0,t[4]=a,t[5]=h,t[6]=l,t[7]=0,t[8]=s,t[9]=_,t[10]=E,t[11]=0,t[12]=-(i*T+a*d+s*m),t[13]=-(u*T+h*d+_*m),t[14]=-(c*T+l*d+E*m),t[15]=1,t)}function Z(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}var Q=D,$=Z,J=Object.freeze({__proto__:null,create:O,clone:function(t){var e=new u(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},copy:U,fromValues:function(t,e,r,n,i,a,s,o,h,_,c,l,E,f,T,d){var m=new u(16);return m[0]=t,m[1]=e,m[2]=r,m[3]=n,m[4]=i,m[5]=a,m[6]=s,m[7]=o,m[8]=h,m[9]=_,m[10]=c,m[11]=l,m[12]=E,m[13]=f,m[14]=T,m[15]=d,m},set:function(t,e,r,n,i,a,s,o,u,h,_,c,l,E,f,T,d){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=a,t[5]=s,t[6]=o,t[7]=u,t[8]=h,t[9]=_,t[10]=c,t[11]=l,t[12]=E,t[13]=f,t[14]=T,t[15]=d,t},identity:F,transpose:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[3],a=e[6],s=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=a,t[11]=e[14],t[12]=i,t[13]=s,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t},invert:B,adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],u=e[6],h=e[7],_=e[8],c=e[9],l=e[10],E=e[11],f=e[12],T=e[13],d=e[14],m=e[15];return t[0]=o*(l*m-E*d)-c*(u*m-h*d)+T*(u*E-h*l),t[1]=-(n*(l*m-E*d)-c*(i*m-a*d)+T*(i*E-a*l)),t[2]=n*(u*m-h*d)-o*(i*m-a*d)+T*(i*h-a*u),t[3]=-(n*(u*E-h*l)-o*(i*E-a*l)+c*(i*h-a*u)),t[4]=-(s*(l*m-E*d)-_*(u*m-h*d)+f*(u*E-h*l)),t[5]=r*(l*m-E*d)-_*(i*m-a*d)+f*(i*E-a*l),t[6]=-(r*(u*m-h*d)-s*(i*m-a*d)+f*(i*h-a*u)),t[7]=r*(u*E-h*l)-s*(i*E-a*l)+_*(i*h-a*u),t[8]=s*(c*m-E*T)-_*(o*m-h*T)+f*(o*E-h*c),t[9]=-(r*(c*m-E*T)-_*(n*m-a*T)+f*(n*E-a*c)),t[10]=r*(o*m-h*T)-s*(n*m-a*T)+f*(n*h-a*o),t[11]=-(r*(o*E-h*c)-s*(n*E-a*c)+_*(n*h-a*o)),t[12]=-(s*(c*d-l*T)-_*(o*d-u*T)+f*(o*l-u*c)),t[13]=r*(c*d-l*T)-_*(n*d-i*T)+f*(n*l-i*c),t[14]=-(r*(o*d-u*T)-s*(n*d-i*T)+f*(n*u-i*o)),t[15]=r*(o*l-u*c)-s*(n*l-i*c)+_*(n*u-i*o),t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],a=t[4],s=t[5],o=t[6],u=t[7],h=t[8],_=t[9],c=t[10],l=t[11],E=t[12],f=t[13],T=t[14],d=t[15];return(e*s-r*a)*(c*d-l*T)-(e*o-n*a)*(_*d-l*f)+(e*u-i*a)*(_*T-c*f)+(r*o-n*s)*(h*d-l*E)-(r*u-i*s)*(h*T-c*E)+(n*u-i*o)*(h*f-_*E)},multiply:D,translate:w,scale:y,rotate:function(t,e,r,n){var i,a,s,u,h,_,c,l,E,f,T,d,m,p,M,R,A,v,I,g,N,S,b,L,x=n[0],C=n[1],P=n[2],O=Math.hypot(x,C,P);return O<o?null:(x*=O=1/O,C*=O,P*=O,i=Math.sin(r),s=1-(a=Math.cos(r)),u=e[0],h=e[1],_=e[2],c=e[3],l=e[4],E=e[5],f=e[6],T=e[7],d=e[8],m=e[9],p=e[10],M=e[11],R=x*x*s+a,A=C*x*s+P*i,v=P*x*s-C*i,I=x*C*s-P*i,g=C*C*s+a,N=P*C*s+x*i,S=x*P*s+C*i,b=C*P*s-x*i,L=P*P*s+a,t[0]=u*R+l*A+d*v,t[1]=h*R+E*A+m*v,t[2]=_*R+f*A+p*v,t[3]=c*R+T*A+M*v,t[4]=u*I+l*g+d*N,t[5]=h*I+E*g+m*N,t[6]=_*I+f*g+p*N,t[7]=c*I+T*g+M*N,t[8]=u*S+l*b+d*L,t[9]=h*S+E*b+m*L,t[10]=_*S+f*b+p*L,t[11]=c*S+T*b+M*L,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)},rotateX:G,rotateY:V,rotateZ:X,fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotation:function(t,e,r){var n,i,a,s=r[0],u=r[1],h=r[2],_=Math.hypot(s,u,h);return _<o?null:(s*=_=1/_,u*=_,h*=_,n=Math.sin(e),a=1-(i=Math.cos(e)),t[0]=s*s*a+i,t[1]=u*s*a+h*n,t[2]=h*s*a-u*n,t[3]=0,t[4]=s*u*a-h*n,t[5]=u*u*a+i,t[6]=h*u*a+s*n,t[7]=0,t[8]=s*h*a+u*n,t[9]=u*h*a-s*n,t[10]=h*h*a+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)},fromXRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromYRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromZRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotationTranslation:H,fromQuat2:function(t,e){var r=new u(3),n=-e[0],i=-e[1],a=-e[2],s=e[3],o=e[4],h=e[5],_=e[6],c=e[7],l=n*n+i*i+a*a+s*s;return l>0?(r[0]=2*(o*s+c*n+h*a-_*i)/l,r[1]=2*(h*s+c*i+_*n-o*a)/l,r[2]=2*(_*s+c*a+o*i-h*n)/l):(r[0]=2*(o*s+c*n+h*a-_*i),r[1]=2*(h*s+c*i+_*n-o*a),r[2]=2*(_*s+c*a+o*i-h*n)),H(t,e,r),t},getTranslation:W,getScaling:q,getRotation:Y,fromRotationTranslationScale:function(t,e,r,n){var i=e[0],a=e[1],s=e[2],o=e[3],u=i+i,h=a+a,_=s+s,c=i*u,l=i*h,E=i*_,f=a*h,T=a*_,d=s*_,m=o*u,p=o*h,M=o*_,R=n[0],A=n[1],v=n[2];return t[0]=(1-(f+d))*R,t[1]=(l+M)*R,t[2]=(E-p)*R,t[3]=0,t[4]=(l-M)*A,t[5]=(1-(c+d))*A,t[6]=(T+m)*A,t[7]=0,t[8]=(E+p)*v,t[9]=(T-m)*v,t[10]=(1-(c+f))*v,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},fromRotationTranslationScaleOrigin:function(t,e,r,n,i){var a=e[0],s=e[1],o=e[2],u=e[3],h=a+a,_=s+s,c=o+o,l=a*h,E=a*_,f=a*c,T=s*_,d=s*c,m=o*c,p=u*h,M=u*_,R=u*c,A=n[0],v=n[1],I=n[2],g=i[0],N=i[1],S=i[2],b=(1-(T+m))*A,L=(E+R)*A,x=(f-M)*A,C=(E-R)*v,P=(1-(l+m))*v,O=(d+p)*v,U=(f+M)*I,F=(d-p)*I,B=(1-(l+T))*I;return t[0]=b,t[1]=L,t[2]=x,t[3]=0,t[4]=C,t[5]=P,t[6]=O,t[7]=0,t[8]=U,t[9]=F,t[10]=B,t[11]=0,t[12]=r[0]+g-(b*g+C*N+U*S),t[13]=r[1]+N-(L*g+P*N+F*S),t[14]=r[2]+S-(x*g+O*N+B*S),t[15]=1,t},fromQuat:j,frustum:function(t,e,r,n,i,a,s){var o=1/(r-e),u=1/(i-n),h=1/(a-s);return t[0]=2*a*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*u,t[6]=0,t[7]=0,t[8]=(r+e)*o,t[9]=(i+n)*u,t[10]=(s+a)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=s*a*2*h,t[15]=0,t},perspective:k,perspectiveFromFieldOfView:function(t,e,r,n){var i=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),s=Math.tan(e.leftDegrees*Math.PI/180),o=Math.tan(e.rightDegrees*Math.PI/180),u=2/(s+o),h=2/(i+a);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=h,t[6]=0,t[7]=0,t[8]=-(s-o)*u*.5,t[9]=(i-a)*h*.5,t[10]=n/(r-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*r/(r-n),t[15]=0,t},ortho:z,lookAt:K,targetTo:function(t,e,r,n){var i=e[0],a=e[1],s=e[2],o=n[0],u=n[1],h=n[2],_=i-r[0],c=a-r[1],l=s-r[2],E=_*_+c*c+l*l;E>0&&(_*=E=1/Math.sqrt(E),c*=E,l*=E);var f=u*l-h*c,T=h*_-o*l,d=o*c-u*_;return(E=f*f+T*T+d*d)>0&&(f*=E=1/Math.sqrt(E),T*=E,d*=E),t[0]=f,t[1]=T,t[2]=d,t[3]=0,t[4]=c*d-l*T,t[5]=l*f-_*d,t[6]=_*T-c*f,t[7]=0,t[8]=_,t[9]=c,t[10]=l,t[11]=0,t[12]=i,t[13]=a,t[14]=s,t[15]=1,t},str:function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t},subtract:Z,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t[9]=e[9]+r[9]*n,t[10]=e[10]+r[10]*n,t[11]=e[11]+r[11]*n,t[12]=e[12]+r[12]*n,t[13]=e[13]+r[13]*n,t[14]=e[14]+r[14]*n,t[15]=e[15]+r[15]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=t[4],u=t[5],h=t[6],_=t[7],c=t[8],l=t[9],E=t[10],f=t[11],T=t[12],d=t[13],m=t[14],p=t[15],M=e[0],R=e[1],A=e[2],v=e[3],I=e[4],g=e[5],N=e[6],S=e[7],b=e[8],L=e[9],x=e[10],C=e[11],P=e[12],O=e[13],U=e[14],F=e[15];return Math.abs(r-M)<=o*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(n-R)<=o*Math.max(1,Math.abs(n),Math.abs(R))&&Math.abs(i-A)<=o*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(a-v)<=o*Math.max(1,Math.abs(a),Math.abs(v))&&Math.abs(s-I)<=o*Math.max(1,Math.abs(s),Math.abs(I))&&Math.abs(u-g)<=o*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(h-N)<=o*Math.max(1,Math.abs(h),Math.abs(N))&&Math.abs(_-S)<=o*Math.max(1,Math.abs(_),Math.abs(S))&&Math.abs(c-b)<=o*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(l-L)<=o*Math.max(1,Math.abs(l),Math.abs(L))&&Math.abs(E-x)<=o*Math.max(1,Math.abs(E),Math.abs(x))&&Math.abs(f-C)<=o*Math.max(1,Math.abs(f),Math.abs(C))&&Math.abs(T-P)<=o*Math.max(1,Math.abs(T),Math.abs(P))&&Math.abs(d-O)<=o*Math.max(1,Math.abs(d),Math.abs(O))&&Math.abs(m-U)<=o*Math.max(1,Math.abs(m),Math.abs(U))&&Math.abs(p-F)<=o*Math.max(1,Math.abs(p),Math.abs(F))},mul:Q,sub:$});function tt(){var t=new u(3);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function et(t){var e=new u(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function rt(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)}function nt(t,e,r){var n=new u(3);return n[0]=t,n[1]=e,n[2]=r,n}function it(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function at(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t}function st(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function ot(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function ut(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function ht(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}function _t(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.hypot(r,n,i)}function ct(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}function lt(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function Et(t,e){var r=e[0],n=e[1],i=e[2],a=r*r+n*n+i*i;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a,t}function ft(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Tt(t,e,r){var n=e[0],i=e[1],a=e[2],s=r[0],o=r[1],u=r[2];return t[0]=i*u-a*o,t[1]=a*s-n*u,t[2]=n*o-i*s,t}function dt(t,e,r){var n=e[0],i=e[1],a=e[2],s=r[3]*n+r[7]*i+r[11]*a+r[15];return s=s||1,t[0]=(r[0]*n+r[4]*i+r[8]*a+r[12])/s,t[1]=(r[1]*n+r[5]*i+r[9]*a+r[13])/s,t[2]=(r[2]*n+r[6]*i+r[10]*a+r[14])/s,t}function mt(t,e,r){var n=e[0],i=e[1],a=e[2];return t[0]=n*r[0]+i*r[3]+a*r[6],t[1]=n*r[1]+i*r[4]+a*r[7],t[2]=n*r[2]+i*r[5]+a*r[8],t}var pt,Mt=st,Rt=ot,At=ut,vt=_t,It=ct,gt=rt,Nt=lt,St=(pt=tt(),function(t,e,r,n,i,a){var s,o;for(e||(e=3),r||(r=0),o=n?Math.min(n*e+r,t.length):t.length,s=r;s<o;s+=e)pt[0]=t[s],pt[1]=t[s+1],pt[2]=t[s+2],i(pt,pt,a),t[s]=pt[0],t[s+1]=pt[1],t[s+2]=pt[2];return t}),bt=Object.freeze({__proto__:null,create:tt,clone:et,length:rt,fromValues:nt,copy:it,set:function(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t},add:at,subtract:st,multiply:ot,divide:ut,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},scale:ht,scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t},distance:_t,squaredDistance:ct,squaredLength:lt,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t},normalize:Et,dot:ft,cross:Tt,lerp:function(t,e,r,n){var i=e[0],a=e[1],s=e[2];return t[0]=i+n*(r[0]-i),t[1]=a+n*(r[1]-a),t[2]=s+n*(r[2]-s),t},hermite:function(t,e,r,n,i,a){var s=a*a,o=s*(2*a-3)+1,u=s*(a-2)+a,h=s*(a-1),_=s*(3-2*a);return t[0]=e[0]*o+r[0]*u+n[0]*h+i[0]*_,t[1]=e[1]*o+r[1]*u+n[1]*h+i[1]*_,t[2]=e[2]*o+r[2]*u+n[2]*h+i[2]*_,t},bezier:function(t,e,r,n,i,a){var s=1-a,o=s*s,u=a*a,h=o*s,_=3*a*o,c=3*u*s,l=u*a;return t[0]=e[0]*h+r[0]*_+n[0]*c+i[0]*l,t[1]=e[1]*h+r[1]*_+n[1]*c+i[1]*l,t[2]=e[2]*h+r[2]*_+n[2]*c+i[2]*l,t},random:function(t,e){e=e||1;var r=2*h()*Math.PI,n=2*h()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t},transformMat4:dt,transformMat3:mt,transformQuat:function(t,e,r){var n=r[0],i=r[1],a=r[2],s=r[3],o=e[0],u=e[1],h=e[2],_=i*h-a*u,c=a*o-n*h,l=n*u-i*o,E=i*l-a*c,f=a*_-n*l,T=n*c-i*_,d=2*s;return _*=d,c*=d,l*=d,E*=2,f*=2,T*=2,t[0]=o+_+E,t[1]=u+c+f,t[2]=h+l+T,t},rotateX:function(t,e,r,n){var i=[],a=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],a[0]=i[0],a[1]=i[1]*Math.cos(n)-i[2]*Math.sin(n),a[2]=i[1]*Math.sin(n)+i[2]*Math.cos(n),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t},rotateY:function(t,e,r,n){var i=[],a=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],a[0]=i[2]*Math.sin(n)+i[0]*Math.cos(n),a[1]=i[1],a[2]=i[2]*Math.cos(n)-i[0]*Math.sin(n),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t},rotateZ:function(t,e,r,n){var i=[],a=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],a[0]=i[0]*Math.cos(n)-i[1]*Math.sin(n),a[1]=i[0]*Math.sin(n)+i[1]*Math.cos(n),a[2]=i[2],t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t},angle:function(t,e){var r=nt(t[0],t[1],t[2]),n=nt(e[0],e[1],e[2]);Et(r,r),Et(n,n);var i=ft(r,n);return i>1?0:i<-1?Math.PI:Math.acos(i)},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t},str:function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=e[0],s=e[1],u=e[2];return Math.abs(r-a)<=o*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(n-s)<=o*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-u)<=o*Math.max(1,Math.abs(i),Math.abs(u))},sub:Mt,mul:Rt,div:At,dist:vt,sqrDist:It,len:gt,sqrLen:Nt,forEach:St});function Lt(){var t=new u(4);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function xt(t){var e=new u(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Ct(t,e,r,n){var i=new u(4);return i[0]=t,i[1]=e,i[2]=r,i[3]=n,i}function Pt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function Ot(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t}function Ut(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function Ft(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}function Bt(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t[3]=e[3]*r[3],t}function Dt(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t[3]=e[3]/r[3],t}function wt(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function yt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return Math.hypot(r,n,i,a)}function Gt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return r*r+n*n+i*i+a*a}function Vt(t){var e=t[0],r=t[1],n=t[2],i=t[3];return Math.hypot(e,r,n,i)}function Xt(t){var e=t[0],r=t[1],n=t[2],i=t[3];return e*e+r*r+n*n+i*i}function Ht(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=r*r+n*n+i*i+a*a;return s>0&&(s=1/Math.sqrt(s)),t[0]=r*s,t[1]=n*s,t[2]=i*s,t[3]=a*s,t}function Wt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function qt(t,e,r,n){var i=e[0],a=e[1],s=e[2],o=e[3];return t[0]=i+n*(r[0]-i),t[1]=a+n*(r[1]-a),t[2]=s+n*(r[2]-s),t[3]=o+n*(r[3]-o),t}function Yt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function jt(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=e[0],u=e[1],h=e[2],_=e[3];return Math.abs(r-s)<=o*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-u)<=o*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(i-h)<=o*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(a-_)<=o*Math.max(1,Math.abs(a),Math.abs(_))}var kt=Ft,zt=Bt,Kt=Dt,Zt=yt,Qt=Gt,$t=Vt,Jt=Xt,te=function(){var t=Lt();return function(e,r,n,i,a,s){var o,u;for(r||(r=4),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,o=n;o<u;o+=r)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],t[3]=e[o+3],a(t,t,s),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2],e[o+3]=t[3];return e}}(),ee=Object.freeze({__proto__:null,create:Lt,clone:xt,fromValues:Ct,copy:Pt,set:Ot,add:Ut,subtract:Ft,multiply:Bt,divide:Dt,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t[3]=Math.min(e[3],r[3]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t[3]=Math.max(e[3],r[3]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},scale:wt,scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},distance:yt,squaredDistance:Gt,length:Vt,squaredLength:Xt,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t},normalize:Ht,dot:Wt,cross:function(t,e,r,n){var i=r[0]*n[1]-r[1]*n[0],a=r[0]*n[2]-r[2]*n[0],s=r[0]*n[3]-r[3]*n[0],o=r[1]*n[2]-r[2]*n[1],u=r[1]*n[3]-r[3]*n[1],h=r[2]*n[3]-r[3]*n[2],_=e[0],c=e[1],l=e[2],E=e[3];return t[0]=c*h-l*u+E*o,t[1]=-_*h+l*s-E*a,t[2]=_*u-c*s+E*i,t[3]=-_*o+c*a-l*i,t},lerp:qt,random:function(t,e){var r,n,i,a,s,o;e=e||1;do{s=(r=2*h()-1)*r+(n=2*h()-1)*n}while(s>=1);do{o=(i=2*h()-1)*i+(a=2*h()-1)*a}while(o>=1);var u=Math.sqrt((1-s)/o);return t[0]=e*r,t[1]=e*n,t[2]=e*i*u,t[3]=e*a*u,t},transformMat4:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3];return t[0]=r[0]*n+r[4]*i+r[8]*a+r[12]*s,t[1]=r[1]*n+r[5]*i+r[9]*a+r[13]*s,t[2]=r[2]*n+r[6]*i+r[10]*a+r[14]*s,t[3]=r[3]*n+r[7]*i+r[11]*a+r[15]*s,t},transformQuat:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=r[0],o=r[1],u=r[2],h=r[3],_=h*n+o*a-u*i,c=h*i+u*n-s*a,l=h*a+s*i-o*n,E=-s*n-o*i-u*a;return t[0]=_*h+E*-s+c*-u-l*-o,t[1]=c*h+E*-o+l*-s-_*-u,t[2]=l*h+E*-u+_*-o-c*-s,t[3]=e[3],t},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},str:function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},exactEquals:Yt,equals:jt,sub:kt,mul:zt,div:Kt,dist:Zt,sqrDist:Qt,len:$t,sqrLen:Jt,forEach:te});function re(){var t=new u(4);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function ne(t,e,r){r*=.5;var n=Math.sin(r);return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=Math.cos(r),t}function ie(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=r[0],u=r[1],h=r[2],_=r[3];return t[0]=n*_+s*o+i*h-a*u,t[1]=i*_+s*u+a*o-n*h,t[2]=a*_+s*h+n*u-i*o,t[3]=s*_-n*o-i*u-a*h,t}function ae(t,e,r){r*=.5;var n=e[0],i=e[1],a=e[2],s=e[3],o=Math.sin(r),u=Math.cos(r);return t[0]=n*u+s*o,t[1]=i*u+a*o,t[2]=a*u-i*o,t[3]=s*u-n*o,t}function se(t,e,r){r*=.5;var n=e[0],i=e[1],a=e[2],s=e[3],o=Math.sin(r),u=Math.cos(r);return t[0]=n*u-a*o,t[1]=i*u+s*o,t[2]=a*u+n*o,t[3]=s*u-i*o,t}function oe(t,e,r){r*=.5;var n=e[0],i=e[1],a=e[2],s=e[3],o=Math.sin(r),u=Math.cos(r);return t[0]=n*u+i*o,t[1]=i*u-n*o,t[2]=a*u+s*o,t[3]=s*u-a*o,t}function ue(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=Math.sqrt(r*r+n*n+i*i),o=Math.exp(a),u=s>0?o*Math.sin(s)/s:0;return t[0]=r*u,t[1]=n*u,t[2]=i*u,t[3]=o*Math.cos(s),t}function he(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=Math.sqrt(r*r+n*n+i*i),o=s>0?Math.atan2(s,a)/s:0;return t[0]=r*o,t[1]=n*o,t[2]=i*o,t[3]=.5*Math.log(r*r+n*n+i*i+a*a),t}function _e(t,e,r,n){var i,a,s,u,h,_=e[0],c=e[1],l=e[2],E=e[3],f=r[0],T=r[1],d=r[2],m=r[3];return(a=_*f+c*T+l*d+E*m)<0&&(a=-a,f=-f,T=-T,d=-d,m=-m),1-a>o?(i=Math.acos(a),s=Math.sin(i),u=Math.sin((1-n)*i)/s,h=Math.sin(n*i)/s):(u=1-n,h=n),t[0]=u*_+h*f,t[1]=u*c+h*T,t[2]=u*l+h*d,t[3]=u*E+h*m,t}function ce(t,e){var r,n=e[0]+e[4]+e[8];if(n>0)r=Math.sqrt(n+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var a=(i+1)%3,s=(i+2)%3;r=Math.sqrt(e[3*i+i]-e[3*a+a]-e[3*s+s]+1),t[i]=.5*r,r=.5/r,t[3]=(e[3*a+s]-e[3*s+a])*r,t[a]=(e[3*a+i]+e[3*i+a])*r,t[s]=(e[3*s+i]+e[3*i+s])*r}return t}var le,Ee,fe,Te,de,me,pe=xt,Me=Ct,Re=Pt,Ae=Ot,ve=Ut,Ie=ie,ge=wt,Ne=Wt,Se=qt,be=Vt,Le=be,xe=Xt,Ce=xe,Pe=Ht,Oe=Yt,Ue=jt,Fe=(le=tt(),Ee=nt(1,0,0),fe=nt(0,1,0),function(t,e,r){var n=ft(e,r);return n<-.999999?(Tt(le,Ee,e),gt(le)<1e-6&&Tt(le,fe,e),Et(le,le),ne(t,le,Math.PI),t):n>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(Tt(le,e,r),t[0]=le[0],t[1]=le[1],t[2]=le[2],t[3]=1+n,Pe(t,t))}),Be=(Te=re(),de=re(),function(t,e,r,n,i,a){return _e(Te,e,i,a),_e(de,r,n,a),_e(t,Te,de,2*a*(1-a)),t}),De=(me=I(),function(t,e,r,n){return me[0]=r[0],me[3]=r[1],me[6]=r[2],me[1]=n[0],me[4]=n[1],me[7]=n[2],me[2]=-e[0],me[5]=-e[1],me[8]=-e[2],Pe(t,ce(t,me))}),we=Object.freeze({__proto__:null,create:re,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},setAxisAngle:ne,getAxisAngle:function(t,e){var r=2*Math.acos(e[3]),n=Math.sin(r/2);return n>o?(t[0]=e[0]/n,t[1]=e[1]/n,t[2]=e[2]/n):(t[0]=1,t[1]=0,t[2]=0),r},getAngle:function(t,e){var r=Ne(t,e);return Math.acos(2*r*r-1)},multiply:ie,rotateX:ae,rotateY:se,rotateZ:oe,calculateW:function(t,e){var r=e[0],n=e[1],i=e[2];return t[0]=r,t[1]=n,t[2]=i,t[3]=Math.sqrt(Math.abs(1-r*r-n*n-i*i)),t},exp:ue,ln:he,pow:function(t,e,r){return he(t,e),ge(t,t,r),ue(t,t),t},slerp:_e,random:function(t){var e=h(),r=h(),n=h(),i=Math.sqrt(1-e),a=Math.sqrt(e);return t[0]=i*Math.sin(2*Math.PI*r),t[1]=i*Math.cos(2*Math.PI*r),t[2]=a*Math.sin(2*Math.PI*n),t[3]=a*Math.cos(2*Math.PI*n),t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],s=r*r+n*n+i*i+a*a,o=s?1/s:0;return t[0]=-r*o,t[1]=-n*o,t[2]=-i*o,t[3]=a*o,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat3:ce,fromEuler:function(t,e,r,n){var i=.5*Math.PI/180;e*=i,r*=i,n*=i;var a=Math.sin(e),s=Math.cos(e),o=Math.sin(r),u=Math.cos(r),h=Math.sin(n),_=Math.cos(n);return t[0]=a*u*_-s*o*h,t[1]=s*o*_+a*u*h,t[2]=s*u*h-a*o*_,t[3]=s*u*_+a*o*h,t},str:function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},clone:pe,fromValues:Me,copy:Re,set:Ae,add:ve,mul:Ie,scale:ge,dot:Ne,lerp:Se,length:be,len:Le,squaredLength:xe,sqrLen:Ce,normalize:Pe,exactEquals:Oe,equals:Ue,rotationTo:Fe,sqlerp:Be,setAxes:De});function ye(t,e,r){var n=.5*r[0],i=.5*r[1],a=.5*r[2],s=e[0],o=e[1],u=e[2],h=e[3];return t[0]=s,t[1]=o,t[2]=u,t[3]=h,t[4]=n*h+i*u-a*o,t[5]=i*h+a*s-n*u,t[6]=a*h+n*o-i*s,t[7]=-n*s-i*o-a*u,t}function Ge(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}var Ve=Re;var Xe=Re;function He(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=r[4],u=r[5],h=r[6],_=r[7],c=e[4],l=e[5],E=e[6],f=e[7],T=r[0],d=r[1],m=r[2],p=r[3];return t[0]=n*p+s*T+i*m-a*d,t[1]=i*p+s*d+a*T-n*m,t[2]=a*p+s*m+n*d-i*T,t[3]=s*p-n*T-i*d-a*m,t[4]=n*_+s*o+i*h-a*u+c*p+f*T+l*m-E*d,t[5]=i*_+s*u+a*o-n*h+l*p+f*d+E*T-c*m,t[6]=a*_+s*h+n*u-i*o+E*p+f*m+c*d-l*T,t[7]=s*_-n*o-i*u-a*h+f*p-c*T-l*d-E*m,t}var We=He;var qe=Ne;var Ye=be,je=Ye,ke=xe,ze=ke;var Ke=Object.freeze({__proto__:null,create:function(){var t=new u(8);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t},clone:function(t){var e=new u(8);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e},fromValues:function(t,e,r,n,i,a,s,o){var h=new u(8);return h[0]=t,h[1]=e,h[2]=r,h[3]=n,h[4]=i,h[5]=a,h[6]=s,h[7]=o,h},fromRotationTranslationValues:function(t,e,r,n,i,a,s){var o=new u(8);o[0]=t,o[1]=e,o[2]=r,o[3]=n;var h=.5*i,_=.5*a,c=.5*s;return o[4]=h*n+_*r-c*e,o[5]=_*n+c*t-h*r,o[6]=c*n+h*e-_*t,o[7]=-h*t-_*e-c*r,o},fromRotationTranslation:ye,fromTranslation:function(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t},fromRotation:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},fromMat4:function(t,e){var r=re();Y(r,e);var n=new u(3);return W(n,e),ye(t,r,n),t},copy:Ge,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},set:function(t,e,r,n,i,a,s,o,u){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=a,t[5]=s,t[6]=o,t[7]=u,t},getReal:Ve,getDual:function(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t},setReal:Xe,setDual:function(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t},getTranslation:function(t,e){var r=e[4],n=e[5],i=e[6],a=e[7],s=-e[0],o=-e[1],u=-e[2],h=e[3];return t[0]=2*(r*h+a*s+n*u-i*o),t[1]=2*(n*h+a*o+i*s-r*u),t[2]=2*(i*h+a*u+r*o-n*s),t},translate:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=.5*r[0],u=.5*r[1],h=.5*r[2],_=e[4],c=e[5],l=e[6],E=e[7];return t[0]=n,t[1]=i,t[2]=a,t[3]=s,t[4]=s*o+i*h-a*u+_,t[5]=s*u+a*o-n*h+c,t[6]=s*h+n*u-i*o+l,t[7]=-n*o-i*u-a*h+E,t},rotateX:function(t,e,r){var n=-e[0],i=-e[1],a=-e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=o*s+_*n+u*a-h*i,l=u*s+_*i+h*n-o*a,E=h*s+_*a+o*i-u*n,f=_*s-o*n-u*i-h*a;return ae(t,e,r),n=t[0],i=t[1],a=t[2],s=t[3],t[4]=c*s+f*n+l*a-E*i,t[5]=l*s+f*i+E*n-c*a,t[6]=E*s+f*a+c*i-l*n,t[7]=f*s-c*n-l*i-E*a,t},rotateY:function(t,e,r){var n=-e[0],i=-e[1],a=-e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=o*s+_*n+u*a-h*i,l=u*s+_*i+h*n-o*a,E=h*s+_*a+o*i-u*n,f=_*s-o*n-u*i-h*a;return se(t,e,r),n=t[0],i=t[1],a=t[2],s=t[3],t[4]=c*s+f*n+l*a-E*i,t[5]=l*s+f*i+E*n-c*a,t[6]=E*s+f*a+c*i-l*n,t[7]=f*s-c*n-l*i-E*a,t},rotateZ:function(t,e,r){var n=-e[0],i=-e[1],a=-e[2],s=e[3],o=e[4],u=e[5],h=e[6],_=e[7],c=o*s+_*n+u*a-h*i,l=u*s+_*i+h*n-o*a,E=h*s+_*a+o*i-u*n,f=_*s-o*n-u*i-h*a;return oe(t,e,r),n=t[0],i=t[1],a=t[2],s=t[3],t[4]=c*s+f*n+l*a-E*i,t[5]=l*s+f*i+E*n-c*a,t[6]=E*s+f*a+c*i-l*n,t[7]=f*s-c*n-l*i-E*a,t},rotateByQuatAppend:function(t,e,r){var n=r[0],i=r[1],a=r[2],s=r[3],o=e[0],u=e[1],h=e[2],_=e[3];return t[0]=o*s+_*n+u*a-h*i,t[1]=u*s+_*i+h*n-o*a,t[2]=h*s+_*a+o*i-u*n,t[3]=_*s-o*n-u*i-h*a,o=e[4],u=e[5],h=e[6],_=e[7],t[4]=o*s+_*n+u*a-h*i,t[5]=u*s+_*i+h*n-o*a,t[6]=h*s+_*a+o*i-u*n,t[7]=_*s-o*n-u*i-h*a,t},rotateByQuatPrepend:function(t,e,r){var n=e[0],i=e[1],a=e[2],s=e[3],o=r[0],u=r[1],h=r[2],_=r[3];return t[0]=n*_+s*o+i*h-a*u,t[1]=i*_+s*u+a*o-n*h,t[2]=a*_+s*h+n*u-i*o,t[3]=s*_-n*o-i*u-a*h,o=r[4],u=r[5],h=r[6],_=r[7],t[4]=n*_+s*o+i*h-a*u,t[5]=i*_+s*u+a*o-n*h,t[6]=a*_+s*h+n*u-i*o,t[7]=s*_-n*o-i*u-a*h,t},rotateAroundAxis:function(t,e,r,n){if(Math.abs(n)<o)return Ge(t,e);var i=Math.hypot(r[0],r[1],r[2]);n*=.5;var a=Math.sin(n),s=a*r[0]/i,u=a*r[1]/i,h=a*r[2]/i,_=Math.cos(n),c=e[0],l=e[1],E=e[2],f=e[3];t[0]=c*_+f*s+l*h-E*u,t[1]=l*_+f*u+E*s-c*h,t[2]=E*_+f*h+c*u-l*s,t[3]=f*_-c*s-l*u-E*h;var T=e[4],d=e[5],m=e[6],p=e[7];return t[4]=T*_+p*s+d*h-m*u,t[5]=d*_+p*u+m*s-T*h,t[6]=m*_+p*h+T*u-d*s,t[7]=p*_-T*s-d*u-m*h,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t},multiply:He,mul:We,scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t},dot:qe,lerp:function(t,e,r,n){var i=1-n;return qe(e,r)<0&&(n=-n),t[0]=e[0]*i+r[0]*n,t[1]=e[1]*i+r[1]*n,t[2]=e[2]*i+r[2]*n,t[3]=e[3]*i+r[3]*n,t[4]=e[4]*i+r[4]*n,t[5]=e[5]*i+r[5]*n,t[6]=e[6]*i+r[6]*n,t[7]=e[7]*i+r[7]*n,t},invert:function(t,e){var r=ke(e);return t[0]=-e[0]/r,t[1]=-e[1]/r,t[2]=-e[2]/r,t[3]=e[3]/r,t[4]=-e[4]/r,t[5]=-e[5]/r,t[6]=-e[6]/r,t[7]=e[7]/r,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t},length:Ye,len:je,squaredLength:ke,sqrLen:ze,normalize:function(t,e){var r=ke(e);if(r>0){r=Math.sqrt(r);var n=e[0]/r,i=e[1]/r,a=e[2]/r,s=e[3]/r,o=e[4],u=e[5],h=e[6],_=e[7],c=n*o+i*u+a*h+s*_;t[0]=n,t[1]=i,t[2]=a,t[3]=s,t[4]=(o-n*c)/r,t[5]=(u-i*c)/r,t[6]=(h-a*c)/r,t[7]=(_-s*c)/r}return t},str:function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]},equals:function(t,e){var r=t[0],n=t[1],i=t[2],a=t[3],s=t[4],u=t[5],h=t[6],_=t[7],c=e[0],l=e[1],E=e[2],f=e[3],T=e[4],d=e[5],m=e[6],p=e[7];return Math.abs(r-c)<=o*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(n-l)<=o*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(i-E)<=o*Math.max(1,Math.abs(i),Math.abs(E))&&Math.abs(a-f)<=o*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(s-T)<=o*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(u-d)<=o*Math.max(1,Math.abs(u),Math.abs(d))&&Math.abs(h-m)<=o*Math.max(1,Math.abs(h),Math.abs(m))&&Math.abs(_-p)<=o*Math.max(1,Math.abs(_),Math.abs(p))}});function Ze(){var t=new u(2);return u!=Float32Array&&(t[0]=0,t[1]=0),t}function Qe(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t}function $e(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t}function Je(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t}function tr(t,e){var r=e[0]-t[0],n=e[1]-t[1];return Math.hypot(r,n)}function er(t,e){var r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}function rr(t){var e=t[0],r=t[1];return Math.hypot(e,r)}function nr(t){var e=t[0],r=t[1];return e*e+r*r}var ir=rr,ar=Qe,sr=$e,or=Je,ur=tr,hr=er,_r=nr,cr=function(){var t=Ze();return function(e,r,n,i,a,s){var o,u;for(r||(r=2),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,o=n;o<u;o+=r)t[0]=e[o],t[1]=e[o+1],a(t,t,s),e[o]=t[0],e[o+1]=t[1];return e}}(),lr=Object.freeze({__proto__:null,create:Ze,clone:function(t){var e=new u(2);return e[0]=t[0],e[1]=t[1],e},fromValues:function(t,e){var r=new u(2);return r[0]=t,r[1]=e,r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t},set:function(t,e,r){return t[0]=e,t[1]=r,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t},subtract:Qe,multiply:$e,divide:Je,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t},distance:tr,squaredDistance:er,length:rr,squaredLength:nr,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t},normalize:function(t,e){var r=e[0],n=e[1],i=r*r+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},cross:function(t,e,r){var n=e[0]*r[1]-e[1]*r[0];return t[0]=t[1]=0,t[2]=n,t},lerp:function(t,e,r,n){var i=e[0],a=e[1];return t[0]=i+n*(r[0]-i),t[1]=a+n*(r[1]-a),t},random:function(t,e){e=e||1;var r=2*h()*Math.PI;return t[0]=Math.cos(r)*e,t[1]=Math.sin(r)*e,t},transformMat2:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i,t[1]=r[1]*n+r[3]*i,t},transformMat2d:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i+r[4],t[1]=r[1]*n+r[3]*i+r[5],t},transformMat3:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[3]*i+r[6],t[1]=r[1]*n+r[4]*i+r[7],t},transformMat4:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[4]*i+r[12],t[1]=r[1]*n+r[5]*i+r[13],t},rotate:function(t,e,r,n){var i=e[0]-r[0],a=e[1]-r[1],s=Math.sin(n),o=Math.cos(n);return t[0]=i*o-a*s+r[0],t[1]=i*s+a*o+r[1],t},angle:function(t,e){var r=t[0],n=t[1],i=e[0],a=e[1],s=r*r+n*n;s>0&&(s=1/Math.sqrt(s));var o=i*i+a*a;o>0&&(o=1/Math.sqrt(o));var u=(r*i+n*a)*s*o;return u>1?0:u<-1?Math.PI:Math.acos(u)},zero:function(t){return t[0]=0,t[1]=0,t},str:function(t){return"vec2("+t[0]+", "+t[1]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},equals:function(t,e){var r=t[0],n=t[1],i=e[0],a=e[1];return Math.abs(r-i)<=o*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(n-a)<=o*Math.max(1,Math.abs(n),Math.abs(a))},len:ir,sub:ar,mul:sr,div:or,dist:ur,sqrDist:hr,sqrLen:_r,forEach:cr}),Er=Object.freeze({__proto__:null,glMatrix:l,mat2:m,mat2d:v,mat3:P,mat4:J,quat:we,quat2:Ke,vec2:lr,vec3:bt,vec4:ee});const fr=()=>{const t=document.createElement("canvas");return!!(t.getContext("experimental-webgl2")||t.getContext("webgl2"))};function Tr(t,e){const r=t.getExtension(e);if(!r)return!1;const n=e.split("_")[0],i=new RegExp(n+"$");for(const e in r){if("function"==typeof r[e]){const n=e.replace(i,"");e.substring&&(t[n]=r[e].bind(r))}}return!0}const dr=["EXT_shader_texture_lod","EXT_sRGB","EXT_frag_depth","OES_texture_float","OES_texture_half_float","OES_texture_float_linear","OES_texture_half_float_linear","OES_standard_derivatives","OES_element_index_uint","EXT_texture_filter_anisotropic","EXT_color_buffer_half_float","OES_vertex_array_object","WEBGL_depth_texture","ANGLE_instanced_arrays","WEBGL_color_buffer_float","WEBGL_draw_buffers","EXT_color_buffer_float"],mr=(()=>{let t=!1;return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&(t=!0),t})(),pr=(t,e)=>{if("number"==typeof t)return c(t,e);if(t.length!==e.length)return!1;let r=!0;return t.forEach(((t,n)=>{r=c(t,e[n])&&r})),r},Mr=t=>{let e,r;return t.touches?(e=t.touches[0].pageX,r=t.touches[0].pageY):(e=t.clientX,r=t.clientY),{x:e,y:r}},Rr={ACTIVE_ATTRIBUTES:35721,ACTIVE_ATTRIBUTE_MAX_LENGTH:35722,ACTIVE_TEXTURE:34016,ACTIVE_UNIFORMS:35718,ACTIVE_UNIFORM_MAX_LENGTH:35719,ALIASED_LINE_WIDTH_RANGE:33902,ALIASED_POINT_SIZE_RANGE:33901,ALPHA:6406,ALPHA_BITS:3413,ALWAYS:519,ARRAY_BUFFER:34962,ARRAY_BUFFER_BINDING:34964,ATTACHED_SHADERS:35717,BACK:1029,BLEND:3042,BLEND_COLOR:32773,BLEND_DST_ALPHA:32970,BLEND_DST_RGB:32968,BLEND_EQUATION:32777,BLEND_EQUATION_ALPHA:34877,BLEND_EQUATION_RGB:32777,BLEND_SRC_ALPHA:32971,BLEND_SRC_RGB:32969,BLUE_BITS:3412,BOOL:35670,BOOL_VEC2:35671,BOOL_VEC3:35672,BOOL_VEC4:35673,BROWSER_DEFAULT_WEBGL:37444,BUFFER_SIZE:34660,BUFFER_USAGE:34661,BYTE:5120,CCW:2305,CLAMP_TO_EDGE:33071,COLOR_ATTACHMENT0:36064,COLOR_BUFFER_BIT:16384,COLOR_CLEAR_VALUE:3106,COLOR_WRITEMASK:3107,COMPILE_STATUS:35713,COMPRESSED_TEXTURE_FORMATS:34467,CONSTANT_ALPHA:32771,CONSTANT_COLOR:32769,CONTEXT_LOST_WEBGL:37442,CULL_FACE:2884,CULL_FACE_MODE:2885,CURRENT_PROGRAM:35725,CURRENT_VERTEX_ATTRIB:34342,CW:2304,DECR:7683,DECR_WRAP:34056,DELETE_STATUS:35712,DEPTH_ATTACHMENT:36096,DEPTH_BITS:3414,DEPTH_BUFFER_BIT:256,DEPTH_CLEAR_VALUE:2931,DEPTH_COMPONENT:6402,RED:6403,DEPTH_COMPONENT16:33189,DEPTH_FUNC:2932,DEPTH_RANGE:2928,DEPTH_STENCIL:34041,DEPTH_STENCIL_ATTACHMENT:33306,DEPTH_TEST:2929,DEPTH_WRITEMASK:2930,DITHER:3024,DONT_CARE:4352,DST_ALPHA:772,DST_COLOR:774,DYNAMIC_DRAW:35048,ELEMENT_ARRAY_BUFFER:34963,ELEMENT_ARRAY_BUFFER_BINDING:34965,EQUAL:514,FASTEST:4353,FLOAT:5126,FLOAT_MAT2:35674,FLOAT_MAT3:35675,FLOAT_MAT4:35676,FLOAT_VEC2:35664,FLOAT_VEC3:35665,FLOAT_VEC4:35666,FRAGMENT_SHADER:35632,FRAMEBUFFER:36160,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:36049,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:36048,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:36051,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:36050,FRAMEBUFFER_BINDING:36006,FRAMEBUFFER_COMPLETE:36053,FRAMEBUFFER_INCOMPLETE_ATTACHMENT:36054,FRAMEBUFFER_INCOMPLETE_DIMENSIONS:36057,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:36055,FRAMEBUFFER_UNSUPPORTED:36061,FRONT:1028,FRONT_AND_BACK:1032,FRONT_FACE:2886,FUNC_ADD:32774,FUNC_REVERSE_SUBTRACT:32779,FUNC_SUBTRACT:32778,GENERATE_MIPMAP_HINT:33170,GEQUAL:518,GREATER:516,GREEN_BITS:3411,HALF_FLOAT:36193,HIGH_FLOAT:36338,HIGH_INT:36341,INCR:7682,INCR_WRAP:34055,INFO_LOG_LENGTH:35716,INT:5124,INT_VEC2:35667,INT_VEC3:35668,INT_VEC4:35669,INVALID_ENUM:1280,INVALID_FRAMEBUFFER_OPERATION:1286,INVALID_OPERATION:1282,INVALID_VALUE:1281,INVERT:5386,KEEP:7680,LEQUAL:515,LESS:513,LINEAR:9729,LINEAR_MIPMAP_LINEAR:9987,LINEAR_MIPMAP_NEAREST:9985,LINES:1,LINE_LOOP:2,LINE_STRIP:3,LINE_WIDTH:2849,LINK_STATUS:35714,LOW_FLOAT:36336,LOW_INT:36339,LUMINANCE:6409,LUMINANCE_ALPHA:6410,MAX_COMBINED_TEXTURE_IMAGE_UNITS:35661,MAX_CUBE_MAP_TEXTURE_SIZE:34076,MAX_FRAGMENT_UNIFORM_VECTORS:36349,MAX_RENDERBUFFER_SIZE:34024,MAX_TEXTURE_IMAGE_UNITS:34930,MAX_TEXTURE_SIZE:3379,MAX_VARYING_VECTORS:36348,MAX_VERTEX_ATTRIBS:34921,MAX_VERTEX_TEXTURE_IMAGE_UNITS:35660,MAX_VERTEX_UNIFORM_VECTORS:36347,MAX_VIEWPORT_DIMS:3386,MEDIUM_FLOAT:36337,MEDIUM_INT:36340,MIRRORED_REPEAT:33648,NEAREST:9728,NEAREST_MIPMAP_LINEAR:9986,NEAREST_MIPMAP_NEAREST:9984,NEVER:512,NICEST:4354,NONE:0,NOTEQUAL:517,NO_ERROR:0,NUM_COMPRESSED_TEXTURE_FORMATS:34466,ONE:1,ONE_MINUS_CONSTANT_ALPHA:32772,ONE_MINUS_CONSTANT_COLOR:32770,ONE_MINUS_DST_ALPHA:773,ONE_MINUS_DST_COLOR:775,ONE_MINUS_SRC_ALPHA:771,ONE_MINUS_SRC_COLOR:769,OUT_OF_MEMORY:1285,PACK_ALIGNMENT:3333,POINTS:0,POLYGON_OFFSET_FACTOR:32824,POLYGON_OFFSET_FILL:32823,POLYGON_OFFSET_UNITS:10752,RED_BITS:3410,RENDERBUFFER:36161,RENDERBUFFER_ALPHA_SIZE:36179,RENDERBUFFER_BINDING:36007,RENDERBUFFER_BLUE_SIZE:36178,RENDERBUFFER_DEPTH_SIZE:36180,RENDERBUFFER_GREEN_SIZE:36177,RENDERBUFFER_HEIGHT:36163,RENDERBUFFER_INTERNAL_FORMAT:36164,RENDERBUFFER_RED_SIZE:36176,RENDERBUFFER_STENCIL_SIZE:36181,RENDERBUFFER_WIDTH:36162,RENDERER:7937,REPEAT:10497,REPLACE:7681,RGB:6407,RGB5_A1:32855,RGB565:36194,RGBA:6408,RGBA4:32854,SAMPLER_2D:35678,SAMPLER_CUBE:35680,SAMPLES:32937,SAMPLE_ALPHA_TO_COVERAGE:32926,SAMPLE_BUFFERS:32936,SAMPLE_COVERAGE:32928,SAMPLE_COVERAGE_INVERT:32939,SAMPLE_COVERAGE_VALUE:32938,SCISSOR_BOX:3088,SCISSOR_TEST:3089,SHADER_COMPILER:36346,SHADER_SOURCE_LENGTH:35720,SHADER_TYPE:35663,SHADING_LANGUAGE_VERSION:35724,SHORT:5122,SRC_ALPHA:770,SRC_ALPHA_SATURATE:776,SRC_COLOR:768,STATIC_DRAW:35044,STENCIL_ATTACHMENT:36128,STENCIL_BACK_FAIL:34817,STENCIL_BACK_FUNC:34816,STENCIL_BACK_PASS_DEPTH_FAIL:34818,STENCIL_BACK_PASS_DEPTH_PASS:34819,STENCIL_BACK_REF:36003,STENCIL_BACK_VALUE_MASK:36004,STENCIL_BACK_WRITEMASK:36005,STENCIL_BITS:3415,STENCIL_BUFFER_BIT:1024,STENCIL_CLEAR_VALUE:2961,STENCIL_FAIL:2964,STENCIL_FUNC:2962,STENCIL_INDEX:6401,STENCIL_INDEX8:36168,STENCIL_PASS_DEPTH_FAIL:2965,STENCIL_PASS_DEPTH_PASS:2966,STENCIL_REF:2967,STENCIL_TEST:2960,STENCIL_VALUE_MASK:2963,STENCIL_WRITEMASK:2968,STREAM_DRAW:35040,SUBPIXEL_BITS:3408,TEXTURE:5890,TEXTURE0:33984,TEXTURE1:33985,TEXTURE2:33986,TEXTURE3:33987,TEXTURE4:33988,TEXTURE5:33989,TEXTURE6:33990,TEXTURE7:33991,TEXTURE8:33992,TEXTURE9:33993,TEXTURE10:33994,TEXTURE11:33995,TEXTURE12:33996,TEXTURE13:33997,TEXTURE14:33998,TEXTURE15:33999,TEXTURE16:34e3,TEXTURE17:34001,TEXTURE18:34002,TEXTURE19:34003,TEXTURE20:34004,TEXTURE21:34005,TEXTURE22:34006,TEXTURE23:34007,TEXTURE24:34008,TEXTURE25:34009,TEXTURE26:34010,TEXTURE27:34011,TEXTURE28:34012,TEXTURE29:34013,TEXTURE30:34014,TEXTURE31:34015,TEXTURE_2D:3553,TEXTURE_BINDING_2D:32873,TEXTURE_BINDING_CUBE_MAP:34068,TEXTURE_CUBE_MAP:34067,TEXTURE_CUBE_MAP_NEGATIVE_X:34070,TEXTURE_CUBE_MAP_NEGATIVE_Y:34072,TEXTURE_CUBE_MAP_NEGATIVE_Z:34074,TEXTURE_CUBE_MAP_POSITIVE_X:34069,TEXTURE_CUBE_MAP_POSITIVE_Y:34071,TEXTURE_CUBE_MAP_POSITIVE_Z:34073,TEXTURE_MAG_FILTER:10240,TEXTURE_MIN_FILTER:10241,TEXTURE_WRAP_S:10242,TEXTURE_WRAP_T:10243,TRIANGLES:4,TRIANGLE_FAN:6,TRIANGLE_STRIP:5,UNPACK_ALIGNMENT:3317,UNPACK_COLORSPACE_CONVERSION_WEBGL:37443,UNPACK_FLIP_Y_WEBGL:37440,UNPACK_PREMULTIPLY_ALPHA_WEBGL:37441,UNSIGNED_BYTE:5121,UNSIGNED_INT:5125,UNSIGNED_SHORT:5123,UNSIGNED_SHORT_4_4_4_4:32819,UNSIGNED_SHORT_5_5_5_1:32820,UNSIGNED_SHORT_5_6_5:33635,VALIDATE_STATUS:35715,VENDOR:7936,VERSION:7938,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:34975,VERTEX_ATTRIB_ARRAY_ENABLED:34338,VERTEX_ATTRIB_ARRAY_NORMALIZED:34922,VERTEX_ATTRIB_ARRAY_POINTER:34373,VERTEX_ATTRIB_ARRAY_SIZE:34339,VERTEX_ATTRIB_ARRAY_STRIDE:34340,VERTEX_ATTRIB_ARRAY_TYPE:34341,VERTEX_SHADER:35633,VIEWPORT:2978,ZERO:0,R8:33321},Ar={0:"NONE",1:"ONE",2:"LINE_LOOP",3:"LINE_STRIP",4:"TRIANGLES",5:"TRIANGLE_STRIP",6:"TRIANGLE_FAN",256:"DEPTH_BUFFER_BIT",512:"NEVER",513:"LESS",514:"EQUAL",515:"LEQUAL",516:"GREATER",517:"NOTEQUAL",518:"GEQUAL",519:"ALWAYS",768:"SRC_COLOR",769:"ONE_MINUS_SRC_COLOR",770:"SRC_ALPHA",771:"ONE_MINUS_SRC_ALPHA",772:"DST_ALPHA",773:"ONE_MINUS_DST_ALPHA",774:"DST_COLOR",775:"ONE_MINUS_DST_COLOR",776:"SRC_ALPHA_SATURATE",1024:"STENCIL_BUFFER_BIT",1028:"FRONT",1029:"BACK",1032:"FRONT_AND_BACK",1280:"INVALID_ENUM",1281:"INVALID_VALUE",1282:"INVALID_OPERATION",1285:"OUT_OF_MEMORY",1286:"INVALID_FRAMEBUFFER_OPERATION",2304:"CW",2305:"CCW",2849:"LINE_WIDTH",2884:"CULL_FACE",2885:"CULL_FACE_MODE",2886:"FRONT_FACE",2928:"DEPTH_RANGE",2929:"DEPTH_TEST",2930:"DEPTH_WRITEMASK",2931:"DEPTH_CLEAR_VALUE",2932:"DEPTH_FUNC",2960:"STENCIL_TEST",2961:"STENCIL_CLEAR_VALUE",2962:"STENCIL_FUNC",2963:"STENCIL_VALUE_MASK",2964:"STENCIL_FAIL",2965:"STENCIL_PASS_DEPTH_FAIL",2966:"STENCIL_PASS_DEPTH_PASS",2967:"STENCIL_REF",2968:"STENCIL_WRITEMASK",2978:"VIEWPORT",3024:"DITHER",3042:"BLEND",3088:"SCISSOR_BOX",3089:"SCISSOR_TEST",3106:"COLOR_CLEAR_VALUE",3107:"COLOR_WRITEMASK",3317:"UNPACK_ALIGNMENT",3333:"PACK_ALIGNMENT",3379:"MAX_TEXTURE_SIZE",3386:"MAX_VIEWPORT_DIMS",3408:"SUBPIXEL_BITS",3410:"RED_BITS",3411:"GREEN_BITS",3412:"BLUE_BITS",3413:"ALPHA_BITS",3414:"DEPTH_BITS",3415:"STENCIL_BITS",3553:"TEXTURE_2D",4352:"DONT_CARE",4353:"FASTEST",4354:"NICEST",5120:"BYTE",5121:"UNSIGNED_BYTE",5122:"SHORT",5123:"UNSIGNED_SHORT",5124:"INT",5125:"UNSIGNED_INT",5126:"FLOAT",5386:"INVERT",5890:"TEXTURE",6401:"STENCIL_INDEX",6402:"DEPTH_COMPONENT",6403:"RED",6406:"ALPHA",6407:"RGB",6408:"RGBA",6409:"LUMINANCE",6410:"LUMINANCE_ALPHA",7680:"KEEP",7681:"REPLACE",7682:"INCR",7683:"DECR",7936:"VENDOR",7937:"RENDERER",7938:"VERSION",9728:"NEAREST",9729:"LINEAR",9984:"NEAREST_MIPMAP_NEAREST",9985:"LINEAR_MIPMAP_NEAREST",9986:"NEAREST_MIPMAP_LINEAR",9987:"LINEAR_MIPMAP_LINEAR",10240:"TEXTURE_MAG_FILTER",10241:"TEXTURE_MIN_FILTER",10242:"TEXTURE_WRAP_S",10243:"TEXTURE_WRAP_T",10497:"REPEAT",10752:"POLYGON_OFFSET_UNITS",16384:"COLOR_BUFFER_BIT",32769:"CONSTANT_COLOR",32770:"ONE_MINUS_CONSTANT_COLOR",32771:"CONSTANT_ALPHA",32772:"ONE_MINUS_CONSTANT_ALPHA",32773:"BLEND_COLOR",32774:"FUNC_ADD",32777:"BLEND_EQUATION_RGB",32778:"FUNC_SUBTRACT",32779:"FUNC_REVERSE_SUBTRACT",32819:"UNSIGNED_SHORT_4_4_4_4",32820:"UNSIGNED_SHORT_5_5_5_1",32823:"POLYGON_OFFSET_FILL",32824:"POLYGON_OFFSET_FACTOR",32854:"RGBA4",32855:"RGB5_A1",32873:"TEXTURE_BINDING_2D",32926:"SAMPLE_ALPHA_TO_COVERAGE",32928:"SAMPLE_COVERAGE",32936:"SAMPLE_BUFFERS",32937:"SAMPLES",32938:"SAMPLE_COVERAGE_VALUE",32939:"SAMPLE_COVERAGE_INVERT",32968:"BLEND_DST_RGB",32969:"BLEND_SRC_RGB",32970:"BLEND_DST_ALPHA",32971:"BLEND_SRC_ALPHA",33071:"CLAMP_TO_EDGE",33170:"GENERATE_MIPMAP_HINT",33189:"DEPTH_COMPONENT16",33306:"DEPTH_STENCIL_ATTACHMENT",33321:"R8",33635:"UNSIGNED_SHORT_5_6_5",33648:"MIRRORED_REPEAT",33901:"ALIASED_POINT_SIZE_RANGE",33902:"ALIASED_LINE_WIDTH_RANGE",33984:"TEXTURE0",33985:"TEXTURE1",33986:"TEXTURE2",33987:"TEXTURE3",33988:"TEXTURE4",33989:"TEXTURE5",33990:"TEXTURE6",33991:"TEXTURE7",33992:"TEXTURE8",33993:"TEXTURE9",33994:"TEXTURE10",33995:"TEXTURE11",33996:"TEXTURE12",33997:"TEXTURE13",33998:"TEXTURE14",33999:"TEXTURE15",34e3:"TEXTURE16",34001:"TEXTURE17",34002:"TEXTURE18",34003:"TEXTURE19",34004:"TEXTURE20",34005:"TEXTURE21",34006:"TEXTURE22",34007:"TEXTURE23",34008:"TEXTURE24",34009:"TEXTURE25",34010:"TEXTURE26",34011:"TEXTURE27",34012:"TEXTURE28",34013:"TEXTURE29",34014:"TEXTURE30",34015:"TEXTURE31",34016:"ACTIVE_TEXTURE",34024:"MAX_RENDERBUFFER_SIZE",34041:"DEPTH_STENCIL",34055:"INCR_WRAP",34056:"DECR_WRAP",34067:"TEXTURE_CUBE_MAP",34068:"TEXTURE_BINDING_CUBE_MAP",34069:"TEXTURE_CUBE_MAP_POSITIVE_X",34070:"TEXTURE_CUBE_MAP_NEGATIVE_X",34071:"TEXTURE_CUBE_MAP_POSITIVE_Y",34072:"TEXTURE_CUBE_MAP_NEGATIVE_Y",34073:"TEXTURE_CUBE_MAP_POSITIVE_Z",34074:"TEXTURE_CUBE_MAP_NEGATIVE_Z",34076:"MAX_CUBE_MAP_TEXTURE_SIZE",34338:"VERTEX_ATTRIB_ARRAY_ENABLED",34339:"VERTEX_ATTRIB_ARRAY_SIZE",34340:"VERTEX_ATTRIB_ARRAY_STRIDE",34341:"VERTEX_ATTRIB_ARRAY_TYPE",34342:"CURRENT_VERTEX_ATTRIB",34373:"VERTEX_ATTRIB_ARRAY_POINTER",34466:"NUM_COMPRESSED_TEXTURE_FORMATS",34467:"COMPRESSED_TEXTURE_FORMATS",34660:"BUFFER_SIZE",34661:"BUFFER_USAGE",34816:"STENCIL_BACK_FUNC",34817:"STENCIL_BACK_FAIL",34818:"STENCIL_BACK_PASS_DEPTH_FAIL",34819:"STENCIL_BACK_PASS_DEPTH_PASS",34877:"BLEND_EQUATION_ALPHA",34921:"MAX_VERTEX_ATTRIBS",34922:"VERTEX_ATTRIB_ARRAY_NORMALIZED",34930:"MAX_TEXTURE_IMAGE_UNITS",34962:"ARRAY_BUFFER",34963:"ELEMENT_ARRAY_BUFFER",34964:"ARRAY_BUFFER_BINDING",34965:"ELEMENT_ARRAY_BUFFER_BINDING",34975:"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",35040:"STREAM_DRAW",35044:"STATIC_DRAW",35048:"DYNAMIC_DRAW",35632:"FRAGMENT_SHADER",35633:"VERTEX_SHADER",35660:"MAX_VERTEX_TEXTURE_IMAGE_UNITS",35661:"MAX_COMBINED_TEXTURE_IMAGE_UNITS",35663:"SHADER_TYPE",35664:"FLOAT_VEC2",35665:"FLOAT_VEC3",35666:"FLOAT_VEC4",35667:"INT_VEC2",35668:"INT_VEC3",35669:"INT_VEC4",35670:"BOOL",35671:"BOOL_VEC2",35672:"BOOL_VEC3",35673:"BOOL_VEC4",35674:"FLOAT_MAT2",35675:"FLOAT_MAT3",35676:"FLOAT_MAT4",35678:"SAMPLER_2D",35680:"SAMPLER_CUBE",35712:"DELETE_STATUS",35713:"COMPILE_STATUS",35714:"LINK_STATUS",35715:"VALIDATE_STATUS",35716:"INFO_LOG_LENGTH",35717:"ATTACHED_SHADERS",35718:"ACTIVE_UNIFORMS",35719:"ACTIVE_UNIFORM_MAX_LENGTH",35720:"SHADER_SOURCE_LENGTH",35721:"ACTIVE_ATTRIBUTES",35722:"ACTIVE_ATTRIBUTE_MAX_LENGTH",35724:"SHADING_LANGUAGE_VERSION",35725:"CURRENT_PROGRAM",36003:"STENCIL_BACK_REF",36004:"STENCIL_BACK_VALUE_MASK",36005:"STENCIL_BACK_WRITEMASK",36006:"FRAMEBUFFER_BINDING",36007:"RENDERBUFFER_BINDING",36048:"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",36049:"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",36050:"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",36051:"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",36053:"FRAMEBUFFER_COMPLETE",36054:"FRAMEBUFFER_INCOMPLETE_ATTACHMENT",36055:"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",36057:"FRAMEBUFFER_INCOMPLETE_DIMENSIONS",36061:"FRAMEBUFFER_UNSUPPORTED",36064:"COLOR_ATTACHMENT0",36096:"DEPTH_ATTACHMENT",36128:"STENCIL_ATTACHMENT",36160:"FRAMEBUFFER",36161:"RENDERBUFFER",36162:"RENDERBUFFER_WIDTH",36163:"RENDERBUFFER_HEIGHT",36164:"RENDERBUFFER_INTERNAL_FORMAT",36168:"STENCIL_INDEX8",36176:"RENDERBUFFER_RED_SIZE",36177:"RENDERBUFFER_GREEN_SIZE",36178:"RENDERBUFFER_BLUE_SIZE",36179:"RENDERBUFFER_ALPHA_SIZE",36180:"RENDERBUFFER_DEPTH_SIZE",36181:"RENDERBUFFER_STENCIL_SIZE",36193:"HALF_FLOAT",36194:"RGB565",36336:"LOW_FLOAT",36337:"MEDIUM_FLOAT",36338:"HIGH_FLOAT",36339:"LOW_INT",36340:"MEDIUM_INT",36341:"HIGH_INT",36346:"SHADER_COMPILER",36347:"MAX_VERTEX_UNIFORM_VECTORS",36348:"MAX_VARYING_VECTORS",36349:"MAX_FRAGMENT_UNIFORM_VECTORS",37440:"UNPACK_FLIP_Y_WEBGL",37441:"UNPACK_PREMULTIPLY_ALPHA_WEBGL",37442:"CONTEXT_LOST_WEBGL",37443:"UNPACK_COLORSPACE_CONVERSION_WEBGL",37444:"BROWSER_DEFAULT_WEBGL"};var vr={alpha:!1,depth:!0,premultipliedAlpha:!1};let Ir=0;function gr(){let t,e,r=[0,0,0,0],n=0,i=0,a=0,o=fr(),u=mr;const h=O(),_=O(),c=O(),l=I(),E=O(),f=I();this.id="WebGLContext"+Ir++,this.canvas,this.gl,this.CONTEXT_LOST="contextLost",this.CONTEXT_RESTORED="contextRestored",this.shaderCount=0,this.bufferCount=0,this.textureCount=0,this.frameBufferCount=0,this.maxAnisotropy=0,this.multiRenderTargetSupport=!1,this.maxMultiRenderTargets=0,this.init=function(t,e={}){const r=s({},vr,e);if(void 0!==t){if(t instanceof HTMLCanvasElement){this.canvas=t;let n=o?"webgl2":"webgl";e.webgl1&&(n="webgl",o=!1),this.gl=t.getContext(n,r)}else window.WebGL2RenderingContext&&t instanceof WebGL2RenderingContext?(o=!0,this.gl=t,this.canvas=t.canvas):t instanceof WebGLRenderingContext?(o=!1,this.gl=t,this.canvas=t.canvas):console.error("The source has to be one of the following : Canvas, WebGLRenderingContext or WebGL2RenderingContext");this.canvas.addEventListener("webglcontextlost",d),this.canvas.addEventListener("webglcontextrestored",m),this.extensions=(t=>{const{gl:e}=t,r=window.WebGL2RenderingContext&&e instanceof WebGL2RenderingContext,n={};dr.forEach((t=>{n[t]=e.getExtension(t)})),r||(n.OES_vertex_array_object||console.error("OES_vertex_array_object extension is not supported"),Tr(e,"OES_vertex_array_object"),Tr(e,"ANGLE_instanced_arrays"),Tr(e,"WEBGL_draw_buffers"));const i=n.EXT_texture_filter_anisotropic;if(i&&(t.maxAnisotropy=e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)),t.multiRenderTargetSupport=!!t.gl.drawBuffers,t.multiRenderTargetSupport){const r=t.gl.MAX_DRAW_BUFFERS||n.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL;t.maxMultiRenderTargets=e.getParameter(r)}return n})(this),(t=>{for(const e in Rr)t[e]?console.log("already exist : ",e):t[e]=Rr[e];if(t.webgl2){const e=/^[^a-z]*$/;for(const r in t.gl)e.test(r)&&-1===r.indexOf("FLOAT")&&(t[r]=t.gl[r],Rr[r]=t.gl[r],Ar[t[r]]=r)}})(this),this.setSize(this.canvas.width,this.canvas.height),this.enable(this.BLEND),this.enableAlphaBlending(),this.enable(this.DEPTH_TEST),this.enable(this.CULL_FACE),this.cullFace(Nr.BACK)}else{const t=document.createElement("canvas");this.init(t,r)}},this.clear=function(t=0,e=0,r=0,n=0){const{gl:i}=this;i.clearColor(t,e,r,n),i.clear(i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT)},this.setSize=function(t,e){i=Math.floor(t),a=Math.floor(e),this.canvas.width=i,this.canvas.height=a,n=i/a,this.viewport(0,0,i,a)},this.viewport=function(t,e,n,i){pr(r,[t,e,n,i])||(r=[t,e,n,i],this.gl.viewport(t,e,n,i))},this.getViewport=function(){return r},this.getAspectRatio=function(){return n},this.enable=function(t){this.gl.enable(t)},this.disable=function(t){this.gl.disable(t)},this.cullFace=function(t){this.gl.cullFace(t)},this.enableAlphaBlending=function(){const{gl:t}=this;t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA)},this.enableAdditiveBlending=function(){const{gl:t}=this;t.blendFunc(t.ONE,t.ONE)},this.setMatrices=function(t){e=t,this.setModelMatrix(_)},this.setModelMatrix=function(t){U(c,t),void 0!==e&&(D(h,e.viewMatrix,c),g(l,h),S(l,l),N(l,l),g(f,h),S(f,f),B(E,e.viewMatrix))},this.useShader=function(e){t=e,this.shaderProgram=e.shaderProgram,this.gl.useProgram(this.shaderProgram)},this.draw=function(e){if(e.length)return void e.forEach((t=>this.draw(t)));T(),t.updateUniforms(),e.bind(this);const{drawType:r}=e,{gl:n}=this;e.isInstanced?n.drawElementsInstanced(e.drawType,e.numItems,n.UNSIGNED_INT,0,e.numInstance):r===n.POINTS?n.drawArrays(r,0,e.vertexSize):n.drawElements(r,e.numItems,n.UNSIGNED_INT,0),e.unbind()},this.getCamera=function(){return e},this.destroy=function(t=!0){this.gl.getExtension("WEBGL_lose_context").loseContext(),t&&void 0!==this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas)},this.__defineGetter__("width",(function(){return i})),this.__defineGetter__("height",(function(){return a})),this.__defineGetter__("webgl2",(function(){return o})),this.__defineGetter__("isMobile",(function(){return u})),this.__defineGetter__("aspectRatio",(function(){return n}));const T=()=>{void 0!==e&&(t.uniform("uProjectionMatrix","mat4",e.projectionMatrix),t.uniform("uViewMatrix","mat4",e.viewMatrix),t.uniform("uNormalMatrix","mat3",l),t.uniform("uModelViewMatrixInverse","mat3",f)),t.uniform("uModelMatrix","mat4",c)},d=()=>{this.emit(this.CONTEXT_LOST)},m=()=>{this.emit(this.CONTEXT_RESTORED)}}gr.prototype=Object.assign(Object.create(e.prototype),{constructor:gr});const Nr=new gr,Sr={float:"uniform1f",vec2:"uniform2fv",vec3:"uniform3fv",vec4:"uniform4fv",int:"uniform1i",ivec2:"uniform2i",ivec3:"uniform3i",ivec4:"uniform4i",mat2:"uniformMatrix2fv",mat3:"uniformMatrix3fv",mat4:"uniformMatrix4fv"},br=t=>"number"==typeof t?t:t.slice?t.slice(0):new Float32Array(t),Lr=t=>"object"==typeof t?function(t){return 9===t.length?"mat3":16===t.length?"mat4":"vec"+t.length}(t):"float";var xr="precision highp float;attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;attribute vec3 aNormal;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;varying vec2 vTextureCoord;varying vec3 vNormal;void main(void){gl_Position=uProjectionMatrix*uViewMatrix*uModelMatrix*vec4(aVertexPosition,1.0);vTextureCoord=aTextureCoord;vNormal=aNormal;}";function Cr(t,e){let r;this.vertexShader=t||xr,this.fragmentShader=e||"precision highp float;void main(void){gl_FragColor=vec4(1.0);}",this.shaderProgram;let n={};this.bind=function(t){if(void 0===t||void 0===r||t===r){if(r=t||Nr,!this.shaderProgram){const t=i(this.vertexShader,!0),e=i(this.fragmentShader,!1);a(t,e)}r.useShader(this)}else console.error("this shader has been bind to a different WebGL Rendering Context",r.id)},this.uniform=function(t,e,r){let i,a;void 0===r?(a=Lr(e),i=e):(a=e,i=r);const s=Sr[a];if(n[t]){const e=n[t];pr(e.value,i)||(e.value=br(i),e.changed=!0)}else n[t]={type:a,uniformType:s,value:br(i),changed:!0};return this},this.updateUniforms=function(){if(!r)return void console.warn("No WebGL Context has been set yet, please call shader.bind() first");const{gl:t}=r;for(let e in n){const r=n[e];if(r.changed){const n=e;r.uniformLoc||(r.uniformLoc=t.getUniformLocation(this.shaderProgram,n));const{uniformLoc:i,uniformType:a,value:s}=r;null!==i&&(-1===a.indexOf("Matrix")?t[a](i,s):t[a](i,!1,s)),r.changed=!1}}},this.destroy=function(){const{gl:t}=r;t.deleteProgram(this.shaderProgram),r.shaderCount--};const i=(t,e)=>{const{gl:n}=r,i=e?r.VERTEX_SHADER:r.FRAGMENT_SHADER,a=n.createShader(i);return n.shaderSource(a,t),n.compileShader(a),n.getShaderParameter(a,n.COMPILE_STATUS)?a:(console.warn("Error in Shader : ",n.getShaderInfoLog(a)),console.log((t=>{const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=`${t+1}: ${e[t]}`;return e.join("\n")})(t)),null)},a=(t,e)=>{const{gl:n}=r;this.shaderProgram=n.createProgram(),n.attachShader(this.shaderProgram,t),n.attachShader(this.shaderProgram,e),n.deleteShader(t),n.deleteShader(e),n.linkProgram(this.shaderProgram),r.shaderCount++}}function Pr(t=Rr.TRIANGLES){this.drawType=t,this.numItems=0;let e,r,n,i,a,s=[],o=[],u=[],h=!0,_=!1,c=0;this.bufferData=function(t,e,r,n=Rr.STATIC_DRAW,i=!1){let a,s=[];if("number"==typeof t[0]){if(a=t,void 0===r)return console.error("Missing element size for flatten data :",e),this;for(let t=0;t<a.length;t+=r){const e=[];for(let n=0;n<r;n++)e.push(a[t+n]);s.push(e)}}else s=t,a=(t=>{if(t[0]instanceof Float32Array)return t.reduce(((t,e)=>{for(let r=0;r<e.length;r++)t.push(e[r]);return t}),[]);return t.flat()})(t);const o=void 0===r?t[0].length:r;return l(a,t,e,o,n,i)},this.bufferInstance=function(t,e){const r=t[0].length;return c=t.length,this.bufferData(t,e,r,Rr.STATIC_DRAW,!0)},this.bufferVertex=function(t,e=Rr.STATIC_DRAW){return this.bufferData(t,"aVertexPosition",3,e)},this.bufferTexCoord=function(t,e=Rr.STATIC_DRAW){return this.bufferData(t,"aTextureCoord",2,e)},this.bufferNormal=function(t,e=Rr.STATIC_DRAW){return this.bufferData(t,"aNormal",3,e)},this.bufferIndex=function(t,e=Rr.STATIC_DRAW){return r=e,n=new Uint32Array(t),this.numItems=n.length,h=!0,this},this.bind=function(t){if(void 0!==t&&void 0!==a&&t!==a)return void console.error("this mesh has been bind to a different WebGL Rendering Context");a=t||GL;const{gl:r}=a;E(),r.bindVertexArray(e),this.vertexSize=this.getSource("aVertexPosition").length},this.unbind=function(){},this.getAttribute=function(t){return s.find((e=>e.name===t))},this.getAttributes=function(){return s},this.getSource=function(t){const e=this.getAttribute(t);return e?e.source:[]},this.generateFaces=function(){let t,e,r,i,a,s;u=[];const{vertices:o}=this;for(let h=0;h<n.length;h+=3){t=n[h],e=n[h+1],r=n[h+2],i=o[t],a=o[e],s=o[r];const _={indices:[t,e,r],vertices:[i,a,s]};u.push(_)}},this.destroy=function(){const{gl:t}=a;s.forEach((e=>{t.deleteBuffer(e.buffer),e.source=[],e.dataArray=[],a.bufferCount--})),i&&(t.deleteBuffer(i),a.bufferCount--),t.deleteVertexArray(e),s=[],n=[],o=[]},this.__defineGetter__("vertices",(function(){return this.getSource("aVertexPosition")})),this.__defineGetter__("coords",(function(){return this.getSource("aTextureCoord")})),this.__defineGetter__("normal",(function(){return this.getSource("aNormal")})),this.__defineGetter__("indices",(function(){return n})),this.__defineGetter__("faces",(function(){return u})),this.__defineGetter__("isInstanced",(function(){return _})),this.__defineGetter__("numInstance",(function(){return c}));const l=(t,e,r,n,i=Rr.STATIC_DRAW,a=!1)=>{const u=i;_=a||_;const h=new Float32Array(t),c=this.getAttribute(r);return c?(c.itemSize=n,c.dataArray=h,c.source=e):s.push({name:r,source:e,itemSize:n,usage:u,dataArray:h,isInstanced:a}),o.push(r),this},E=()=>{const{shaderProgram:t,gl:r}=a;0!=o.length&&(e||(e=r.createVertexArray()),r.bindVertexArray(e),s.forEach((e=>{if(-1!==o.indexOf(e.name)){const n=function(t,e){let r;const{gl:n}=e;return void 0!==t.buffer?r=t.buffer:(r=n.createBuffer(),t.buffer=r,e.bufferCount++),r}(e,a);r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e.dataArray,e.usage);const i=((t,e,r)=>(void 0===e.cacheAttribLoc&&(e.cacheAttribLoc={}),void 0===e.cacheAttribLoc[r]&&(e.cacheAttribLoc[r]=t.getAttribLocation(e,r)),e.cacheAttribLoc[r]))(r,t,e.name);i>=0&&(r.enableVertexAttribArray(i),r.vertexAttribPointer(i,e.itemSize,r.FLOAT,!1,0,0)),e.attrPosition=i,e.isInstanced&&r.vertexAttribDivisor(i,1)}})),f(),r.bindVertexArray(null),h=!1,o=[])},f=()=>{const{gl:t}=a;h&&(i||(i=t.createBuffer(),a.bufferCount++),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,i),t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,r))}}const Or=t=>0!==t&&!(t&t-1),Ur=function(t,e,r){if(!t.minFilter){let n=Rr.LINEAR;e&&e&&Or(e)&&Or(r)&&(n=Rr.NEAREST_MIPMAP_LINEAR),t.minFilter=n}return t.mipmap=void 0===t.mipmap||t.mipmap,t.magFilter=t.magFilter||Rr.LINEAR,t.wrapS=t.wrapS||Rr.CLAMP_TO_EDGE,t.wrapT=t.wrapT||Rr.CLAMP_TO_EDGE,t.internalFormat=t.internalFormat||Rr.RGBA,t.format=t.format||Rr.RGBA,t.premultiplyAlpha=void 0!==t.premultiplyAlpha&&t.premultiplyAlpha,t.level=t.level||0,t.type=t.type||Rr.UNSIGNED_BYTE,t},Fr=t=>t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof HTMLVideoElement,Br=(t,e)=>{t.webgl2&&(e.type===Rr.HALF_FLOAT?(e.type=t.gl.HALF_FLOAT,e.internalFormat=Rr.RGBA16F):e.type===Rr.FLOAT&&(e.internalFormat=Rr.RGBA32F))};class Dr{constructor(t){this._value=t}set(t,e=1){this._value=this._value,this._value=0===e?this._value&0<<t:this._value|1<<t}get(t){let e=this._value&1<<t;return e>>=t,1===e}reset(t){this._value=t}get value(){return this._value}}const wr={DRAW_BUFFERS:"This browser doesn't support multi render targets : WEBGL_draw_buffers",FRAMEBUFFER_CONTEXT:"This framebuffer has been bind to a different WebGL Rendering Context",SHADER_CONTEXT:"This shader has been bind to a different WebGL Rendering Context",TEXTURE_CONTEXT:"This texture has been bind to a different WebGL Rendering Context",CUBE_TEXTURE_CONTEXT:"This cube texture has been bind to a different WebGL Rendering Context"},yr=(t,e="")=>{console.error(t,e)};class Gr{constructor(t,e={},r=0,n=0){this._source=t,this._isHtmlElement=Fr(this._source),(this._isHtmlElement||!t||((t,e)=>{let r=!0;return"Array"===t.constructor.name&&(console.error("Please convert texture source to Unit8Array or Float32Array"),r=!1),void 0===e.type&&"Uint8Array"!==t.constructor.name&&console.error("Using none Unit8Array, pleaes specify type in the texture parameters"),r})(t,e))&&(this._getDimension(t,r,n),this._params=Ur(e,this._width,this._height),this._checkMipmap(),this._parametersState=new Dr(0))}bind(t,e){if(void 0!==e&&void 0!==this.GL&&e!==this.GL)return void yr(wr.TEXTURE_CONTEXT,this.GL.id);this.GL=e||Nr;const{gl:r}=this.GL;this.createTexture(this.GL),r.activeTexture(r.TEXTURE0+t),r.bindTexture(r.TEXTURE_2D,this._texture),this._checkParameters()}createTexture(t){void 0===t||void 0===this.GL||t===this.GL?(this.GL=t||Nr,this._texture||(Br(this.GL,this._params),this._uploadTexture())):yr(wr.TEXTURE_CONTEXT,this.GL.id)}updateTexture(t){this._source=t,this._uploadTexture()}generateMipmap(){if(!this._generateMipmap)return;const{gl:t}=this.GL;t.bindTexture(t.TEXTURE_2D,this._texture),t.generateMipmap(t.TEXTURE_2D)}destroy(){const{gl:t}=this.GL;t.deleteTexture(this._texture),this.GL.textureCount--}showProperties(){console.log("Dimension :",this._width,this._height);for(const t in this._params)console.log(t,Ar[this._params[t]]||this._params[t])}_uploadTexture(){const{gl:t}=this.GL;this._texture||(this._texture=t.createTexture(),this.GL.textureCount++),t.bindTexture(t.TEXTURE_2D,this._texture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),this._isHtmlElement&&!this.GL.webgl2?t.texImage2D(t.TEXTURE_2D,0,this._params.internalFormat,this._params.format,this._params.type,this._source):t.texImage2D(t.TEXTURE_2D,0,this._params.internalFormat,this._width,this._height,0,this._params.format,this._params.type,this._source),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,this._params.magFilter),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,this._params.minFilter),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,this._params.wrapS),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,this._params.wrapT),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this._premultiplyAlpha),this._generateMipmap&&t.generateMipmap(t.TEXTURE_2D)}_checkParameters(){const{gl:t}=this.GL;this._parametersState.value>0&&(this._parametersState.get(0)?t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,this._params.minFilter):this._parametersState.get(1)?t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,this._params.magFilter):this._parametersState.get(2)?t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,this._params.wrapS):t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,this._params.wrapT)),this._parametersState.reset(0)}_getDimension(t,e,r){t?(this._width=t.width||t.videoWidth,this._height=t.height||t.videoWidth,this._width=this._width||e,this._height=this._height||r,this._width&&this._height||(this._width=this._height=Math.sqrt(t.length/4))):(this._width=e,this._height=r)}_checkMipmap(){this._generateMipmap=this._params.mipmap,Or(this._width)&&Or(this._height)||(this._generateMipmap=!1);-1===Ar[this._params.minFilter].indexOf("MIPMAP")&&(this._generateMipmap=!1)}get texture(){return this._texture}set minFilter(t){this._params.minFilter=t,this._parametersState.set(0,1)}get minFilter(){return this._params.minFilter}set magFilter(t){this._params.magFilter=t,this._parametersState.set(1,1)}get magFilter(){return this._params.magFilter}set wrapS(t){this._params.wrapS=t,this._parametersState.set(2,1)}get wrapS(){return this._params.wrapS}set wrapT(t){this._params.wrapT=t,this._parametersState.set(3,1)}get wrapT(){return this._params.wrapT}get width(){return this._width}get height(){return this._height}}const Vr=t=>{const e=t.map((t=>Math.floor(255*t))),r=document.createElement("canvas");r.width=r.height=4;const n=r.getContext("2d");return n.fillStyle=`rgba(${e[0]}, ${e[1]}, ${e[2]}, 1)`,n.fillRect(0,0,r.width,r.height),new Gr(r)};function Xr(t,e,r={},n=1){let i,a;const s=t,o=e,u=r,h=n,_=[];let c;this.bind=function(t,e=!0){if(void 0!==t&&void 0!==i&&t!==i)return void yr(wr.FRAMEBUFFER_CONTEXT,i.id);i=t||Nr;const{gl:r}=i;h>1&&!i.multiRenderTargetSupport&&yr(wr.DRAW_BUFFERS,i.id),a||l(),e&&i.viewport(0,0,s,o),r.bindFramebuffer(r.FRAMEBUFFER,a)},this.unbind=function(t=!0){t&&i.viewport(0,0,i.width,i.height);const{gl:e}=i;e.bindFramebuffer(e.FRAMEBUFFER,null),_.forEach((t=>{t.generateMipmap()}))},this.getTexture=function(t=0){return _[t]},this.destroy=function(){const{gl:t}=i;_.forEach((t=>t.destroy())),c.destroy(),t.deleteFramebuffer(a),i.frameBufferCount--};const l=()=>{E();const{gl:t}=i;a=t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,a),i.frameBufferCount++;const e=i.webgl2?t.DRAW_FRAMEBUFFER:t.FRAMEBUFFER,r=[];for(let n=0;n<h;n++)t.framebufferTexture2D(e,t.COLOR_ATTACHMENT0+n,t.TEXTURE_2D,_[n].texture,0),r.push(Rr["COLOR_ATTACHMENT"+n]);i.multiRenderTargetSupport&&t.drawBuffers(r),t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,c.texture,0),t.bindTexture(t.TEXTURE_2D,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null)},E=()=>{for(let t=0;t<h;t++)_.push(f());const{gl:t}=i,e=i.webgl2?t.DEPTH_COMPONENT16:t.DEPTH_COMPONENT;c=f(e,Rr.UNSIGNED_INT,Rr.DEPTH_COMPONENT,{minFilter:Rr.NEAREST,magFilter:Rr.NEAREST,mipmap:!1})},f=(t,e,r,n={})=>{const a=Object.assign({},u);r||(r=t),a.internalFormat=t||Rr.RGBA,a.format=r||Rr.RGBA,a.type=e||a.type,Object.assign(a,n);const h=new Gr(null,a,s,o);return h.createTexture(i),h};this.__defineGetter__("texture",(function(){return _[0]})),this.__defineGetter__("depthTexture",(function(){return c})),this.__defineGetter__("width",(function(){return s})),this.__defineGetter__("height",(function(){return o}))}class Hr{constructor(){this._mtxView=O(),this._mtxProj=O(),this._near=0,this._far=0,this._lookDir=tt()}lookAt(t,e,r=[0,1,0]){K(this._mtxView,t,e,r)}setFromViewProjection(t,e){U(this._mtxView,t),U(this._mtxProj,e)}setViewMatrix(t){U(this._mtxView,t)}setProjectionMatrix(t){U(this._mtxProj,t)}_updateMatrices(){}get viewMatrix(){return this._mtxView}get view(){return this._mtxView}get projectionMatrix(){return this._mtxProj}get projection(){return this._mtxProj}get position(){const t=O();return B(t,this._mtxView),[t[12],t[13],t[14]]}get direction(){const t=I();return g(t,this._mtxView),N(t,t),mt(this._lookDir,[0,0,-1],t),Et(this._lookDir,this._lookDir),this._lookDir}set near(t){this._near=t,this._updateMatrices()}get near(){return this._near}set far(t){this._far=t,this._updateMatrices()}get far(){return this._far}}function Wr(t,e){this.origin=t,this.direction=e;const r=tt(),n=tt(),i=tt(),a=tt(),s=tt(),o=tt(),u=tt(),h=tt();this.at=function(t){return it(a,this.direction),ht(a,a,t),at(a,a,this.origin),a},this.lookAt=function(t){Mt(this.direction,t,this.origin),Et(this.origin,this.origin)},this.closestPointToPoint=function(t){const e=tt();Mt(t,this.origin);const r=ft(e,this.direction);return r<0?et(this.origin):(it(e,this.direction),ht(e,e,r),at(e,e,this.origin),e)},this.distanceToPoint=function(t){return Math.sqrt(this.distanceSqToPoint(t))},this.distanceSqToPoint=function(t){const e=tt();Mt(e,t,this.origin);const r=ft(e,this.direction);return r<0?ct(this.origin,t):(it(e,this.direction),ht(e,e,r),at(e,e,this.origin),ct(e,t))},this.intersectsSphere=function(t,e){return this.distanceToPoint(t)<=e},this.intersectSphere=function(t,e){const r=tt();Mt(r,t,this.origin);const n=ft(r,this.direction),i=ft(r,r)-n*n,a=e*e;if(i>a)return null;const s=Math.sqrt(a-i),o=n-s,u=n+s;return o<0&&u<0?null:o<0?this.at(u):this.at(o)},this.intersectTriangle=function(t,e,a,_=!0){it(r,t),it(n,e),it(i,a),Mt(s,n,r),Mt(o,i,r),Tt(u,s,o);let c,l=ft(this.direction,u);if(l>0){if(_)return null;c=1}else{if(!(l<0))return null;c=-1,l=-l}Mt(h,this.origin,r),Tt(o,h,o);const E=c*ft(this.direction,o);if(E<0)return null;Tt(s,s,h);const f=c*ft(this.direction,s);if(f<0)return null;if(E+f>l)return null;const T=-c*ft(h,u);return T<0?null:this.at(T/l)}}class qr extends Hr{constructor(t,e,r,n){super(),this._fov=0,this._ratio=0,this.setPerspective(t,e,r,n)}setPerspective(t,e,r,n){k(this._mtxProj,t,e,r,n),this._near=r,this._far=n,this._fov=t,this._ratio=e}setAspectRatio(t){this._ratio=t,this._updateMatrices()}generateRay(t,e){const r=O(),n=tt();return D(r,this._mtxProj,this._mtxView),B(r,r),dt(n,t,r),Mt(n,n,this.position),Et(n,n),e?(e.origin=this.position,e.direction=n):e=new Wr(this.position,n),e}_updateMatrices(){this.setPerspective(this._fov,this._ratio,this._near,this._far)}}class Yr{constructor(t){return this._GL=t||Nr,this._uniforms={},this._uniformTextures=[],this._fbo,this._clearColor={r:0,g:0,b:0,a:0},this}setClearColor(t=0,e=0,r=0,n=0){return this._clearColor.r=t,this._clearColor.g=e,this._clearColor.b=r,this._clearColor.a=n,this}useProgram(t,e){return this._shader=t instanceof Cr?t:new Cr(t,e),this}setMesh(t){return this._mesh=t,this}createMesh(t){return this._mesh=new Pr(t),this}bufferVertex(t){return this._mesh||(this._mesh=new Pr),this._mesh.bufferVertex(t),this}bufferTexCoord(t){return this._mesh||(this._mesh=new Pr),this._mesh.bufferTexCoord(t),this}bufferNormal(t){return this._mesh||(this._mesh=new Pr),this._mesh.bufferNormal(t),this}bufferIndex(t){return this._mesh||(this._mesh=new Pr),this._mesh.bufferIndex(t),this}bufferInstance(t,e){return this._mesh?(this._mesh.bufferInstance(t,e),this):(console.warn("Need to create mesh first"),this)}bufferData(t,e){return this._mesh||(this._mesh=new Pr),this._mesh.bufferData(t,e),this}uniform(t,e,r){const n=t;let i,a;return void 0===r?(a=Lr(e),i=e):(a=e,i=r),this._uniforms[n]={type:a,value:i},this}uniformTexture(t,e,r){return this.bindTexture(t,e,r)}bindTexture(t,e,r){return void 0!==r?this._uniformTextures[r]={name:t,texture:e}:this._uniformTextures.push({name:t,texture:e}),this}bindFrameBuffer(t){return this._fbo=t,this}draw(){if(this._shader){if(this._mesh){if(this._fbo){const{r:t,g:e,b:r,a:n}=this._clearColor;this._fbo.bind(this._GL),this._GL.clear(t,e,r,n)}this._shader.bind(this._GL);for(const t in this._uniforms){const e=this._uniforms[t];this._shader.uniform(t,e.type,e.value)}return this._uniformTextures.forEach(((t,e)=>{void 0!==t&&(this._shader.uniform(t.name,"int",e),t.texture.bind(e,this._GL))})),this._GL.draw(this._mesh),this._fbo&&this._fbo.unbind(),this}console.warn("No Mesh assigned for draw call")}else console.warn("No GLShader assigned for draw call")}get shader(){return this._shader}get framebuffer(){return this._fbo}}var jr="precision highp float;uniform vec3 uColor;uniform float uOpacity;void main(void){gl_FragColor=vec4(uColor,uOpacity);}";class kr extends Yr{constructor(t){super(t);const e=this._GL;this.createMesh(e.LINES).bufferVertex([[0,0,0],[1,0,0]]).bufferIndex([0,1]).useProgram("precision highp float;attribute vec3 aVertexPosition;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;uniform vec3 uPosA;uniform vec3 uPosB;void main(void){vec3 pos=mix(uPosA,uPosB,aVertexPosition.x);gl_Position=uProjectionMatrix*uViewMatrix*uModelMatrix*vec4(pos,1.0);}",jr),this.color=[1,1,1],this.opacity=.75}draw(t,e,r,n){this.uniform("uPosA",t).uniform("uPosB",e).uniform("uOpacity",n||this.opacity).uniform("uColor",r||this.color),super.draw()}}const zr={plane:(t,e,r,n="xy")=>{const i=[],a=[],s=[],o=[],u=t/r,h=e/r,_=1/r,c=.5*-t,l=.5*-e;let E=0;for(let t=0;t<r;t++)for(let e=0;e<r;e++){const f=u*t+c,T=h*e+l,d=t/r,m=e/r;"xz"===n?(i.push([f,0,T+h]),i.push([f+u,0,T+h]),i.push([f+u,0,T]),i.push([f,0,T]),a.push([d,1-(m+_)]),a.push([d+_,1-(m+_)]),a.push([d+_,1-m]),a.push([d,1-m]),o.push([0,1,0]),o.push([0,1,0]),o.push([0,1,0]),o.push([0,1,0])):"yz"===n?(i.push([0,T,f]),i.push([0,T,f+u]),i.push([0,T+h,f+u]),i.push([0,T+h,f]),a.push([d,m]),a.push([d+_,m]),a.push([d+_,m+_]),a.push([d,m+_]),o.push([1,0,0]),o.push([1,0,0]),o.push([1,0,0]),o.push([1,0,0])):(i.push([f,T,0]),i.push([f+u,T,0]),i.push([f+u,T+h,0]),i.push([f,T+h,0]),a.push([d,m]),a.push([d+_,m]),a.push([d+_,m+_]),a.push([d,m+_]),o.push([0,0,1]),o.push([0,0,1]),o.push([0,0,1]),o.push([0,0,1])),s.push(4*E+0),s.push(4*E+1),s.push(4*E+2),s.push(4*E+0),s.push(4*E+2),s.push(4*E+3),E++}return(new Pr).bufferVertex(i).bufferTexCoord(a).bufferIndex(s).bufferNormal(o)},cube:(t,e,r,n=!1)=>{const i=t/2,a=(e=e||t)/2,s=(r=r||t)/2,o=[],u=[],h=[],_=[];let c=0;o.push([-i,a,-s]),o.push([i,a,-s]),o.push([i,-a,-s]),o.push([-i,-a,-s]),_.push([0,0,-1]),_.push([0,0,-1]),_.push([0,0,-1]),_.push([0,0,-1]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),c++,o.push([i,a,-s]),o.push([i,a,s]),o.push([i,-a,s]),o.push([i,-a,-s]),_.push([1,0,0]),_.push([1,0,0]),_.push([1,0,0]),_.push([1,0,0]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),c++,o.push([i,a,s]),o.push([-i,a,s]),o.push([-i,-a,s]),o.push([i,-a,s]),_.push([0,0,1]),_.push([0,0,1]),_.push([0,0,1]),_.push([0,0,1]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),c++,o.push([-i,a,s]),o.push([-i,a,-s]),o.push([-i,-a,-s]),o.push([-i,-a,s]),_.push([-1,0,0]),_.push([-1,0,0]),_.push([-1,0,0]),_.push([-1,0,0]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),c++,o.push([i,a,-s]),o.push([-i,a,-s]),o.push([-i,a,s]),o.push([i,a,s]),_.push([0,1,0]),_.push([0,1,0]),_.push([0,1,0]),_.push([0,1,0]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),c++,o.push([i,-a,s]),o.push([-i,-a,s]),o.push([-i,-a,-s]),o.push([i,-a,-s]),_.push([0,-1,0]),_.push([0,-1,0]),_.push([0,-1,0]),_.push([0,-1,0]),u.push([0,0]),u.push([1,0]),u.push([1,1]),u.push([0,1]),h.push(4*c+0),h.push(4*c+1),h.push(4*c+2),h.push(4*c+0),h.push(4*c+2),h.push(4*c+3),n&&h.reverse();return(new Pr).bufferVertex(o).bufferTexCoord(u).bufferIndex(h).bufferNormal(_)},sphere:(t,e,r=!1)=>{const n=[],i=[],a=[],s=[],o=1/e;let u=0;function h(r,n,i=!1){const a=r/e*Math.PI-.5*Math.PI,s=n/e*Math.PI*2,o=i?1:t,u=[];u[1]=Math.sin(a)*o;const h=Math.cos(a)*o;u[0]=Math.cos(s)*h,u[2]=Math.sin(s)*h;const _=1e4;return u[0]=Math.floor(u[0]*_)/_,u[1]=Math.floor(u[1]*_)/_,u[2]=Math.floor(u[2]*_)/_,u}for(let t=0;t<e;t++)for(let r=0;r<e;r++){n.push(h(t,r)),n.push(h(t+1,r)),n.push(h(t+1,r+1)),n.push(h(t,r+1)),s.push(h(t,r,!0)),s.push(h(t+1,r,!0)),s.push(h(t+1,r+1,!0)),s.push(h(t,r+1,!0));const _=r/e,c=t/e;i.push([1-_,c]),i.push([1-_,c+o]),i.push([1-_-o,c+o]),i.push([1-_-o,c]),a.push(4*u+0),a.push(4*u+1),a.push(4*u+2),a.push(4*u+0),a.push(4*u+2),a.push(4*u+3),u++}r&&a.reverse();return(new Pr).bufferVertex(n).bufferTexCoord(i).bufferIndex(a).bufferNormal(s)},bigTriangle:()=>(new Pr).bufferData([[-1,-1],[-1,4],[4,-1]],"aPosition",2).bufferIndex([2,1,0])};const Kr={simpleColorFrag:jr,copyFrag:"\n#define SHADER_NAME SIMPLE_TEXTURE\nprecision highp float;varying vec2 vTextureCoord;uniform sampler2D texture;void main(void){gl_FragColor=texture2D(texture,vTextureCoord);}",bigTriangleVert:"\n#define SHADER_NAME BIG_TRIANGLE_VERTEX\nprecision mediump float;attribute vec2 aPosition;varying vec2 vTextureCoord;void main(void){gl_Position=vec4(aPosition,0.0,1.0);vTextureCoord=aPosition*.5+.5;}",generalVert:"precision highp float;attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;attribute vec3 aNormal;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;uniform vec3 uTranslate;uniform vec3 uScale;uniform vec3 uRotation;varying vec2 vTextureCoord;varying vec3 vNormal;vec2 rotate(vec2 v,float a){float s=sin(a);float c=cos(a);mat2 m=mat2(c,s,-s,c);return m*v;}void main(void){vec3 pos=aVertexPosition*uScale;pos.yz=rotate(pos.yz,uRotation.x);pos.xz=rotate(pos.xz,uRotation.y);pos.xy=rotate(pos.xy,uRotation.z);pos+=uTranslate;gl_Position=uProjectionMatrix*uViewMatrix*uModelMatrix*vec4(pos,1.0);vTextureCoord=aTextureCoord;vNormal=aNormal;}",skyboxVert:"\n#define SHADER_NAME SKYBOX_VERTEX\nprecision highp float;attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;attribute vec3 aNormal;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;varying vec2 vTextureCoord;varying vec3 vVertex;varying vec3 vNormal;void main(void){mat4 matView=uViewMatrix;matView[3][0]=0.0;matView[3][1]=0.0;matView[3][2]=0.0;gl_Position=uProjectionMatrix*matView*uModelMatrix*vec4(aVertexPosition,1.0);vTextureCoord=aTextureCoord;vVertex=aVertexPosition;vNormal=aNormal;}"};class Zr extends Yr{constructor(t){super(t),this.setMesh(zr.sphere(1,12)).useProgram(Kr.generalVert,Kr.simpleColorFrag).uniform("uRotation",[0,0,0])}draw(t,e=[1,1,1],r=[1,1,1],n=1){this.uniform("uTranslate",t).uniform("uScale",e).uniform("uColor",r).uniform("uOpacity",n),super.draw(0)}}const{mat4:Qr,vec4:$r}=Er;class Jr{constructor(t,e,r,n={},i=1){this._fbos=[];for(let a=0;a<t;a++){const t=new Xr(e,r,n,i);this._fbos.push(t)}}swap(){const t=this._fbos.shift();this._fbos.push(t)}get read(){return this._fbos[this._fbos.length-1]}get write(){return this._fbos[0]}get all(){return this._fbos}}const tn=(t,e=!1)=>new Promise(((r,n)=>{const i=new XMLHttpRequest;i.addEventListener("load",(t=>{r(i.response)})),e&&(i.responseType="arraybuffer"),i.open("GET",t),i.send()}));function en(t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));let e=0;const r=t.length;function n(){let n="";do{const r=t[e];if(10===r){++e;break}n+=String.fromCharCode(r)}while(++e<r);return n}let i=0,a=0,s=1;let o=!1;for(let t=0;t<20;t++){const t=n();let e;if(e=t.match("FORMAT=32-bit_rle_rgbe"))o=!0;else if(e=t.match("EXPOSURE=\\s*([0-9]*[.][0-9]*)"))s=Number(e[1]);else if(e=t.match("-Y ([0-9]+) \\+X ([0-9]+)")){a=Number(e[1]),i=Number(e[2]);break}}if(!o)throw new Error("File is not run length encoded!");const u=new Uint8Array(i*a*4);!function(t,e,r,n,i,a){const s=new Array(4);let o,u,h,_=null;const c=new Array(2),l=t.length;function E(e){let r=0;do{e[r++]=t[n]}while(++n<l&&r<e.length);return r}function f(e,r,i){let a=0;do{e[r+a++]=t[n]}while(++n<l&&a<i);return a}function T(t,e,r,n){const i=4*n,a=f(e,r,i);if(a<i)throw new Error(`Error reading raw pixels: got ${a} bytes, expected ${i}`)}for(;a>0;){if(E(s)<s.length)throw new Error("Error reading bytes: expected "+s.length);if(2!==s[0]||2!==s[1]||0!=(128&s[2]))return e[r++]=s[0],e[r++]=s[1],e[r++]=s[2],e[r++]=s[3],void T(0,e,r,i*a-1);if(((255&s[2])<<8|255&s[3])!==i)throw new Error(`Wrong scanline width ${(255&s[2])<<8|255&s[3]}, expected ${i}`);null===_&&(_=new Array(4*i)),o=0;for(let t=0;t<4;t++)for(u=(t+1)*i;o<u;){if(E(c)<c.length)throw new Error("Error reading 2-byte buffer");if((255&c[0])>128){if(h=(255&c[0])-128,0===h||h>u-o)throw new Error("Bad scanline data");for(;h-- >0;)_[o++]=c[1]}else{if(h=255&c[0],0===h||h>u-o)throw new Error("Bad scanline data");if(_[o++]=c[1],--h>0){if(f(_,o,h)<h)throw new Error("Error reading non-run data");o+=h}}}for(let t=0;t<i;t++)e[r+0]=_[t],e[r+1]=_[t+i],e[r+2]=_[t+2*i],e[r+3]=_[t+3*i],r+=4;a--}}(t,u,0,e,i,a);const h=new Float32Array(i*a*4);for(let t=0;t<u.length;t+=4){let e=u[t+0]/255,r=u[t+1]/255,n=u[t+2]/255;const i=u[t+3],a=Math.pow(2,i-128);e*=a,r*=a,n*=a;const s=t;h[s+0]=e,h[s+1]=r,h[s+2]=n,h[s+3]=1}return{shape:[i,a],exposure:s,gamma:1,data:h}}var rn=un("DXT1"),nn=un("DXT3"),an=un("DXT5"),sn=un("DX10"),on=function(t){var e,r,n=new Int32Array(t,0,31);if(542327876!==n[0])throw new Error("Invalid magic number in DDS header");if(4&!n[20])throw new Error("Unsupported format, must contain a FourCC code");var i=n[21];switch(i){case rn:e=8,r="dxt1";break;case nn:e=16,r="dxt3";break;case an:e=16,r="dxt5";break;case 116:r="rgba32f";break;case sn:var a=new Uint32Array(t.slice(128,148));r=a[0];var s=a[1];a[2],a[3],a[4];if(3!==s||2!==r)throw new Error("Unsupported DX10 texture format "+r);r="rgba32f";break;default:throw new Error("Unsupported FourCC code: "+(o=i,String.fromCharCode(255&o,o>>8&255,o>>16&255,o>>24&255)))}var o;var u=n[2],h=1;131072&u&&(h=Math.max(1,n[7]));var _=!1;512&n[28]&&(_=!0);var c,l=n[4],E=n[3],f=n[1]+4,T=l,d=E,m=[];i===sn&&(f+=20);if(_)for(var p=0;p<6;p++){if("rgba32f"!==r)throw new Error("Only RGBA32f cubemaps are supported");l=T,E=d;for(var M=Math.log(l)/Math.log(2)+1,R=0;R<M;R++)c=l*E*16,m.push({offset:f,length:c,shape:[l,E]}),R<h&&(f+=c),l=Math.floor(l/2),E=Math.floor(E/2)}else for(R=0;R<h;R++)c=Math.max(4,l)/4*Math.max(4,E)/4*e,m.push({offset:f,length:c,shape:[l,E]}),f+=c,l=Math.floor(l/2),E=Math.floor(E/2);return{shape:[T,d],images:m,format:r,flags:u,cubemap:_}};function un(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const hn=function(t){const e=on(t),{flags:r}=e,n=new Int32Array(t,0,31);let i=1;131072&r&&(i=Math.max(1,n[7]));return e.images.map((e=>({data:new Float32Array(t.slice(e.offset,e.offset+e.length)),shape:e.shape,mipmapCount:i})))},_n=t=>{const e=t.split("\n"),r=[],n=[],i=[],a=[],s=[],o=[],u=[];let h,_=0;const c=/v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,l=/vn( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,E=/vt( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,f=/f( +-?\d+)( +-?\d+)( +-?\d+)( +-?\d+)?/,T=/f( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))?/,d=/f( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))?/,m=/f( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))?/;function p(t){const e=parseInt(t);return 3*(e>=0?e-1:e+a.length/3)}function M(t){const e=parseInt(t);return 3*(e>=0?e-1:e+s.length/3)}function R(t){const e=parseInt(t);return 2*(e>=0?e-1:e+o.length/2)}function A(t,e,n){r.push([a[t],a[t+1],a[t+2]]),r.push([a[e],a[e+1],a[e+2]]),r.push([a[n],a[n+1],a[n+2]]),u.push(3*_+0),u.push(3*_+1),u.push(3*_+2),_++}function v(t,e,r){n.push([o[t],o[t+1]]),n.push([o[e],o[e+1]]),n.push([o[r],o[r+1]])}function I(t,e,r){i.push([s[t],s[t+1],s[t+2]]),i.push([s[e],s[e+1],s[e+2]]),i.push([s[r],s[r+1],s[r+2]])}function g(t,e,r,n,i,a,s,o,u,h,_,c){let l,E=p(t),f=p(e),T=p(r);void 0===n?A(E,f,T):(l=p(n),A(E,f,l),A(f,T,l)),void 0!==i&&(E=R(i),f=R(a),T=R(s),void 0===n?v(E,f,T):(l=R(o),v(E,f,l),v(f,T,l))),void 0!==u&&(E=M(u),f=M(h),T=M(_),void 0===n?I(E,f,T):(l=M(c),I(E,f,l),I(f,T,l)))}for(let t=0;t<e.length;t++){let r=e[t];r=r.trim(),0!==r.length&&"#"!==r.charAt(0)&&(null!==(h=c.exec(r))?a.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):null!==(h=l.exec(r))?s.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):null!==(h=E.exec(r))?o.push(parseFloat(h[1]),parseFloat(h[2])):null!==(h=f.exec(r))?g(h[1],h[2],h[3],h[4]):null!==(h=T.exec(r))?g(h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=d.exec(r))?g(h[2],h[6],h[10],h[14],h[3],h[7],h[11],h[15],h[4],h[8],h[12],h[16]):null!==(h=m.exec(r))&&g(h[2],h[5],h[8],h[11],void 0,void 0,void 0,void 0,h[3],h[6],h[9],h[12]))}return cn({positions:r,coords:n,normals:i,indices:u})},cn=t=>{const e=t.normals.length>0,r=t.coords.length>0;let n;if(t.positions.length>65535){const i=[];let a=0;const s={};for(s.positions=t.positions.concat(),s.coords=t.coords.concat(),s.indices=t.indices.concat(),s.normals=t.normals.concat();t.indices.length>0;){const o=Math.min(65535,t.positions.length),u=t.indices.splice(0,o),h=[],_=[],c=[];let l,E=0;for(let t=0;t<u.length;t++)u[t]>E&&(E=u[t]),l=u[t],h.push(s.positions[l]),r&&_.push(s.coords[l]),e&&c.push(s.normals[l]),u[t]-=a;a=E+1,n=new Pr,n.bufferVertex(h),r&&n.bufferTexCoord(_),n.bufferIndex(u),e&&n.bufferNormal(c),i.push(n)}return i}return n=new Pr,n.bufferVertex(t.positions),r&&n.bufferTexCoord(t.coords),n.bufferIndex(t.indices),e&&n.bufferNormal(t.normals),n};let ln=window,En=60,fn=performance.now(),Tn=0,dn=0,mn=fn;const pn=[],Mn=[],Rn=[],An=[];let vn=[],In=[],gn=0;!function t(){!function(){let t,e=0,r=1e3/En,n=0;for(e=0;e<pn.length;e++)t=pn[e],null!=t&&t.func(t.args);for(;vn.length>0;)t=vn.pop(),t.func(t.args);let i=performance.now();for(dn=(i-fn)/1e3,Tn=i-mn,e=0;e<Mn.length;e++)t=Mn[e],i-t.time>t.delay&&(t.func(t.args),Mn.splice(e,1));for(i=performance.now();Rn.length>0;){if(t=Rn.shift(),n=performance.now(),!(n-i<r)){Rn.unshift(t);break}t.func(t.args)}for(i=performance.now();An.length>0;)t=An.shift(),n=performance.now(),n-i<r&&t.func(t.args);mn=i,vn=vn.concat(In),In=[]}(),ln.requestAnimationFrame(t)}();var Nn=function(t,e){const r=++gn;return pn[r]={func:t,args:e},r},Sn=function(t){return void 0!==pn[t]&&(pn[t]=null),-1};class bn{constructor(t,e=.1){this.easing=e,this._value=t,this._targetValue=t,this._efIndex=Nn((()=>this._update()))}_update(){this._checkLimit(),this._value+=(this._targetValue-this._value)*this.easing,Math.abs(this._targetValue-this._value)<1e-4&&(this._value=this._targetValue)}setTo(t){this._targetValue=this._value=t}add(t){this._targetValue+=t}limit(t,e){t>e?this.limit(e,t):(this._min=t,this._max=e,this._checkLimit())}_checkLimit(){void 0!==this._min&&this._targetValue<this._min&&(this._targetValue=this._min),void 0!==this._max&&this._targetValue>this._max&&(this._targetValue=this._max)}destroy(){Sn(this._efIndex)}set value(t){this._targetValue=t}get value(){return this._value}get targetValue(){return this._targetValue}}const Ln={Linear:{None:t=>t},Quadratic:{In:t=>t*t,Out:t=>t*(2-t),InOut:t=>(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},Cubic:{In:t=>t*t*t,Out:t=>--t*t*t+1,InOut:t=>(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},Quartic:{In:t=>t*t*t*t,Out:t=>1- --t*t*t*t,InOut:t=>(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},Quintic:{In:t=>t*t*t*t*t,Out:t=>--t*t*t*t*t+1,InOut:t=>(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},Sinusoidal:{In:t=>1-Math.cos(t*Math.PI/2),Out:t=>Math.sin(t*Math.PI/2),InOut:t=>.5*(1-Math.cos(Math.PI*t))},Exponential:{In:t=>0===t?0:Math.pow(1024,t-1),Out:t=>1===t?1:1-Math.pow(2,-10*t),InOut:t=>0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))},Circular:{In:t=>1-Math.sqrt(1-t*t),Out:t=>Math.sqrt(1- --t*t),InOut:t=>(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},Elastic:{In(t){let e,r=.1;return 0===t?0:1===t?1:(!r||r<1?(r=1,e=.1):e=.4*Math.asin(1/r)/(2*Math.PI),-r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/.4))},Out(t){let e,r=.1;return 0===t?0:1===t?1:(!r||r<1?(r=1,e=.1):e=.4*Math.asin(1/r)/(2*Math.PI),r*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/.4)+1)},InOut(t){let e,r=.1;const n=.4;return 0===t?0:1===t?1:(!r||r<1?(r=1,e=.1):e=n*Math.asin(1/r)/(2*Math.PI),(t*=2)<1?r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)}},Back:{In(t){const e=1.70158;return t*t*((e+1)*t-e)},Out(t){const e=1.70158;return--t*t*((e+1)*t+e)+1},InOut(t){const e=2.5949095;return(t*=2)<1?t*t*((e+1)*t-e)*.5:.5*((t-=2)*t*((e+1)*t+e)+2)}},Bounce:{in:t=>1-Ln.Bounce.out(1-t),out:t=>t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,inOut:t=>t<.5?.5*Ln.Bounce.in(2*t):.5*Ln.Bounce.out(2*t-1)+.5}};const xn=function(t,e){const r=e||{};return t.touches?(r.x=t.touches[0].pageX,r.y=t.touches[0].pageY):(r.x=t.clientX,r.y=t.clientY),r};class Cn{constructor(t,e=window,r=10){this._target=t,this._listenerTarget=e,this._mouse={},this._preMouse={},this.center=tt(),this._up=nt(0,1,0),this.radius=new bn(r),this.position=nt(0,0,this.radius.value),this.positionOffset=tt(),this._rx=new bn(0),this._rx.limit(-Math.PI/2,Math.PI/2),this._ry=new bn(0),this._preRX=0,this._preRY=0,this._isLockZoom=!1,this._isLockRotation=!1,this._isInvert=!1,this.sensitivity=1,this._wheelBind=t=>this._onWheel(t),this._downBind=t=>this._onDown(t),this._moveBind=t=>this._onMove(t),this._upBind=()=>this._onUp(),this.connect(),Nn((()=>this._loop()))}connect(){this.disconnect(),this._listenerTarget.addEventListener("mousewheel",this._wheelBind),this._listenerTarget.addEventListener("DOMMouseScroll",this._wheelBind),this._listenerTarget.addEventListener("mousedown",this._downBind),this._listenerTarget.addEventListener("touchstart",this._downBind),this._listenerTarget.addEventListener("mousemove",this._moveBind),this._listenerTarget.addEventListener("touchmove",this._moveBind),window.addEventListener("touchend",this._upBind),window.addEventListener("mouseup",this._upBind)}disconnect(){this._listenerTarget.removeEventListener("mousewheel",this._wheelBind),this._listenerTarget.removeEventListener("DOMMouseScroll",this._wheelBind),this._listenerTarget.removeEventListener("mousedown",this._downBind),this._listenerTarget.removeEventListener("touchstart",this._downBind),this._listenerTarget.removeEventListener("mousemove",this._moveBind),this._listenerTarget.removeEventListener("touchmove",this._moveBind),window.removeEventListener("touchend",this._upBind),window.removeEventListener("mouseup",this._upBind)}lock(t=!0){this._isLockZoom=t,this._isLockRotation=t,this._isMouseDown=!1}lockZoom(t=!0){this._isLockZoom=t}lockRotation(t=!0){this._isLockRotation=t}inverseControl(t=!0){this._isInvert=t}_onDown(t){this._isLockRotation||(this._isMouseDown=!0,xn(t,this._mouse),xn(t,this._preMouse),this._preRX=this._rx.targetValue,this._preRY=this._ry.targetValue)}_onMove(t){if(!this._isLockRotation&&(xn(t,this._mouse),t.touches&&t.preventDefault(),this._isMouseDown)){let t=-(this._mouse.x-this._preMouse.x);this._isInvert&&(t*=-1),this._ry.value=this._preRY-.01*t*this.sensitivity;let e=-(this._mouse.y-this._preMouse.y);this._isInvert&&(e*=-1),this._rx.value=this._preRX-.01*e*this.sensitivity}}_onUp(){this._isLockRotation||(this._isMouseDown=!1)}_onWheel(t){if(this._isLockZoom)return;const e=t.wheelDelta,r=t.detail;let n=0;n=r?e?e/r/40*r>0?1:-1:-r/3:e/120,this.radius.add(2*-n),this.radius.targetValue<0&&(this.radius.value=1e-4)}_loop(){this._updatePosition(),this._target&&this._updateCamera()}update(){this._updatePosition()}_updatePosition(){this.position[1]=Math.sin(this._rx.value)*this.radius.value;const t=Math.cos(this._rx.value)*this.radius.value;this.position[0]=Math.cos(this._ry.value+.5*Math.PI)*t,this.position[2]=Math.sin(this._ry.value+.5*Math.PI)*t,at(this.position,this.position,this.positionOffset)}_updateCamera(){this._target.lookAt(this.position,this.center,this._up)}get rx(){return this._rx}get ry(){return this._ry}}Array.prototype.flat||Object.defineProperty(Array.prototype,"flat",{configurable:!0,value:function t(){var e=isNaN(arguments[0])?1:Number(arguments[0]);return e?Array.prototype.reduce.call(this,(function(r,n){return Array.isArray(n)?r.push.apply(r,t.call(n,e-1)):r.push(n),r}),[]):Array.prototype.slice.call(this)},writable:!0}),t.BasicColorShader=class extends Cr{constructor(t=[1,1,1],e=1){super(xr,jr),this.color=t,this.opacity=e}get color(){return this._color}set color(t){this._color=t,this.uniform("uColor",this._color)}get opacity(){return this._opacity}set opacity(t){this._opacity=t,this.uniform("uOpacity",this._opacity)}},t.BitSwitch=Dr,t.Camera=Hr,t.CameraOrtho=class extends Hr{constructor(t,e,r,n,i=.1,a=100){super(),this._left=0,this._right=0,this._top=0,this._bottom=0,this.ortho(t,e,r,n,i,a)}ortho(t,e,r,n,i=.1,a=100){this.left=t,this.right=e,this.top=r,this.bottom=n,z(this._mtxProj,t,e,n,r,i,a),this._left=t,this._right=e,this._top=r,this._bottom=n,this._near=i,this._far=a}_updateMatrices(){this.ortho(this._left,this._right,this._top,this._bottom,this._near,this._far)}},t.CameraPerspective=qr,t.DiffuseLightShader=class extends Cr{constructor(t=[1,1,1],e=[1,1,1],r=.5){super(xr,"precision highp float;varying vec3 vNormal;uniform vec3 uColor;uniform vec3 uLight;uniform float uLightIntensity;\n#pragma glslify: diffuse = require(glsl-utils/diffuse.glsl)\nvoid main(void){float g=diffuse(vNormal,uLight,uLightIntensity);gl_FragColor=vec4(uColor*g,1.0);}"),this.color=t,this.light=e,this.intensity=r}get color(){return this._color}set color(t){this._color=t,this.uniform("uColor",this._color)}get light(){return this._light}set light(t){this._light=t,this.uniform("uLight",this._light)}get intensity(){return this._intensity}set intensity(t){this._intensity=t,this.uniform("uLightIntensity",this._intensity)}},t.Draw=Yr,t.DrawAxis=class extends Yr{constructor(t){super(t);const e=this._GL,r=1e3,n=[[-r,0,0],[r,0,0],[0,-r,0],[0,r,0],[0,0,-r],[0,0,r]];this.createMesh(e.LINES).bufferVertex(n).bufferData([[1,0,0],[1,0,0],[0,1,0],[0,1,0],[0,0,1],[0,0,1]],"aColor").bufferIndex([0,1,2,3,4,5]).useProgram("precision highp float;attribute vec3 aVertexPosition;attribute vec3 aColor;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;varying vec3 vColor;void main(void){gl_Position=uProjectionMatrix*uViewMatrix*uModelMatrix*vec4(aVertexPosition,1.0);vColor=aColor;}","precision highp float;varying vec3 vColor;uniform float uOpacity;void main(void){gl_FragColor=vec4(vColor,uOpacity);}"),this.opacity=.75}draw(){this.uniform("uOpacity",this.opacity),super.draw()}},t.DrawBall=Zr,t.DrawCamera=class{constructor(t){const e=t||Nr;this._dLine=new kr(e),this._dBall=new Zr(e),this.mtx=Qr.create(),this.color=[1,1,1],this.opacity=.75,this._points=[[1,1,-1,1],[-1,1,-1,1],[1,-1,-1,1],[-1,-1,-1,1],[1,1,1,1],[-1,1,1,1],[1,-1,1,1],[-1,-1,1,1]],this._lines=[[0,1],[1,3],[3,2],[2,0],[4,5],[5,7],[7,6],[6,4],[0,4],[1,5],[2,6],[3,7]]}draw(t,e,r){const n=e||this.color,i=r||this.opacity;Qr.identity(this.mtx,this.mtx),Qr.mul(this.mtx,t.projection,t.view),Qr.invert(this.mtx,this.mtx);const a=this._points.map((t=>{const e=$r.clone(t);return $r.transformMat4(e,e,this.mtx),e[0]/=e[3],e[1]/=e[3],e[2]/=e[3],[e[0],e[1],e[2]]})),s=.02;a.forEach((t=>{this._dBall.draw(t,[s,s,s],n,i)})),this._lines.forEach((t=>{this._dLine.draw(a[t[0]],a[t[1]],n,i)}))}},t.DrawCopy=class extends Yr{constructor(t){super(t),this.setMesh(zr.bigTriangle()).useProgram(Kr.bigTriangleVert,Kr.copyFrag)}draw(t){this.bindTexture("texture",t,0),super.draw(0)}},t.DrawDotsPlane=class extends Yr{constructor(t){super(t);const e=this._GL,r=[],n=[];let i=0;const a=100;let s,o;for(s=-100;s<a;s+=1)for(o=-100;o<a;o+=1)r.push([s,o,0]),n.push(i),i++,r.push([s,0,o]),n.push(i),i++;this.createMesh(e.POINTS).bufferVertex(r).bufferIndex(n).useProgram("#define SHADER_NAME DOTS_PLANE_VERTEX\nprecision highp float;attribute vec3 aVertexPosition;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;uniform vec2 uViewport;uniform float uScale;uniform float uPointScale;const float radius=0.008;void main(void){gl_Position=uProjectionMatrix*uViewMatrix*uModelMatrix*vec4(aVertexPosition*uScale,1.0);float distOffset=uViewport.y*uProjectionMatrix[1][1]*radius/gl_Position.w;gl_PointSize=distOffset*uPointScale;}",jr),this.color=[1,1,1],this.opacity=.5,this.pointScale=1,this.scale=1}draw(){const{width:t,height:e}=this._GL;this.uniform("uColor",this.color).uniform("uOpacity",this.opacity).uniform("uScale",this.scale).uniform("uPointScale",this.pointScale).uniform("uViewport",[t,e]),super.draw()}},t.DrawLine=kr,t.EaseNumber=bn,t.FboArray=Jr,t.FboPingPong=class extends Jr{constructor(t,e,r={},n=1){super(2,t,e,r,n)}},t.FrameBuffer=Xr,t.GL=Nr,t.GLCubeTexture=class{constructor(t,e={},r=0,n=0){this._source=t,this._isHtmlElement=Fr(this._source[0]),this._getDimension(t,r,n),this._params=Ur(e,this._width,this._height),this._checkMipmap()}bind(t,e){this.createTexture(e);const{gl:r}=this.GL;r.activeTexture(r.TEXTURE0+t),r.bindTexture(r.TEXTURE_CUBE_MAP,this._texture)}unbind(){this.GL.gl.bindTexture(gl.TEXTURE_CUBE_MAP,null)}createTexture(t){void 0===t||void 0===this.GL||t===this.GL?(this.GL=t||Nr,this._texture||(Br(this.GL,this._params),this._uploadTexture())):yr(wr.CUBE_TEXTURE_CONTEXT,this.GL.id)}showProperties(){console.log("Dimension :",this._width,this._height);for(const t in this._params)console.log(t,Ar[this._params[t]]||this._params[t])}_uploadTexture(){const{gl:t}=this.GL,e=[t.TEXTURE_CUBE_MAP_POSITIVE_X,t.TEXTURE_CUBE_MAP_NEGATIVE_X,t.TEXTURE_CUBE_MAP_POSITIVE_Y,t.TEXTURE_CUBE_MAP_NEGATIVE_Y,t.TEXTURE_CUBE_MAP_POSITIVE_Z,t.TEXTURE_CUBE_MAP_NEGATIVE_Z];let r=1,n=0;r=this._source.length/6,this.numLevels=r,this._texture=t.createTexture(),t.bindTexture(t.TEXTURE_CUBE_MAP,this._texture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1);let i=this._width,a=this._height;for(let s=0;s<r;s++)e.forEach(((e,o)=>{n=o*r+s,this._isHtmlElement&&!this.GL.webgl2?this._source[n].length>0&&t.texImage2D(e,s,this._params.internalFormat,this._params.format,this._params.type,this._source[n]):this._source[n].length>0&&t.texImage2D(e,s,this._params.internalFormat,i,a,0,this._params.format,this._params.type,this._source[n])})),i>>=1,a>>=1;this._generateMipmap&&t.generateMipmap(t.TEXTURE_CUBE_MAP),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,this._params.magFilter),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,this._params.minFilter),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,this._params.wrapS),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,this._params.wrapT),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this._premultiplyAlpha),t.bindTexture(t.TEXTURE_CUBE_MAP,null)}_checkMipmap(){this._generateMipmap=this._params.mipmap,Or(this._width)&&Or(this._height)||(this._generateMipmap=!1);-1===Ar[this._params.minFilter].indexOf("MIPMAP")&&(this._generateMipmap=!1)}_getDimension(t,e,r){t?(this._width=t[0].width||t[0].videoWidth,this._height=t[0].height||t[0].videoWidth,this._width=this._width||e,this._height=this._height||r,this._width&&this._height||(this._width=this._height=Math.sqrt(t[0].length/4))):(this._width=e,this._height=r)}get texture(){return this._texture}get width(){return this._width}get height(){return this._height}},t.GLShader=Cr,t.GLTexture=Gr,t.GLTool=gr,t.Geom=zr,t.HitTestor=class extends e{constructor(t,e,r,n=!1,i=window){super(),this._mesh=t,this._mesh.generateFaces(),this._camera=e,this.faceVertices=t.faces.map((t=>t.vertices)),this.clickTolerance=8,this._ray=new Wr([0,0,0],[0,0,-1]),this._hit=nt(-999,-999,-999),this._lastPos,this._firstPos,this.modelMatrix=O(),this.resolution=r||[window.innerWidth,window.innerHeight],this._listenerTarget=i,this._skippingMove=n,this._onMoveBind=t=>this._onMove(t),this._onDownBind=t=>this._onDown(t),this._onUpBind=()=>this._onUp(),this.connect()}connect(){this._listenerTarget.addEventListener("mousedown",this._onDownBind),this._listenerTarget.addEventListener("mousemove",this._onMoveBind),this._listenerTarget.addEventListener("mouseup",this._onUpBind)}disconnect(){this._listenerTarget.removeEventListener("mousedown",this._onDownBind),this._listenerTarget.removeEventListener("mousemove",this._onMoveBind),this._listenerTarget.removeEventListener("mouseup",this._onUpBind)}_checkHit(t="onHit"){const e=this._camera;if(!e)return;const r=this._lastPos.x/this.resolution[0]*2-1,n=-this._lastPos.y/this.resolution[1]*2+1;let i;e.generateRay([r,n,0],this._ray);const a=tt(),s=tt(),o=tt();let u=0;const h=(t,e)=>{dt(e,t,this.modelMatrix)};for(let t=0;t<this.faceVertices.length;t++){const r=this.faceVertices[t];h(r[0],a),h(r[1],s),h(r[2],o);const n=this._ray.intersectTriangle(a,s,o);if(n)if(i){const t=vt(n,e.position);t<u&&(i=et(n),u=t)}else i=et(n),u=vt(i,e.position)}i?(this._hit=et(i),this.emit(t,{hit:i})):this.emit("onUp")}_onDown(t){this._firstPos=Mr(t),this._lastPos=Mr(t),this._checkHit("onDown")}_onMove(t){this._lastPos=Mr(t),this._skippingMove||this._checkHit()}_onUp(){(function(t,e){const r=t.x-e.x,n=t.y-e.y;return Math.sqrt(r*r+n*n)})(this._firstPos,this._lastPos)<this.clickTolerance&&this._checkHit()}},t.Mesh=Pr,t.Object3D=function(){let t=tt(),e=tt(),r=nt(1,1,1),n=O(),i=O(),a=O(),s=O(),o=O(),u=O(),h=re(),_=[],c=!0;this.update=function(t){void 0!==t&&U(i,t),c=!0,l()},this.addChild=function(t){_.push(t)},this.removeChild=function(t){const e=_.indexOf(t);-1!=e?_.splice(e,1):console.warn("Child no exist")},this.setRotationFromQuaternion=function(t){Re(h,t),c=!0};const l=()=>{c&&(F(a),F(o),F(s),G(s,s,e[0]),V(s,s,e[1]),X(s,s,e[2]),j(u,h),Q(s,u,s),y(o,o,r),w(a,a,t),Q(n,a,s),Q(n,n,o),Q(n,i,n),_.forEach((t=>{t.update(n)})),c=!1)};this.__defineGetter__("matrix",(function(){return l(),n})),this.__defineSetter__("x",(function(e){t[0]=e,c=!0})),this.__defineGetter__("x",(function(){return t[0]})),this.__defineSetter__("y",(function(e){t[1]=e,c=!0})),this.__defineGetter__("y",(function(){return t[1]})),this.__defineSetter__("z",(function(e){t[2]=e,c=!0})),this.__defineGetter__("z",(function(){return t[2]})),this.__defineSetter__("scaleX",(function(t){r[0]=t,c=!0})),this.__defineGetter__("scaleX",(function(){return r[0]})),this.__defineSetter__("scaleY",(function(t){r[1]=t,c=!0})),this.__defineGetter__("scaleY",(function(){return r[1]})),this.__defineSetter__("scaleZ",(function(t){r[2]=t,c=!0})),this.__defineGetter__("scaleZ",(function(){return r[2]})),this.__defineSetter__("rotationX",(function(t){e[0]=t,c=!0})),this.__defineGetter__("rotationX",(function(){return e[0]})),this.__defineSetter__("rotationY",(function(t){e[1]=t,c=!0})),this.__defineGetter__("rotationY",(function(){return e[1]})),this.__defineSetter__("rotationZ",(function(t){e[2]=t,c=!0})),this.__defineGetter__("rotationZ",(function(){return e[2]})),this.__defineGetter__("children",(function(){return _}))},t.OrbitalControl=Cn,t.PBRShader=class extends Cr{constructor(){super("#version 300 es\n#define SHADER_NAME pbr_vert\nprecision highp float;in vec3 aVertexPosition;in vec2 aTextureCoord;in vec3 aNormal;uniform mat4 uModelMatrix;uniform mat4 uViewMatrix;uniform mat4 uProjectionMatrix;uniform mat3 uNormalMatrix;uniform mat3 uModelViewMatrixInverse;out vec2 vTextureCoord;out vec3 vNormal;out vec3 vPosition;void main(void){vec4 position=uModelMatrix*vec4(aVertexPosition,1.0);vPosition=position.xyz/position.w;vNormal=normalize(vec3(uModelMatrix*vec4(aNormal,0.0)));vTextureCoord=aTextureCoord;gl_Position=uProjectionMatrix*uViewMatrix*position;}","#version 300 es\n#define SHADER_NAME pbr_frag\nprecision highp float;uniform sampler2D uBRDFMap;uniform samplerCube uRadianceMap;uniform samplerCube uIrradianceMap;uniform vec3 uBaseColor;uniform sampler2D uColorMap;uniform sampler2D uORMMap;uniform float uOcclusionStrength;uniform float uRoughness;uniform float uMetallic;uniform float uExposure;uniform sampler2D uNormalMap;uniform float uNormalScale;uniform sampler2D uEmissiveMap;uniform vec3 uEmissiveFactor;uniform vec3 uLightDirection;uniform vec3 uLightColor;uniform vec3 uCameraPos;uniform vec4 uScaleDiffBaseMR;uniform vec4 uScaleFGDSpec;uniform vec4 uScaleIBLAmbient;in vec2 vTextureCoord;in vec3 vNormal;in vec3 vPosition;out vec4 oColor;struct PBRInfo{float NdotL;float NdotV;float NdotH;float LdotH;float VdotH;float perceptualRoughness;float metalness;vec3 reflectance0;vec3 reflectance90;float alphaRoughness;vec3 diffuseColor;vec3 specularColor;};const float M_PI=3.141592653589793;const float c_MinRoughness=0.04;vec4 SRGBtoLINEAR(vec4 srgbIn){\n#ifdef MANUAL_SRGB\n#ifdef SRGB_FAST_APPROXIMATION\nvec3 linOut=pow(srgbIn.xyz,vec3(2.2));\n#else\nvec3 bLess=step(vec3(0.04045),srgbIn.xyz);vec3 linOut=mix(srgbIn.xyz/vec3(12.92),pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)),bLess);\n#endif\nreturn vec4(linOut,srgbIn.w);;\n#else\nreturn srgbIn;\n#endif\n}vec3 getNormal(){vec3 pos_dx=dFdx(vPosition);vec3 pos_dy=dFdy(vPosition);vec3 tex_dx=dFdx(vec3(vTextureCoord,0.0));vec3 tex_dy=dFdy(vec3(vTextureCoord,0.0));vec3 t=(tex_dy.t*pos_dx-tex_dx.t*pos_dy)/(tex_dx.s*tex_dy.t-tex_dy.s*tex_dx.t);vec3 ng=normalize(vNormal);t=normalize(t-ng*dot(ng,t));vec3 b=normalize(cross(ng,t));mat3 tbn=mat3(t,b,ng);vec3 n=texture(uNormalMap,vTextureCoord).rgb;n=normalize(tbn*((2.0*n-1.0)*vec3(uNormalScale,uNormalScale,1.0)));return n;}vec3 getIBLContribution(PBRInfo pbrInputs,vec3 n,vec3 reflection){float mipCount=7.0;float lod=(pbrInputs.perceptualRoughness*mipCount);vec3 brdf=SRGBtoLINEAR(texture(uBRDFMap,vec2(pbrInputs.NdotV,1.0-pbrInputs.perceptualRoughness))).rgb;vec3 diffuseLight=SRGBtoLINEAR(texture(uIrradianceMap,n)).rgb;\n#ifdef USE_TEX_LOD\nvec3 specularLight=SRGBtoLINEAR(textureCubeLodEXT(uRadianceMap,reflection,lod)).rgb;\n#else\nvec3 specularLight=SRGBtoLINEAR(texture(uRadianceMap,reflection)).rgb;\n#endif\nvec3 diffuse=diffuseLight*pbrInputs.diffuseColor;vec3 specular=specularLight*(pbrInputs.specularColor*brdf.x+brdf.y);diffuse*=uScaleIBLAmbient.x;specular*=uScaleIBLAmbient.y;return diffuse+specular;}vec3 diffuse(PBRInfo pbrInputs){return pbrInputs.diffuseColor/M_PI;}vec3 specularReflection(PBRInfo pbrInputs){return pbrInputs.reflectance0+(pbrInputs.reflectance90-pbrInputs.reflectance0)*pow(clamp(1.0-pbrInputs.VdotH,0.0,1.0),5.0);}float geometricOcclusion(PBRInfo pbrInputs){float NdotL=pbrInputs.NdotL;float NdotV=pbrInputs.NdotV;float r=pbrInputs.alphaRoughness;float attenuationL=2.0*NdotL/(NdotL+sqrt(r*r+(1.0-r*r)*(NdotL*NdotL)));float attenuationV=2.0*NdotV/(NdotV+sqrt(r*r+(1.0-r*r)*(NdotV*NdotV)));return attenuationL*attenuationV;}float microfacetDistribution(PBRInfo pbrInputs){float roughnessSq=pbrInputs.alphaRoughness*pbrInputs.alphaRoughness;float f=(pbrInputs.NdotH*roughnessSq-pbrInputs.NdotH)*pbrInputs.NdotH+1.0;return roughnessSq/(M_PI*f*f);}void main(void){vec4 orm=texture(uORMMap,vTextureCoord);float perceptualRoughness=uRoughness*orm.g;float metallic=uMetallic*orm.b;perceptualRoughness=clamp(perceptualRoughness,c_MinRoughness,1.0);metallic=clamp(metallic,0.0,1.0);float alphaRoughness=perceptualRoughness*perceptualRoughness;vec4 baseColor=SRGBtoLINEAR(texture(uColorMap,vTextureCoord));baseColor.rgb*=uBaseColor;vec3 f0=vec3(0.04);vec3 diffuseColor=baseColor.rgb*(vec3(1.0)-f0);diffuseColor*=1.0-metallic;vec3 specularColor=mix(f0,baseColor.rgb,metallic);float reflectance=max(max(specularColor.r,specularColor.g),specularColor.b);float reflectance90=clamp(reflectance*25.0,0.0,1.0);vec3 specularEnvironmentR0=specularColor.rgb;vec3 specularEnvironmentR90=vec3(1.0,1.0,1.0)*reflectance90;vec3 n=getNormal();vec3 v=normalize(uCameraPos-vPosition);vec3 l=normalize(uLightDirection);vec3 h=normalize(l+v);vec3 reflection=-normalize(reflect(v,n));float NdotL=clamp(dot(n,l),0.001,1.0);float NdotV=abs(dot(n,v))+0.001;float NdotH=clamp(dot(n,h),0.0,1.0);float LdotH=clamp(dot(l,h),0.0,1.0);float VdotH=clamp(dot(v,h),0.0,1.0);PBRInfo pbrInputs=PBRInfo(NdotL,NdotV,NdotH,LdotH,VdotH,perceptualRoughness,metallic,specularEnvironmentR0,specularEnvironmentR90,alphaRoughness,diffuseColor,specularColor);vec3 F=specularReflection(pbrInputs);float G=geometricOcclusion(pbrInputs);float D=microfacetDistribution(pbrInputs);vec3 diffuseContrib=(1.0-F)*diffuse(pbrInputs);vec3 specContrib=F*G*D/(4.0*NdotL*NdotV);vec3 color=NdotL*uLightColor*(diffuseContrib+specContrib);color+=getIBLContribution(pbrInputs,n,reflection);color=mix(color,color*orm.r,uOcclusionStrength);vec3 emissive=SRGBtoLINEAR(texture(uEmissiveMap,vTextureCoord)).rgb*uEmissiveFactor;color+=emissive;color=mix(color,F,uScaleFGDSpec.x);color=mix(color,vec3(G),uScaleFGDSpec.y);color=mix(color,vec3(D),uScaleFGDSpec.z);color=mix(color,specContrib,uScaleFGDSpec.w);color=mix(color,diffuseContrib,uScaleDiffBaseMR.x);color=mix(color,baseColor.rgb,uScaleDiffBaseMR.y);color=mix(color,vec3(metallic),uScaleDiffBaseMR.z);color=mix(color,vec3(perceptualRoughness),uScaleDiffBaseMR.w);oColor=vec4(pow(color,vec3(1.0/uExposure)),baseColor.a);}"),this.textureWhite=Vr([1,1,1]),this._textureLut=this.textureWhite,this._roughness=1,this._metallic=1,this._textureColor=this.textureWhite,this._baseColor=[1,1,1],this._textureNormal=this.textureWhite,this._normalScale=0,this._textureORM=this.textureWhite,this._aoStrength=1,this._textureEmissive=this.textureWhite,this._emissiveColor=[0,0,0],this._exposure=2.2,this._cameraPos=[0,0,1],this.uniform("uBRDFMap","int",0),this.uniform("uRadianceMap","int",1),this.uniform("uIrradianceMap","int",2),this.uniform("uColorMap","int",3),this.uniform("uNormalMap","int",4),this.uniform("uORMMap","int",5),this.uniform("uEmissiveMap","int",6),this.uniform("uRoughness",this._roughness),this.uniform("uMetallic",this._metallic),this.uniform("uBaseColor",this._baseColor),this.uniform("uNormalScale",this._normalScale),this.uniform("uOcclusionStrength",this._aoStrength),this.uniform("uEmissiveFactor",this._emissiveColor),this.uniform("uCameraPos",this._cameraPos),this.uniform("uScaleDiffBaseMR",[0,0,0,0]),this.uniform("uScaleFGDSpec",[0,0,0,0]),this.uniform("uScaleIBLAmbient",[1,1,1,1]),this.uniform("uExposure",this._exposure),this.diffuseOffset=0}bindAllTextures(t){const e=t||Nr;this._textureLut.bind(0,e),this._textureRad?this._textureRad.bind(1,e):console.log("No Radiance Texture found"),this._textureIrr?this._textureIrr.bind(2,e):console.log("No Irradiance Texture found"),this._textureColor.bind(3),this._textureNormal.bind(4),this._textureORM.bind(5),this._textureEmissive.bind(6)}set lutMap(t){this._textureLut=t}set radianceMap(t){this._textureRad=t}set irradianceMap(t){this._textureIrr=t}set roughness(t){this._roughness=t,this.uniform("uRoughness",this._roughness);const e=Math.pow((1-this._roughness)*(1-this._metallic),2)*this.diffuseOffset;this.uniform("uScaleDiffBaseMR",[e,0,0,0])}get roughness(){return this._roughness}set metallic(t){this._metallic=t,this.uniform("uMetallic",this._metallic)}get metallic(){return this._metallic}set baseColor(t){this._baseColor=t,this.uniform("uBaseColor",this._baseColor)}get baseColor(){return this._baseColor}set normalScale(t){this._normalScale=t,this.uniform("uNormalScale",this._normalScale)}get normalScale(){return this._normalScale}set aoStrength(t){this._aoStrength=t,this.uniform("uOcclusionStrength",this._aoStrength)}get aoStrength(){return this._aoStrength}set emissiveColor(t){this._emissiveColor=t,this.uniform("uEmissiveFactor",this._emissiveColor)}get emissiveColor(){return this._emissiveColor}set cameraPosition(t){this._cameraPos=t,this.uniform("uCameraPos",this._cameraPos)}get cameraPosition(){return this._cameraPos}set exposure(t){this._exposure=t,this.uniform("uExposure",this._exposure)}get exposure(){return this._exposure}},t.Ray=Wr,t.Scene=class{constructor(t){this._GL=t||Nr,this.camera=new qr,this.camera.setPerspective(45*Math.PI/180,Nr.aspectRatio,.1,100),this.orbitalControl=new Cn(this.camera,window,15),this.orbitalControl.radius.value=10,this._isRunning=!0,this._initTextures(),this._initViews(),window.addEventListener("resize",(()=>this.resize())),this._efIndex=Nn((()=>this._loop()))}stop(){this._isRunning=!1}resume(){this._isRunning=!0}_initTextures(){}_initViews(){}update(){}render(){}_loop(){this._isRunning&&(this.update(),this._GL.viewport(0,0,this._GL.width,this._GL.height),this._GL.setMatrices(this.camera),this.render())}resize(){this._GL.setSize(window.innerWidth,window.innerHeight),this.camera.setAspectRatio(this._GL.aspectRatio)}},t.ShaderLibs=Kr,t.SpringNumber=class{constructor(t,e=.1,r=.9){this._value=t,this._targetValue=t,this.speed=e,this.decreaseRate=r,this._velocity=0,this._efIndex=Nn((()=>this._update()))}_update(){const t=1e-4;this._checkLimit(),Math.abs(this._targetValue-this._value)<t?this._value=this._targetValue:(this._velocity+=(this._targetValue-this._value)*this.speed,this._value+=this._velocity,this._velocity*=this.decreaseRate,Math.abs(this._targetValue-this._value)<t&&(this._value=this._targetValue))}limit(t,e){t>e?this.limit(e,t):(this._min=t,this._max=e,this._checkLimit())}_checkLimit(){void 0!==this._min&&this._targetValue<this._min&&(this._targetValue=this._min),void 0!==this._max&&this._targetValue>this._max&&(this._targetValue=this._max)}destroy(){Sn(this._efIndex)}set value(t){this._targetValue=t}get value(){return this._value}},t.TweenNumber=class{constructor(t,e="expOut",r=.01){this._value=t,this._startValue=t,this._targetValue=t,this._counter=1,this.speed=r,this.easing=e,this._needUpdate=!0,this._efIndex=Nn((()=>this._update()))}_update(){let t=this._counter+this.speed;t>1&&(t=1),this._counter!==t?(this._counter=t,this._needUpdate=!0):this._needUpdate=!1}limit(t,e){t>e?this.limit(e,t):(this._min=t,this._max=e,this._checkLimit())}setTo(t){this._value=t,this._targetValue=t,this._counter=1}_checkLimit(){void 0!==this._min&&this._targetValue<this._min&&(this._targetValue=this._min),void 0!==this._max&&this._targetValue>this._max&&(this._targetValue=this._max)}destroy(){Sn(this._efIndex)}set value(t){this._startValue=this._value,this._targetValue=t,this._checkLimit(),this._counter=0}get value(){if(this._needUpdate){const t=function(t){switch(t){default:case"linear":return Ln.Linear.None;case"expIn":return Ln.Exponential.In;case"expOut":return Ln.Exponential.Out;case"expInOut":return Ln.Exponential.InOut;case"cubicIn":return Ln.Cubic.In;case"cubicOut":return Ln.Cubic.Out;case"cubicInOut":return Ln.Cubic.InOut;case"quarticIn":return Ln.Quartic.In;case"quarticOut":return Ln.Quartic.Out;case"quarticInOut":return Ln.Quartic.InOut;case"quinticIn":return Ln.Quintic.In;case"quinticOut":return Ln.Quintic.Out;case"quinticInOut":return Ln.Quintic.InOut;case"sinusoidalIn":return Ln.Sinusoidal.In;case"sinusoidalOut":return Ln.Sinusoidal.Out;case"sinusoidalInOut":return Ln.Sinusoidal.InOut;case"circularIn":return Ln.Circular.In;case"circularOut":return Ln.Circular.Out;case"circularInOut":return Ln.Circular.InOut;case"elasticIn":return Ln.Elastic.In;case"elasticOut":return Ln.Elastic.Out;case"elasticInOut":return Ln.Elastic.InOut;case"backIn":return Ln.Back.In;case"backOut":return Ln.Back.Out;case"backInOut":return Ln.Back.InOut;case"bounceIn":return Ln.Bounce.in;case"bounceOut":return Ln.Bounce.out;case"bounceInOut":return Ln.Bounce.inOut}}(this.easing)(this._counter);this._value=this._startValue+t*(this._targetValue-this._startValue),this._needUpdate=!1}return this._value}get targetValue(){return this._targetValue}},t.WebGLConst=Rr,t.WebGLNumber=Ar,t.checkWebGL2=fr,t.getColorTexture=Vr,t.loadBinary=tn,t.loadDds=t=>new Promise(((e,r)=>{tn(t,!0).then((t=>{e(hn(t))}),(t=>{r(t)}))})),t.loadHdr=t=>new Promise(((e,r)=>{tn(t,!0).then((t=>{e(en(t))}),(t=>{r(t)}))})),t.loadObj=t=>new Promise(((e,r)=>{tn(t,!1).then((t=>{e(_n(t))}),(t=>{r(t)}))})),t.parseDds=hn,t.parseHdr=en,t.parseObj=_n,Object.defineProperty(t,"__esModule",{value:!0})}));


/***/ }),

/***/ "./node_modules/assets-loader/src/browser-has-blob.js":
/*!************************************************************!*\
  !*** ./node_modules/assets-loader/src/browser-has-blob.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = (function() {
    try {
        return !!new Blob();
    } catch (e) {
        return false;
    }
}());


/***/ }),

/***/ "./node_modules/assets-loader/src/emitter.js":
/*!***************************************************!*\
  !*** ./node_modules/assets-loader/src/emitter.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

function Emitter() {
    EventEmitter.call(this);
    this.setMaxListeners(20);
}

Emitter.prototype = Object.create(EventEmitter.prototype);
Emitter.prototype.constructor = Emitter;

Emitter.prototype.off = function(type, listener) {
    if (listener) {
        return this.removeListener(type, listener);
    }
    if (type) {
        return this.removeAllListeners(type);
    }
    return this.removeAllListeners();
};

module.exports = Emitter;


/***/ }),

/***/ "./node_modules/assets-loader/src/group.js":
/*!*************************************************!*\
  !*** ./node_modules/assets-loader/src/group.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Emitter = __webpack_require__(/*! ./emitter.js */ "./node_modules/assets-loader/src/emitter.js");
var createLoader = __webpack_require__(/*! ./loader */ "./node_modules/assets-loader/src/loader.js");
var autoId = 0;

module.exports = function createGroup(config) {
    var group;
    var map = {};
    var assets = [];
    var queue = [];
    var numLoaded = 0;
    var numTotal = 0;
    var loaders = {};

    var add = function(options) {
        // console.debug('add', options);
        if (Array.isArray(options)) {
            options.forEach(add);
            return group;
        }
        var isGroup = !!options.assets && Array.isArray(options.assets);
        // console.debug('isGroup', isGroup);
        var loader;
        if (isGroup) {
            loader = createGroup(configure(options, config));
        } else {
            loader = createLoader(configure(options, config));
        }
        loader.once('destroy', destroyHandler);
        queue.push(loader);
        loaders[loader.id] = loader;
        return group;
    };

    var get = function(id) {
        if (!arguments.length) {
            return assets;
        }
        if (map[id]) {
            return map[id];
        }
        return loaders[id];
    };

    var find = function(id) {
        if (get(id)) {
            return get(id);
        }
        var found = null;
        Object.keys(loaders).some(function(key) {
            found = loaders[key].find && loaders[key].find(id);
            return !!found;
        });
        return found;
    };

    var getExtension = function(url) {
        return url && url.split('?')[0].split('.').pop().toLowerCase();
    };

    var configure = function(options, defaults) {
        if (typeof options === 'string') {
            var url = options;
            options = {
                url: url
            };
        }

        if (options.isTouchLocked === undefined) {
            options.isTouchLocked = defaults.isTouchLocked;
        }

        if (options.blob === undefined) {
            options.blob = defaults.blob;
        }

        if (options.basePath === undefined) {
            options.basePath = defaults.basePath;
        }

        options.id = options.id || options.url || String(++autoId);
        options.type = options.type || getExtension(options.url);
        options.crossOrigin = options.crossOrigin || defaults.crossOrigin;
        options.webAudioContext = options.webAudioContext || defaults.webAudioContext;
        options.log = defaults.log;

        return options;
    };

    var start = function() {
        numTotal = queue.length;

        queue.forEach(function(loader) {
            loader
                .on('progress', progressHandler)
                .once('complete', completeHandler)
                .once('error', errorHandler)
                .start();
        });

        queue = [];

        return group;
    };

    var progressHandler = function(progress) {
        var loaded = numLoaded + progress;
        group.emit('progress', loaded / numTotal);
    };

    var completeHandler = function(asset, id, type) {
        if (Array.isArray(asset)) {
            asset = { id: id, file: asset, type: type };
        }
        numLoaded++;
        group.emit('progress', numLoaded / numTotal);
        map[asset.id] = asset.file;
        assets.push(asset);
        group.emit('childcomplete', asset);
        checkComplete();
    };

    var errorHandler = function(err) {
        numTotal--;
        if (group.listeners('error').length) {
            group.emit('error', err);
        } else {
            console.error(err);
        }
        checkComplete();
    };

    var destroyHandler = function(id) {
        loaders[id] = null;
        delete loaders[id];

        map[id] = null;
        delete map[id];

        assets.some(function(asset, i) {
            if (asset.id === id) {
                assets.splice(i, 1);
                return true;
            }
        });
    };

    var checkComplete = function() {
        if (numLoaded >= numTotal) {
            group.emit('complete', assets, map, config.id, 'group');
        }
    };

    var destroy = function() {
        while (queue.length) {
            queue.pop().destroy();
        }
        group.off('error');
        group.off('progress');
        group.off('complete');
        assets = [];
        map = {};
        config.webAudioContext = null;
        numTotal = 0;
        numLoaded = 0;

        Object.keys(loaders).forEach(function(key) {
            loaders[key].destroy();
        });
        loaders = {};

        group.emit('destroy', group.id);

        return group;
    };

    // emits: progress, error, complete, destroy

    group = Object.create(Emitter.prototype, {
        _events: {
            value: {}
        },
        id: {
            get: function() {
                return config.id;
            }
        },
        add: {
            value: add
        },
        start: {
            value: start
        },
        get: {
            value: get
        },
        find: {
            value: find
        },
        getLoader: {
            value: function(id) {
                return loaders[id];
            }
        },
        loaded: {
            get: function() {
                return numLoaded >= numTotal;
            }
        },
        file: {
            get: function() {
                return assets;
            }
        },
        destroy: {
            value: destroy
        }
    });

    config = configure(config || {}, {
        basePath: '',
        blob: false,
        touchLocked: false,
        crossOrigin: null,
        webAudioContext: null,
        log: false
    });

    if (Array.isArray(config.assets)) {
        add(config.assets);
    }

    return group;
};


/***/ }),

/***/ "./node_modules/assets-loader/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/assets-loader/src/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assetsLoader = __webpack_require__(/*! ./group */ "./node_modules/assets-loader/src/group.js");
assetsLoader.stats = __webpack_require__(/*! ./stats */ "./node_modules/assets-loader/src/stats.js");

module.exports = assetsLoader;


/***/ }),

/***/ "./node_modules/assets-loader/src/loader.js":
/*!**************************************************!*\
  !*** ./node_modules/assets-loader/src/loader.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Emitter = __webpack_require__(/*! ./emitter.js */ "./node_modules/assets-loader/src/emitter.js");
var browserHasBlob = __webpack_require__(/*! ./browser-has-blob.js */ "./node_modules/assets-loader/src/browser-has-blob.js");
var stats = __webpack_require__(/*! ./stats */ "./node_modules/assets-loader/src/stats.js");

module.exports = function(options) {
    var id = options.id;
    var basePath = options.basePath || '';
    var url = options.url;
    var type = options.type;
    var crossOrigin = options.crossOrigin;
    var isTouchLocked = options.isTouchLocked;
    var blob = options.blob && browserHasBlob;
    var webAudioContext = options.webAudioContext;
    var log = options.log;

    var loader;
    var loadHandler;
    var request;
    var startTime;
    var timeout;
    var file;

    var start = function() {
        startTime = Date.now();

        switch (type) {
            case 'json':
                loadJSON();
                break;
            case 'jpg':
            case 'png':
            case 'gif':
            case 'webp':
            case 'svg':
                loadImage();
                break;
            case 'mp3':
            case 'ogg':
            case 'opus':
            case 'wav':
            case 'm4a':
                loadAudio();
                break;
            case 'ogv':
            case 'mp4':
            case 'webm':
            case 'hls':
                loadVideo();
                break;
            case 'bin':
            case 'binary':
                loadXHR('arraybuffer');
                break;
            case 'txt':
            case 'text':
                loadXHR('text');
                break;
            default:
                throw 'AssetsLoader ERROR: Unknown type for file with URL: ' + basePath + url + ' (' + type + ')';
        }
    };

    var dispatchComplete = function(data) {
        if (!data) {
            return;
        }
        file = {id: id, file: data, type: type};
        loader.emit('progress', 1);
        loader.emit('complete', file, id, type);
        removeListeners();
    };

    var loadXHR = function(responseType, customLoadHandler) {
        loadHandler = customLoadHandler || completeHandler;

        request = new XMLHttpRequest();
        request.open('GET', basePath + url, true);
        request.responseType = responseType;
        request.addEventListener('progress', progressHandler);
        request.addEventListener('load', loadHandler);
        request.addEventListener('error', errorHandler);
        request.send();
    };

    var progressHandler = function(event) {
        if (event.lengthComputable) {
            loader.emit('progress', event.loaded / event.total);
        }
    };

    var completeHandler = function() {
        if (success()) {
            dispatchComplete(request.response);
        }
    };

    var success = function() {
        // console.log('success', url, request.status);
        if (request && request.status < 400) {
            stats.update(request, startTime, url, log);
            return true;
        }
        errorHandler(request && request.statusText);
        return false;
    };

    // json

    var loadJSON = function() {
        loadXHR('json', function() {
            if (success()) {
                var data = request.response;
                if (typeof data === 'string') {
                    data = JSON.parse(data);
                }
                dispatchComplete(data);
            }
        });
    };

    // image

    var loadImage = function() {
        if (blob) {
            loadImageBlob();
        } else {
            loadImageElement();
        }
    };

    var loadImageElement = function() {
        request = new Image();
        if (crossOrigin) {
            request.crossOrigin = 'anonymous';
        }
        request.addEventListener('error', errorHandler, false);
        request.addEventListener('load', elementLoadHandler, false);
        request.src = basePath + url;
    };

    var elementLoadHandler = function(event) {
        window.clearTimeout(timeout);
        if (!event && (request.error || !request.readyState)) {
            errorHandler();
            return;
        }
        dispatchComplete(request);
    };

    var loadImageBlob = function() {
        loadXHR('blob', function() {
            if (success()) {
                request = new Image();
                request.addEventListener('error', errorHandler, false);
                request.addEventListener('load', imageBlobHandler, false);
                request.src = window.URL.createObjectURL(request.response);
            }
        });
    };

    var imageBlobHandler = function() {
        window.URL.revokeObjectURL(request.src);
        dispatchComplete(request);
    };

    // audio

    var loadAudio = function() {
        if (webAudioContext) {
            loadAudioBuffer();
        } else {
            loadMediaElement('audio');
        }
    };

    // video

    var loadVideo = function() {
        if (blob) {
            loadXHR('blob');
        } else {
            loadMediaElement('video');
        }
    };

    // audio buffer

    var loadAudioBuffer = function() {
        loadXHR('arraybuffer', function() {
            if (success()) {
                webAudioContext.decodeAudioData(
                    request.response,
                    function(buffer) {
                        request = null;
                        dispatchComplete(buffer);
                    },
                    function(e) {
                        errorHandler(e);
                    }
                );
            }
        });
    };

    // media element

    var loadMediaElement = function(tagName) {
        request = document.createElement(tagName);

        if (!isTouchLocked) {
            // timeout because sometimes canplaythrough doesn't fire
            window.clearTimeout(timeout);
            timeout = window.setTimeout(elementLoadHandler, 2000);
            request.addEventListener('canplaythrough', elementLoadHandler, false);
        }

        request.addEventListener('error', errorHandler, false);
        request.preload = 'auto';
        request.src = basePath + url;
        request.load();

        if (isTouchLocked) {
            dispatchComplete(request);
        }
    };

    // error

    var errorHandler = function(err) {
        // console.log('errorHandler', url, err);
        window.clearTimeout(timeout);

        var message = err;

        if (request && request.tagName && request.error) {
            var ERROR_STATE = ['', 'ABORTED', 'NETWORK', 'DECODE', 'SRC_NOT_SUPPORTED'];
            message = 'MediaError: ' + ERROR_STATE[request.error.code] + ' ' + request.src;
        } else if (request && request.statusText) {
            message = request.statusText;
        } else if (err && err.message) {
            message = err.message;
        } else if (err && err.type) {
            message = err.type;
        }

        loader.emit('error', 'Error loading "' + basePath + url + '" ' + message);

        destroy();
    };

    // clean up

    var removeListeners = function() {
        loader.off('error');
        loader.off('progress');
        loader.off('complete');

        if (request) {
            request.removeEventListener('progress', progressHandler);
            request.removeEventListener('load', loadHandler);
            request.removeEventListener('error', errorHandler);
            request.removeEventListener('load', elementLoadHandler);
            request.removeEventListener('canplaythrough', elementLoadHandler);
            request.removeEventListener('load', imageBlobHandler);
        }
    };

    var destroy = function() {
        removeListeners();

        if (request && request.abort && request.readyState < 4) {
            request.abort();
        }

        request = null;
        webAudioContext = null;
        file = null;

        window.clearTimeout(timeout);

        loader.emit('destroy', id);
    };

    // emits: progress, error, complete

    loader = Object.create(Emitter.prototype, {
        _events: {
            value: {}
        },
        id: {
            value: options.id
        },
        start: {
            value: start
        },
        loaded: {
            get: function() {
                return !!file;
            }
        },
        file: {
            get: function() {
                return file;
            }
        },
        destroy: {
            value: destroy
        }
    });

    return loader;
};


/***/ }),

/***/ "./node_modules/assets-loader/src/stats.js":
/*!*************************************************!*\
  !*** ./node_modules/assets-loader/src/stats.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
    mbs: 0,
    secs: 0,
    update: function(request, startTime, url, log) {
        var length;
        var headers = request.getAllResponseHeaders();
        if (headers) {
            var match = headers.match(/content-length: (\d+)/i);
            if (match && match.length) {
                length = match[1];
            }
        }
        // var length = request.getResponseHeader('Content-Length');
        if (length) {
            length = parseInt(length, 10);
            var mbs = length / 1024 / 1024;
            var secs = (Date.now() - startTime) / 1000;
            this.secs += secs;
            this.mbs += mbs;
            if (log) {
                this.log(url, mbs, secs);
            }
        } else if(log) {
            console.warn.call(console, 'Can\'t get Content-Length:', url);
        }
    },
    log: function(url, mbs, secs) {
        if (url) {
            var file = 'File loaded: ' +
                url.substr(url.lastIndexOf('/') + 1) +
                ' size:' + mbs.toFixed(2) + 'mb' +
                ' time:' + secs.toFixed(2) + 's' +
                ' speed:' + (mbs / secs).toFixed(2) + 'mbps';

            console.log.call(console, file);
        }
        var total = 'Total loaded: ' + this.mbs.toFixed(2) + 'mb' +
            ' time:' + this.secs.toFixed(2) + 's' +
            ' speed:' + this.getMbps().toFixed(2) + 'mbps';
        console.log.call(console, total);
    },
    getMbps: function() {
        return this.mbs / this.secs;
    }
};


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?url=false!./node_modules/sass-loader/dist/cjs.js!./src/scss/global.scss":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js?url=false!./node_modules/sass-loader/dist/cjs.js!./src/scss/global.scss ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "html,\nbody {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  position: fixed;\n  background: black; }\n\nhtml {\n  -webkit-text-size-adjust: none;\n  -moz-text-size-adjust: none;\n  text-size-adjust: none; }\n\nh1,\nh2,\nh3,\nh4,\ntext,\np,\nbutton {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-webkit-font-smoothing: antialiased;\n  font-family: \"Open Sans\", sans-serif;\n  user-select: none; }\n\nvideo {\n  top: 0;\n  left: 0;\n  position: absolute; }\n\n.Main-Canvas {\n  top: 0;\n  left: 0;\n  user-select: none;\n  opacity: 1;\n  transition: opacity 0.5s ease-out 0.25s; }\n  .isLoading .Main-Canvas {\n    opacity: 0; }\n\n.container {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 98; }\n\n.Message {\n  position: absolute;\n  z-index: 999;\n  width: 100%;\n  top: calc(50% - 50px);\n  text-align: center;\n  letter-spacing: 11px;\n  color: white;\n  opacity: 0;\n  transition: opacity 0.5s ease-out, letter-spacing 0.5s ease-out; }\n  .isLoading .Message {\n    letter-spacing: 10px;\n    opacity: 1; }\n\n.Loading-Bar {\n  position: absolute;\n  z-index: 998;\n  width: 0%;\n  height: 1px;\n  top: 50%;\n  background: rgba(255, 255, 255, 0.5);\n  opacity: 0;\n  transition: width 0.5s ease-out, opacity 0.5s ease-out; }\n  .isLoading .Loading-Bar {\n    opacity: 1; }\n\n.env {\n  position: fixed;\n  width: 100%;\n  z-index: 9999;\n  color: white;\n  top: 100px;\n  font-size: 24px;\n  padding: 20px; }\n\n.container-button {\n  position: fixed;\n  z-index: 99;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center; }\n\n.btnAR {\n  width: 200px;\n  height: 50px;\n  position: fixed;\n  bottom: 20vh;\n  font-size: 15px;\n  letter-spacing: 2px;\n  border-radius: 5px;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0s ease-in-out; }\n  .has-xr .btnAR {\n    transition: opacity 0.5s ease-in-out;\n    pointer-events: auto;\n    opacity: 1; }\n  .xr-started .btnAR {\n    opacity: 0; }\n\n.text-no-webgl2 {\n  color: white;\n  font-size: 14px;\n  letter-spacing: 6px;\n  text-align: center;\n  z-index: 99;\n  position: absolute;\n  top: 45%;\n  transition: opacity 0.5s ease-in-out;\n  pointer-events: none;\n  opacity: 0; }\n  .no-webgl2 .text-no-webgl2 {\n    opacity: 1; }\n  .hide-messages .text-no-webgl2 {\n    opacity: 0; }\n\n.text-no-support {\n  color: white;\n  font-size: 14px;\n  letter-spacing: 6px;\n  text-align: center;\n  z-index: 99;\n  position: absolute;\n  bottom: 5vh;\n  transition: opacity 0.5s ease-in-out;\n  pointer-events: none;\n  opacity: 0; }\n  .no-xr .text-no-support {\n    opacity: 1; }\n  .hide-messages .text-no-support {\n    opacity: 0; }\n\n@media (max-width: 615px) {\n  .text-no-support {\n    letter-spacing: 2px; } }\n\n.top-layer {\n  z-index: 200; }\n\n.webcam {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n  width: 40%;\n  height: 40%; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/fast-url-parser/src/urlparser.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-url-parser/src/urlparser.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
Copyright (c) 2014 Petka Antonov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
function Url() {
    //For more efficient internal representation and laziness.
    //The non-underscore versions of these properties are accessor functions
    //defined on the prototype.
    this._protocol = null;
    this._href = "";
    this._port = -1;
    this._query = null;

    this.auth = null;
    this.slashes = null;
    this.host = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.pathname = null;

    this._prependSlash = false;
}

var querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

Url.queryString = querystring;

Url.prototype.parse =
function Url$parse(str, parseQueryString, hostDenotesSlash, disableAutoEscapeChars) {
    if (typeof str !== "string") {
        throw new TypeError("Parameter 'url' must be a string, not " +
            typeof str);
    }
    var start = 0;
    var end = str.length - 1;

    //Trim leading and trailing ws
    while (str.charCodeAt(start) <= 0x20 /*' '*/) start++;
    while (str.charCodeAt(end) <= 0x20 /*' '*/) end--;

    start = this._parseProtocol(str, start, end);

    //Javascript doesn't have host
    if (this._protocol !== "javascript") {
        start = this._parseHost(str, start, end, hostDenotesSlash);
        var proto = this._protocol;
        if (!this.hostname &&
            (this.slashes || (proto && !slashProtocols[proto]))) {
            this.hostname = this.host = "";
        }
    }

    if (start <= end) {
        var ch = str.charCodeAt(start);

        if (ch === 0x2F /*'/'*/ || ch === 0x5C /*'\'*/) {
            this._parsePath(str, start, end, disableAutoEscapeChars);
        }
        else if (ch === 0x3F /*'?'*/) {
            this._parseQuery(str, start, end, disableAutoEscapeChars);
        }
        else if (ch === 0x23 /*'#'*/) {
          this._parseHash(str, start, end, disableAutoEscapeChars);
        }
        else if (this._protocol !== "javascript") {
            this._parsePath(str, start, end, disableAutoEscapeChars);
        }
        else { //For javascript the pathname is just the rest of it
            this.pathname = str.slice(start, end + 1 );
        }

    }

    if (!this.pathname && this.hostname &&
        this._slashProtocols[this._protocol]) {
        this.pathname = "/";
    }

    if (parseQueryString) {
        var search = this.search;
        if (search == null) {
            search = this.search = "";
        }
        if (search.charCodeAt(0) === 0x3F /*'?'*/) {
            search = search.slice(1);
        }
        //This calls a setter function, there is no .query data property
        this.query = Url.queryString.parse(search);
    }
};

Url.prototype.resolve = function Url$resolve(relative) {
    return this.resolveObject(Url.parse(relative, false, true)).format();
};

Url.prototype.format = function Url$format() {
    var auth = this.auth || "";

    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }

    var protocol = this.protocol || "";
    var pathname = this.pathname || "";
    var hash = this.hash || "";
    var search = this.search || "";
    var query = "";
    var hostname = this.hostname || "";
    var port = this.port || "";
    var host = false;
    var scheme = "";

    //Cache the result of the getter function
    var q = this.query;
    if (q && typeof q === "object") {
        query = Url.queryString.stringify(q);
    }

    if (!search) {
        search = query ? "?" + query : "";
    }

    if (protocol && protocol.charCodeAt(protocol.length - 1) !== 0x3A /*':'*/)
        protocol += ":";

    if (this.host) {
        host = auth + this.host;
    }
    else if (hostname) {
        var ip6 = hostname.indexOf(":") > -1;
        if (ip6) hostname = "[" + hostname + "]";
        host = auth + hostname + (port ? ":" + port : "");
    }

    var slashes = this.slashes ||
        ((!protocol ||
        slashProtocols[protocol]) && host !== false);


    if (protocol) scheme = protocol + (slashes ? "//" : "");
    else if (slashes) scheme = "//";

    if (slashes && pathname && pathname.charCodeAt(0) !== 0x2F /*'/'*/) {
        pathname = "/" + pathname;
    }
    if (search && search.charCodeAt(0) !== 0x3F /*'?'*/)
        search = "?" + search;
    if (hash && hash.charCodeAt(0) !== 0x23 /*'#'*/)
        hash = "#" + hash;

    pathname = escapePathName(pathname);
    search = escapeSearch(search);

    return scheme + (host === false ? "" : host) + pathname + search + hash;
};

Url.prototype.resolveObject = function Url$resolveObject(relative) {
    if (typeof relative === "string")
        relative = Url.parse(relative, false, true);

    var result = this._clone();

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there"s nothing left to do here.
    if (!relative.href) {
        result._href = "";
        return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative._protocol) {
        relative._copyPropsTo(result, true);

        if (slashProtocols[result._protocol] &&
            result.hostname && !result.pathname) {
            result.pathname = "/";
        }
        result._href = "";
        return result;
    }

    if (relative._protocol && relative._protocol !== result._protocol) {
        // if it"s a known url protocol, then changing
        // the protocol does weird things
        // first, if it"s not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that"s known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashProtocols[relative._protocol]) {
            relative._copyPropsTo(result, false);
            result._href = "";
            return result;
        }

        result._protocol = relative._protocol;
        if (!relative.host && relative._protocol !== "javascript") {
            var relPath = (relative.pathname || "").split("/");
            while (relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else {
            result.pathname = relative.pathname;
        }

        result.search = relative.search;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result._port = relative._port;
        result.slashes = result.slashes || relative.slashes;
        result._href = "";
        return result;
    }

    var isSourceAbs =
        (result.pathname && result.pathname.charCodeAt(0) === 0x2F /*'/'*/);
    var isRelAbs = (
            relative.host ||
            (relative.pathname &&
            relative.pathname.charCodeAt(0) === 0x2F /*'/'*/)
        );
    var mustEndAbs = (isRelAbs || isSourceAbs ||
                        (result.host && relative.pathname));

    var removeAllDots = mustEndAbs;

    var srcPath = result.pathname && result.pathname.split("/") || [];
    var relPath = relative.pathname && relative.pathname.split("/") || [];
    var psychotic = result._protocol && !slashProtocols[result._protocol];

    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = "";
        result._port = -1;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative._protocol) {
            relative.hostname = "";
            relative._port = -1;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = "";
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }

    if (isRelAbs) {
        // it"s absolute.
        result.host = relative.host ?
            relative.host : result.host;
        result.hostname = relative.hostname ?
            relative.hostname : result.hostname;
        result.search = relative.search;
        srcPath = relPath;
        // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it"s relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
    } else if (relative.search) {
        // just pull out the search.
        // like href="?foo".
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especialy happens in cases like
            //url.resolveObject("mailto:local1@domain1", "local2@domain2")
            var authInHost = result.host && result.host.indexOf("@") > 0 ?
                result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result._href = "";
        return result;
    }

    if (!srcPath.length) {
        // no path at all.  easy.
        // we"ve already handled the other stuff above.
        result.pathname = null;
        result._href = "";
        return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
        (result.host || relative.host) && (last === "." || last === "..") ||
        last === "");

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
            srcPath.splice(i, 1);
        } else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
            srcPath.unshift("..");
        }
    }

    if (mustEndAbs && srcPath[0] !== "" &&
        (!srcPath[0] || srcPath[0].charCodeAt(0) !== 0x2F /*'/'*/)) {
        srcPath.unshift("");
    }

    if (hasTrailingSlash && (srcPath.join("/").substr(-1) !== "/")) {
        srcPath.push("");
    }

    var isAbsolute = srcPath[0] === "" ||
        (srcPath[0] && srcPath[0].charCodeAt(0) === 0x2F /*'/'*/);

    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" :
            srcPath.length ? srcPath.shift() : "";
        //occationaly the auth can get stuck only in host
        //this especialy happens in cases like
        //url.resolveObject("mailto:local1@domain1", "local2@domain2")
        var authInHost = result.host && result.host.indexOf("@") > 0 ?
            result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
    }

    result.pathname = srcPath.length === 0 ? null : srcPath.join("/");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result._href = "";
    return result;
};

var punycode = __webpack_require__(/*! punycode */ "./node_modules/punycode/punycode.js");
Url.prototype._hostIdna = function Url$_hostIdna(hostname) {
    // IDNA Support: Returns a punycoded representation of "domain".
    // It only converts parts of the domain name that
    // have non-ASCII characters, i.e. it doesn't matter if
    // you call it with a domain that already is ASCII-only.
    return punycode.toASCII(hostname);
};

var escapePathName = Url.prototype._escapePathName =
function Url$_escapePathName(pathname) {
    if (!containsCharacter2(pathname, 0x23 /*'#'*/, 0x3F /*'?'*/)) {
        return pathname;
    }
    //Avoid closure creation to keep this inlinable
    return _escapePath(pathname);
};

var escapeSearch = Url.prototype._escapeSearch =
function Url$_escapeSearch(search) {
    if (!containsCharacter2(search, 0x23 /*'#'*/, -1)) return search;
    //Avoid closure creation to keep this inlinable
    return _escapeSearch(search);
};

Url.prototype._parseProtocol = function Url$_parseProtocol(str, start, end) {
    var doLowerCase = false;
    var protocolCharacters = this._protocolCharacters;

    for (var i = start; i <= end; ++i) {
        var ch = str.charCodeAt(i);

        if (ch === 0x3A /*':'*/) {
            var protocol = str.slice(start, i);
            if (doLowerCase) protocol = protocol.toLowerCase();
            this._protocol = protocol;
            return i + 1;
        }
        else if (protocolCharacters[ch] === 1) {
            if (ch < 0x61 /*'a'*/)
                doLowerCase = true;
        }
        else {
            return start;
        }

    }
    return start;
};

Url.prototype._parseAuth = function Url$_parseAuth(str, start, end, decode) {
    var auth = str.slice(start, end + 1);
    if (decode) {
        auth = decodeURIComponent(auth);
    }
    this.auth = auth;
};

Url.prototype._parsePort = function Url$_parsePort(str, start, end) {
    //Internal format is integer for more efficient parsing
    //and for efficient trimming of leading zeros
    var port = 0;
    //Distinguish between :0 and : (no port number at all)
    var hadChars = false;
    var validPort = true;

    for (var i = start; i <= end; ++i) {
        var ch = str.charCodeAt(i);

        if (0x30 /*'0'*/ <= ch && ch <= 0x39 /*'9'*/) {
            port = (10 * port) + (ch - 0x30 /*'0'*/);
            hadChars = true;
        }
        else {
            validPort = false;
            if (ch === 0x5C/*'\'*/ || ch === 0x2F/*'/'*/) {
                validPort = true;
            }
            break;
        }

    }
    if ((port === 0 && !hadChars) || !validPort) {
        if (!validPort) {
            this._port = -2;
        }
        return 0;
    }

    this._port = port;
    return i - start;
};

Url.prototype._parseHost =
function Url$_parseHost(str, start, end, slashesDenoteHost) {
    var hostEndingCharacters = this._hostEndingCharacters;
    var first = str.charCodeAt(start);
    var second = str.charCodeAt(start + 1);
    if ((first === 0x2F /*'/'*/ || first === 0x5C /*'\'*/) &&
        (second === 0x2F /*'/'*/ || second === 0x5C /*'\'*/)) {
        this.slashes = true;

        //The string starts with //
        if (start === 0) {
            //The string is just "//"
            if (end < 2) return start;
            //If slashes do not denote host and there is no auth,
            //there is no host when the string starts with //
            var hasAuth =
                containsCharacter(str, 0x40 /*'@'*/, 2, hostEndingCharacters);
            if (!hasAuth && !slashesDenoteHost) {
                this.slashes = null;
                return start;
            }
        }
        //There is a host that starts after the //
        start += 2;
    }
    //If there is no slashes, there is no hostname if
    //1. there was no protocol at all
    else if (!this._protocol ||
        //2. there was a protocol that requires slashes
        //e.g. in 'http:asd' 'asd' is not a hostname
        slashProtocols[this._protocol]
    ) {
        return start;
    }

    var doLowerCase = false;
    var idna = false;
    var hostNameStart = start;
    var hostNameEnd = end;
    var lastCh = -1;
    var portLength = 0;
    var charsAfterDot = 0;
    var authNeedsDecoding = false;

    var j = -1;

    //Find the last occurrence of an @-sign until hostending character is met
    //also mark if decoding is needed for the auth portion
    for (var i = start; i <= end; ++i) {
        var ch = str.charCodeAt(i);

        if (ch === 0x40 /*'@'*/) {
            j = i;
        }
        //This check is very, very cheap. Unneeded decodeURIComponent is very
        //very expensive
        else if (ch === 0x25 /*'%'*/) {
            authNeedsDecoding = true;
        }
        else if (hostEndingCharacters[ch] === 1) {
            break;
        }
    }

    //@-sign was found at index j, everything to the left from it
    //is auth part
    if (j > -1) {
        this._parseAuth(str, start, j - 1, authNeedsDecoding);
        //hostname starts after the last @-sign
        start = hostNameStart = j + 1;
    }

    //Host name is starting with a [
    if (str.charCodeAt(start) === 0x5B /*'['*/) {
        for (var i = start + 1; i <= end; ++i) {
            var ch = str.charCodeAt(i);

            //Assume valid IP6 is between the brackets
            if (ch === 0x5D /*']'*/) {
                if (str.charCodeAt(i + 1) === 0x3A /*':'*/) {
                    portLength = this._parsePort(str, i + 2, end) + 1;
                }
                var hostname = str.slice(start + 1, i).toLowerCase();
                this.hostname = hostname;
                this.host = this._port > 0 ?
                    "[" + hostname + "]:" + this._port :
                    "[" + hostname + "]";
                this.pathname = "/";
                return i + portLength + 1;
            }
        }
        //Empty hostname, [ starts a path
        return start;
    }

    for (var i = start; i <= end; ++i) {
        if (charsAfterDot > 62) {
            this.hostname = this.host = str.slice(start, i);
            return i;
        }
        var ch = str.charCodeAt(i);

        if (ch === 0x3A /*':'*/) {
            portLength = this._parsePort(str, i + 1, end) + 1;
            hostNameEnd = i - 1;
            break;
        }
        else if (ch < 0x61 /*'a'*/) {
            if (ch === 0x2E /*'.'*/) {
                //Node.js ignores this error
                /*
                if (lastCh === DOT || lastCh === -1) {
                    this.hostname = this.host = "";
                    return start;
                }
                */
                charsAfterDot = -1;
            }
            else if (0x41 /*'A'*/ <= ch && ch <= 0x5A /*'Z'*/) {
                doLowerCase = true;
            }
            //Valid characters other than ASCII letters -, _, +, 0-9
            else if (!(ch === 0x2D /*'-'*/ ||
                       ch === 0x5F /*'_'*/ ||
                       ch === 0x2B /*'+'*/ ||
                       (0x30 /*'0'*/ <= ch && ch <= 0x39 /*'9'*/))
                ) {
                if (hostEndingCharacters[ch] === 0 &&
                    this._noPrependSlashHostEnders[ch] === 0) {
                    this._prependSlash = true;
                }
                hostNameEnd = i - 1;
                break;
            }
        }
        else if (ch >= 0x7B /*'{'*/) {
            if (ch <= 0x7E /*'~'*/) {
                if (this._noPrependSlashHostEnders[ch] === 0) {
                    this._prependSlash = true;
                }
                hostNameEnd = i - 1;
                break;
            }
            idna = true;
        }
        lastCh = ch;
        charsAfterDot++;
    }

    //Node.js ignores this error
    /*
    if (lastCh === DOT) {
        hostNameEnd--;
    }
    */

    if (hostNameEnd + 1 !== start &&
        hostNameEnd - hostNameStart <= 256) {
        var hostname = str.slice(hostNameStart, hostNameEnd + 1);
        if (doLowerCase) hostname = hostname.toLowerCase();
        if (idna) hostname = this._hostIdna(hostname);
        this.hostname = hostname;
        this.host = this._port > 0 ? hostname + ":" + this._port : hostname;
    }

    return hostNameEnd + 1 + portLength;

};

Url.prototype._copyPropsTo = function Url$_copyPropsTo(input, noProtocol) {
    if (!noProtocol) {
        input._protocol = this._protocol;
    }
    input._href = this._href;
    input._port = this._port;
    input._prependSlash = this._prependSlash;
    input.auth = this.auth;
    input.slashes = this.slashes;
    input.host = this.host;
    input.hostname = this.hostname;
    input.hash = this.hash;
    input.search = this.search;
    input.pathname = this.pathname;
};

Url.prototype._clone = function Url$_clone() {
    var ret = new Url();
    ret._protocol = this._protocol;
    ret._href = this._href;
    ret._port = this._port;
    ret._prependSlash = this._prependSlash;
    ret.auth = this.auth;
    ret.slashes = this.slashes;
    ret.host = this.host;
    ret.hostname = this.hostname;
    ret.hash = this.hash;
    ret.search = this.search;
    ret.pathname = this.pathname;
    return ret;
};

Url.prototype._getComponentEscaped =
function Url$_getComponentEscaped(str, start, end, isAfterQuery) {
    var cur = start;
    var i = start;
    var ret = "";
    var autoEscapeMap = isAfterQuery ?
        this._afterQueryAutoEscapeMap : this._autoEscapeMap;
    for (; i <= end; ++i) {
        var ch = str.charCodeAt(i);
        var escaped = autoEscapeMap[ch];

        if (escaped !== "" && escaped !== undefined) {
            if (cur < i) ret += str.slice(cur, i);
            ret += escaped;
            cur = i + 1;
        }
    }
    if (cur < i + 1) ret += str.slice(cur, i);
    return ret;
};

Url.prototype._parsePath =
function Url$_parsePath(str, start, end, disableAutoEscapeChars) {
    var pathStart = start;
    var pathEnd = end;
    var escape = false;
    var autoEscapeCharacters = this._autoEscapeCharacters;
    var prePath = this._port === -2 ? "/:" : "";

    for (var i = start; i <= end; ++i) {
        var ch = str.charCodeAt(i);
        if (ch === 0x23 /*'#'*/) {
          this._parseHash(str, i, end, disableAutoEscapeChars);
            pathEnd = i - 1;
            break;
        }
        else if (ch === 0x3F /*'?'*/) {
            this._parseQuery(str, i, end, disableAutoEscapeChars);
            pathEnd = i - 1;
            break;
        }
        else if (!disableAutoEscapeChars && !escape && autoEscapeCharacters[ch] === 1) {
            escape = true;
        }
    }

    if (pathStart > pathEnd) {
        this.pathname = prePath === "" ? "/" : prePath;
        return;
    }

    var path;
    if (escape) {
        path = this._getComponentEscaped(str, pathStart, pathEnd, false);
    }
    else {
        path = str.slice(pathStart, pathEnd + 1);
    }
    this.pathname = prePath === ""
        ? (this._prependSlash ? "/" + path : path)
        : prePath + path;
};

Url.prototype._parseQuery = function Url$_parseQuery(str, start, end, disableAutoEscapeChars) {
    var queryStart = start;
    var queryEnd = end;
    var escape = false;
    var autoEscapeCharacters = this._autoEscapeCharacters;

    for (var i = start; i <= end; ++i) {
        var ch = str.charCodeAt(i);

        if (ch === 0x23 /*'#'*/) {
            this._parseHash(str, i, end, disableAutoEscapeChars);
            queryEnd = i - 1;
            break;
        }
        else if (!disableAutoEscapeChars && !escape && autoEscapeCharacters[ch] === 1) {
            escape = true;
        }
    }

    if (queryStart > queryEnd) {
        this.search = "";
        return;
    }

    var query;
    if (escape) {
        query = this._getComponentEscaped(str, queryStart, queryEnd, true);
    }
    else {
        query = str.slice(queryStart, queryEnd + 1);
    }
    this.search = query;
};

Url.prototype._parseHash = function Url$_parseHash(str, start, end, disableAutoEscapeChars) {
    if (start > end) {
        this.hash = "";
        return;
    }

    this.hash = disableAutoEscapeChars ?
        str.slice(start, end + 1) : this._getComponentEscaped(str, start, end, true);
};

Object.defineProperty(Url.prototype, "port", {
    get: function() {
        if (this._port >= 0) {
            return ("" + this._port);
        }
        return null;
    },
    set: function(v) {
        if (v == null) {
            this._port = -1;
        }
        else {
            this._port = parseInt(v, 10);
        }
    }
});

Object.defineProperty(Url.prototype, "query", {
    get: function() {
        var query = this._query;
        if (query != null) {
            return query;
        }
        var search = this.search;

        if (search) {
            if (search.charCodeAt(0) === 0x3F /*'?'*/) {
                search = search.slice(1);
            }
            if (search !== "") {
                this._query = search;
                return search;
            }
        }
        return search;
    },
    set: function(v) {
        this._query = v;
    }
});

Object.defineProperty(Url.prototype, "path", {
    get: function() {
        var p = this.pathname || "";
        var s = this.search || "";
        if (p || s) {
            return p + s;
        }
        return (p == null && s) ? ("/" + s) : null;
    },
    set: function() {}
});

Object.defineProperty(Url.prototype, "protocol", {
    get: function() {
        var proto = this._protocol;
        return proto ? proto + ":" : proto;
    },
    set: function(v) {
        if (typeof v === "string") {
            var end = v.length - 1;
            if (v.charCodeAt(end) === 0x3A /*':'*/) {
                this._protocol = v.slice(0, end);
            }
            else {
                this._protocol = v;
            }
        }
        else if (v == null) {
            this._protocol = null;
        }
    }
});

Object.defineProperty(Url.prototype, "href", {
    get: function() {
        var href = this._href;
        if (!href) {
            href = this._href = this.format();
        }
        return href;
    },
    set: function(v) {
        this._href = v;
    }
});

Url.parse = function Url$Parse(str, parseQueryString, hostDenotesSlash, disableAutoEscapeChars) {
    if (str instanceof Url) return str;
    var ret = new Url();
    ret.parse(str, !!parseQueryString, !!hostDenotesSlash, !!disableAutoEscapeChars);
    return ret;
};

Url.format = function Url$Format(obj) {
    if (typeof obj === "string") {
        obj = Url.parse(obj);
    }
    if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
    }
    return obj.format();
};

Url.resolve = function Url$Resolve(source, relative) {
    return Url.parse(source, false, true).resolve(relative);
};

Url.resolveObject = function Url$ResolveObject(source, relative) {
    if (!source) return relative;
    return Url.parse(source, false, true).resolveObject(relative);
};

function _escapePath(pathname) {
    return pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
}

function _escapeSearch(search) {
    return search.replace(/#/g, function(match) {
        return encodeURIComponent(match);
    });
}

//Search `char1` (integer code for a character) in `string`
//starting from `fromIndex` and ending at `string.length - 1`
//or when a stop character is found
function containsCharacter(string, char1, fromIndex, stopCharacterTable) {
    var len = string.length;
    for (var i = fromIndex; i < len; ++i) {
        var ch = string.charCodeAt(i);

        if (ch === char1) {
            return true;
        }
        else if (stopCharacterTable[ch] === 1) {
            return false;
        }
    }
    return false;
}

//See if `char1` or `char2` (integer codes for characters)
//is contained in `string`
function containsCharacter2(string, char1, char2) {
    for (var i = 0, len = string.length; i < len; ++i) {
        var ch = string.charCodeAt(i);
        if (ch === char1 || ch === char2) return true;
    }
    return false;
}

//Makes an array of 128 uint8's which represent boolean values.
//Spec is an array of ascii code points or ascii code point ranges
//ranges are expressed as [start, end]

//Create a table with the characters 0x30-0x39 (decimals '0' - '9') and
//0x7A (lowercaseletter 'z') as `true`:
//
//var a = makeAsciiTable([[0x30, 0x39], 0x7A]);
//a[0x30]; //1
//a[0x15]; //0
//a[0x35]; //1
function makeAsciiTable(spec) {
    var ret = new Uint8Array(128);
    spec.forEach(function(item){
        if (typeof item === "number") {
            ret[item] = 1;
        }
        else {
            var start = item[0];
            var end = item[1];
            for (var j = start; j <= end; ++j) {
                ret[j] = 1;
            }
        }
    });

    return ret;
}


var autoEscape = ["<", ">", "\"", "`", " ", "\r", "\n",
    "\t", "{", "}", "|", "\\", "^", "`", "'"];

var autoEscapeMap = new Array(128);



for (var i = 0, len = autoEscapeMap.length; i < len; ++i) {
    autoEscapeMap[i] = "";
}

for (var i = 0, len = autoEscape.length; i < len; ++i) {
    var c = autoEscape[i];
    var esc = encodeURIComponent(c);
    if (esc === c) {
        esc = escape(c);
    }
    autoEscapeMap[c.charCodeAt(0)] = esc;
}
var afterQueryAutoEscapeMap = autoEscapeMap.slice();
autoEscapeMap[0x5C /*'\'*/] = "/";

var slashProtocols = Url.prototype._slashProtocols = {
    http: true,
    https: true,
    gopher: true,
    file: true,
    ftp: true,

    "http:": true,
    "https:": true,
    "gopher:": true,
    "file:": true,
    "ftp:": true
};

//Optimize back from normalized object caused by non-identifier keys
function f(){}
f.prototype = slashProtocols;

Url.prototype._protocolCharacters = makeAsciiTable([
    [0x61 /*'a'*/, 0x7A /*'z'*/],
    [0x41 /*'A'*/, 0x5A /*'Z'*/],
    0x2E /*'.'*/, 0x2B /*'+'*/, 0x2D /*'-'*/
]);

Url.prototype._hostEndingCharacters = makeAsciiTable([
    0x23 /*'#'*/, 0x3F /*'?'*/, 0x2F /*'/'*/, 0x5C /*'\'*/
]);

Url.prototype._autoEscapeCharacters = makeAsciiTable(
    autoEscape.map(function(v) {
        return v.charCodeAt(0);
    })
);

//If these characters end a host name, the path will not be prepended a /
Url.prototype._noPrependSlashHostEnders = makeAsciiTable(
    [
        "<", ">", "'", "`", " ", "\r",
        "\n", "\t", "{", "}", "|",
        "^", "`", "\"", "%", ";"
    ].map(function(v) {
        return v.charCodeAt(0);
    })
);

Url.prototype._autoEscapeMap = autoEscapeMap;
Url.prototype._afterQueryAutoEscapeMap = afterQueryAutoEscapeMap;

module.exports = Url;

Url.replace = function Url$Replace() {
    __webpack_require__.c.url = {
        exports: Url
    };
};


/***/ }),

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/*! exports provided: EPSILON, ARRAY_TYPE, RANDOM, setMatrixArrayType, toRadian, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON", function() { return EPSILON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RANDOM", function() { return RANDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMatrixArrayType", function() { return setMatrixArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRadian", function() { return toRadian; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};

/***/ }),

/***/ "./node_modules/gl-matrix/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/index.js ***!
  \*********************************************/
/*! exports provided: glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "glMatrix", function() { return _common_js__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ "./node_modules/gl-matrix/esm/mat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2", function() { return _mat2_js__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ "./node_modules/gl-matrix/esm/mat2d.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2d", function() { return _mat2d_js__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat3", function() { return _mat3_js__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat4", function() { return _mat4_js__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat", function() { return _quat_js__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ "./node_modules/gl-matrix/esm/quat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat2", function() { return _quat2_js__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ "./node_modules/gl-matrix/esm/vec2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec2", function() { return _vec2_js__WEBPACK_IMPORTED_MODULE_7__; });
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec3", function() { return _vec3_js__WEBPACK_IMPORTED_MODULE_8__; });
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec4", function() { return _vec4_js__WEBPACK_IMPORTED_MODULE_9__; });












/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, transpose, invert, adjoint, determinant, multiply, rotate, scale, fromRotation, fromScaling, str, frob, LDU, add, subtract, exactEquals, equals, multiplyScalar, multiplyScalarAndAdd, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LDU", function() { return LDU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {ReadonlyMat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {ReadonlyMat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {ReadonlyMat2} L the lower triangular matrix
 * @param {ReadonlyMat2} D the diagonal matrix
 * @param {ReadonlyMat2} U the upper triangular matrix
 * @param {ReadonlyMat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2d.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2d.js ***!
  \*********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, invert, determinant, multiply, rotate, scale, translate, fromRotation, fromScaling, fromTranslation, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x3 Matrix
 * @module mat2d
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function fromValues(a, b, c, d, tx, ty) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2d} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {ReadonlyMat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/*! exports provided: create, fromMat4, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, rotate, scale, fromTranslation, fromRotation, fromScaling, fromMat2d, fromQuat, normalFromMat4, projection, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat2d", function() { return fromMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalFromMat4", function() { return normalFromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "projection", function() { return projection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, scale, rotate, rotateX, rotateY, rotateZ, fromTranslation, fromScaling, fromRotation, fromXRotation, fromYRotation, fromZRotation, fromRotationTranslation, fromQuat2, getTranslation, getScaling, getRotation, fromRotationTranslationScale, fromRotationTranslationScaleOrigin, fromQuat, frustum, perspectiveNO, perspective, perspectiveZO, perspectiveFromFieldOfView, orthoNO, ortho, orthoZO, lookAt, targetTo, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromXRotation", function() { return fromXRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromYRotation", function() { return fromYRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromZRotation", function() { return fromZRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat2", function() { return fromQuat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScaling", function() { return getScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRotation", function() { return getRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frustum", function() { return frustum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspectiveNO", function() { return perspectiveNO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return perspective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspectiveZO", function() { return perspectiveZO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orthoNO", function() { return orthoNO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ortho", function() { return ortho; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orthoZO", function() { return orthoZO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookAt", function() { return lookAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "targetTo", function() { return targetTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */

var perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */

var ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/*! exports provided: create, identity, setAxisAngle, getAxisAngle, getAngle, multiply, rotateX, rotateY, rotateZ, calculateW, exp, ln, pow, slerp, random, invert, conjugate, fromMat3, fromEuler, str, clone, fromValues, copy, set, add, mul, scale, dot, lerp, length, len, squaredLength, sqrLen, normalize, exactEquals, equals, rotationTo, sqlerp, setAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxisAngle", function() { return setAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAxisAngle", function() { return getAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAngle", function() { return getAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateW", function() { return calculateW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return exp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ln", function() { return ln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slerp", function() { return slerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat3", function() { return fromMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEuler", function() { return fromEuler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotationTo", function() { return rotationTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqlerp", function() { return sqlerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxes", function() { return setAxes; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["clone"];
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["fromValues"];
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["copy"];
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["set"];
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var add = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["add"];
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["scale"];
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["dot"];
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["lerp"];
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["length"];
/**
 * Alias for {@link quat.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["squaredLength"];
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["normalize"];
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["exactEquals"];
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["equals"];
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["create"]();
  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](1, 0, 0);
  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](0, 1, 0);
  return function (out, a, b) {
    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["dot"](a, b);

    if (dot < -0.999999) {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, xUnitVec3, a);
      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__["len"](tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, yUnitVec3, a);
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat2.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat2.js ***!
  \*********************************************/
/*! exports provided: create, clone, fromValues, fromRotationTranslationValues, fromRotationTranslation, fromTranslation, fromRotation, fromMat4, copy, identity, set, getReal, getDual, setReal, setDual, getTranslation, translate, rotateX, rotateY, rotateZ, rotateByQuatAppend, rotateByQuatPrepend, rotateAroundAxis, add, multiply, mul, scale, dot, lerp, invert, conjugate, length, len, squaredLength, sqrLen, normalize, str, exactEquals, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationValues", function() { return fromRotationTranslationValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReal", function() { return getReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDual", function() { return getDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setReal", function() { return setReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDual", function() { return setDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatAppend", function() { return rotateByQuatAppend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatPrepend", function() { return rotateByQuatPrepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateAroundAxis", function() { return rotateAroundAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function create() {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function clone(a) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q a normalized quaternion
 * @param {ReadonlyVec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyVec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {ReadonlyMat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function fromMat4(out, a) {
  //TODO Optimize this
  var outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getRotation"](outer, a);
  var t = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getTranslation"](t, a);
  fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {quat2} out
 */

function translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateX"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateY"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateZ"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return copy(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 */

function multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__["dot"];
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function lerp(out, a, b, t) {
  var mt = 1 - t;
  if (dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function invert(out, a) {
  var sqlen = squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var length = _quat_js__WEBPACK_IMPORTED_MODULE_1__["length"];
/**
 * Alias for {@link quat2.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__["squaredLength"];
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function normalize(out, a) {
  var magnitude = squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {ReadonlyQuat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function str(a) {
  return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat2} a the first dual quaternion.
 * @param {ReadonlyQuat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat2} a the first dual quat.
 * @param {ReadonlyQuat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat2, transformMat2d, transformMat3, transformMat4, rotate, angle, zero, str, exactEquals, equals, len, sub, mul, div, dist, sqrDist, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2", function() { return transformMat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2d", function() { return transformMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function fromValues(x, y) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */

function rotate(out, a, b, rad) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(rad),
      cosC = Math.cos(rad); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1],
      // mag is the product of the magnitudes of a and b
  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),
      // mag &&.. short circuits if mag == 0
  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1

  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/*! exports provided: create, clone, length, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, squaredLength, negate, inverse, normalize, dot, cross, lerp, hermite, bezier, random, transformMat4, transformMat3, transformQuat, rotateX, rotateY, rotateZ, angle, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hermite", function() { return hermite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bezier", function() { return bezier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues(x, y, z) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat4, transformQuat, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues(x, y, z, w) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */

function cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */

function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/*!*******************************************!*\
  !*** ./node_modules/punycode/punycode.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/querystringparser/js/querystringparser.js":
/*!****************************************************************!*\
  !*** ./node_modules/querystringparser/js/querystringparser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var QueryStringSerializer = __webpack_require__(/*! ./querystringserializer.js */ "./node_modules/querystringparser/js/querystringserializer.js");
module.exports = QueryStringParser;

var rplus = /\+/g;
var rint = /^[0-9]+$/;
var isArray = Array.isArray;
var haveProp = {}.hasOwnProperty;

function QueryStringParser() {
    this.containsSparse = false;
    this.cacheKey = "";
    this.cacheVal = null;
}

QueryStringParser.maxLength = 32768;
QueryStringParser.maxDepth = 4;
QueryStringParser.maxKeys = 256;

QueryStringParser.parse = function QueryStringParser$Parse(str) {
    if (typeof str === "string") {
        var maxLength = QueryStringParser.maxLength;
        if (str.length > maxLength) {
            throw new RangeError(
                "str is too large (" +
                "QueryStringParser.maxLength=" + maxLength + ")"
            );
        }
        var parser = new QueryStringParser();
        return parser.parseString(str, false);
    }
    else if (str !== null && typeof str === "object") {
        var parser = new QueryStringParser();
        return parser.parseObject(str);
    }
    return {};
};

QueryStringParser.stringify =
function QueryStringParser$Stringify(value) {
    var serializer = new QueryStringSerializer();
    return serializer.serialize(value);
};

QueryStringParser.prototype.decode =
function QueryStringParser$decode(str, shouldDecode, containsPlus) {
    if (shouldDecode === false) return str;
    if (containsPlus === true) str = str.replace(rplus, " ");
    try {
        return decodeURIComponent(str);
    }
    catch (e) {
        return str;
    }
};

QueryStringParser.prototype.maybeArrayIndex =
function QueryStringParser$maybeArrayIndex(str, arrayLength) {
    var len = str.length;
    if (len === 0) {
        return arrayLength;
    }
    var ch = str.charCodeAt(0);

    if (ch === 48) {
        return len > 1 ? -1 : 0;
    }
    else if (48 <= ch && ch <= 57) {
        if (len === 1) {
            return ch - 48;
        }
        else if (rint.test(str)) {
            var v = parseInt(str, 10);
            if (0 < v && v <= 1073741822) {
                return v;
            }
        }
    }
    return -1;
};

QueryStringParser.prototype.getSlot =
function QueryStringParser$getSlot(dictionary, prevKey, curKey) {
    var slot;
    if (!(haveProp.call(dictionary, prevKey))) {
        var index = this.maybeArrayIndex(curKey, 0);
        if (index > -1) {
            slot = [];
        }
        else {
            slot = {};
        }
        dictionary[prevKey] = slot;
    }
    else {
        slot = dictionary[prevKey];
    }
    return slot;
};

QueryStringParser.prototype.placeNestedValue =
function QueryStringParser$placeNestedValue
(dictionary, key, value, i, prevKey, curKey) {
    var slot = this.getSlot(dictionary, prevKey, curKey);
    var index = -1;

    if (isArray(slot)) {
        index = this.maybeArrayIndex(curKey, slot.length);
    }

    var len = key.length;
    var depth = 2;
    var maxDepth = QueryStringParser.maxDepth;
    var start = -1;
    for (; i < len; ++i) {
        var ch = key.charCodeAt(i);
        if (ch === 91) {
            start = i + 1;
        }
        else if (ch === 93 &&
                start > -1) {
            prevKey = curKey;
            curKey = start === i ? "" : key.substring(start, i);
            start = -1;
            depth++;
            if (depth > maxDepth) {
                throw new RangeError("Nesting depth of keys is too large " +
                    "(QueryStringParser.maxDepth="+maxDepth+")" );
            }
            slot = this.getSlot(slot, prevKey, curKey);

            index = isArray(slot)
                ? this.maybeArrayIndex(curKey, slot.length)
                : -1;
        }
    }

    if(index > -1) {
        if (value !== "") {
            if (index === slot.length) {
                slot.push(value);
            }
            else {
                this.containsSparse = true;
                slot[index] = value;
            }
        }
    }
    else {
        this.insert(slot, curKey, value);
    }
};

QueryStringParser.prototype.insert =
function QueryStringParser$insert(dictionary, key, value) {
    var ret = null;
    if (haveProp.call(dictionary, key)) {
        var prev = dictionary[key];
        if( isArray(prev) ) {
            prev.push(value);
            ret = prev;
        }
        else {
            ret = [prev, value];
            dictionary[key] = ret;
        }
    }
    else {
        dictionary[key] = value;
    }
    return ret;
};

QueryStringParser.prototype.push =
function QueryStringParser$push(dictionary, key, value) {
    var ret = null;
    if (haveProp.call(dictionary, key)) {
        var prev = dictionary[key];
        prev.push(value);
        ret = prev;
    }
    else {
        ret = [value];
        dictionary[key] = ret;
    }
    return ret;
};

QueryStringParser.prototype.maybePlaceNestedValue =
function QueryStringParser$maybePlaceNestedValue(dictionary, key, value) {
    var len = key.length;
    if (key.charCodeAt(len - 1) !== 93) {
        this.placeValue(dictionary, key, value, false);
        return;
    }
    var start = -1;

    var i = 0;
    var curKey;
    var prevKey;

    for (; i < len; ++i) {
        var ch = key.charCodeAt(i);

        if (ch === 91) {
            start = i + 1;
            prevKey = key.slice(0, i);
        }
        else if (ch === 93) {
            if (start < 0) {
                this.placeValue(dictionary, key, value, false);
                return;
            }
            curKey = start === i ? "" : key.slice(start, i);
            i++;
            break;
        }
    }

    if (curKey === void 0) {
        this.placeValue(dictionary, key, value, false);
        return;
    }

    if (curKey === "" && value !== "" && i === len) {
        if (key === this.cacheKey) {
            this.cacheVal.push(value);
        }
        else {
            this.cacheKey = key;
            this.cacheVal = this.push(dictionary, prevKey, value);
        }
    }
    else {
        this.placeNestedValue(dictionary, key, value, i, prevKey, curKey);
    }
};

QueryStringParser.prototype.placeValue =
function QueryStringParser$placeValue(dictionary, key, value, possiblyNested) {
    if (possiblyNested === true) {
        this.maybePlaceNestedValue(dictionary, key, value);
        return;
    }
    if (key === this.cacheKey) {
        this.cacheVal.push(value);
        return;
    }
    var cache = this.insert(dictionary, key, value);
    if (cache !== null) {
        this.cacheKey = key;
        this.cacheVal = cache;
    }
};

QueryStringParser.prototype.compact =
function QueryStringParser$compact(obj) {
    if (isArray(obj)) {
        var ret = [];
        var keys = Object.keys(obj);
        for( var i = 0, len = keys.length; i < len; ++i ) {
            ret.push(obj[keys[i]]);
        }
        return ret;
    }
    else if (typeof obj === "object") {
        var keys = Object.keys(obj);
        for( var i = 0, len = keys.length; i < len; ++i ) {
            var key = keys[i];
            obj[key] = this.compact(obj[key]);
        }
    }
    else {
        return obj;
    }
};

QueryStringParser.prototype.parseObject =
function QueryStringParser$parseObject(obj) {
    var keys = Object.keys(obj);
    var len = keys.length;
    if (len === 0) {
        return {};
    }
    len--;
    var ret = "";
    var key;
    for( var i = 0; i < len; ++i ) {
        key = keys[i];
        ret += key + "=" + obj[key] + "&";
    }
    key = keys[i];
    ret += key + "=" + obj[key];
    return this.parseString(ret, true);
};

QueryStringParser.prototype.parseString =
function QueryStringParser$parseString(str, noDecode) {
    var maxKeys = QueryStringParser.maxKeys;
    var keys = 0;
    var decodeKey = false;
    var decodeValue = false;
    var possiblyNested = false;
    var len = str.length;
    var i = 0;
    var dictionary = {};
    var keyStart = 0;
    var keyEnd = 0;
    var valueStart = 0;
    var valueEnd = 0;
    var left = 0;
    var lastIndex = len - 1;
    var containsPlus = false;


    for (; i < len; ++i) {
        var ch = str.charCodeAt(i);

        if (ch === 91) {
            left++;
        }
        else if (left > 0 && ch === 93) {
            possiblyNested = true;
            left--;
        }
        else if (left === 0 && ch === 61) {
            var j = i + 1;

            keyEnd = i - 1;
            valueEnd = valueStart = j;
            var key = str.slice(keyStart, keyEnd + 1);
            key = this.decode(key, decodeKey, containsPlus);
            decodeKey = false;

            for (; j < len; ++j) {
                ch = str.charCodeAt(j);
                if ((ch === 43 || ch === 37) && !noDecode) {
                    if (ch === 43) containsPlus = true;
                    decodeValue = true;
                }
                if (ch === 38 || j === lastIndex) {
                    valueEnd = j;
                    i = j;

                    if (ch === 38) {
                        valueEnd--;
                    }

                    var value = str.slice(valueStart, valueEnd + 1);
                    value = this.decode(value, decodeValue, containsPlus);

                    this.placeValue(dictionary, key, value, possiblyNested);

                    containsPlus = decodeValue = false;
                    possiblyNested = false;

                    keyStart = j + 1;
                    keys++;
                    if (keys > maxKeys) {
                        throw new RangeError("Amount of keys is too large " +
                            "(QueryStringParser.maxKeys=" + maxKeys + ")");
                    }
                    break;
                }
            }
        }
        else if ((ch === 43 || ch === 37) && !noDecode) {
            if (ch === 43) containsPlus = true;
            decodeKey = true;
        }
    }
    if (keyStart !== len) {
        var value = "";
        var key = str.slice(keyStart, len);
        key = this.decode(key, decodeKey, containsPlus);
        this.placeValue(dictionary, key, value, possiblyNested);
    }


    if (this.containsSparse) {
        this.compact(dictionary);
    }

    return dictionary;
};


/***/ }),

/***/ "./node_modules/querystringparser/js/querystringserializer.js":
/*!********************************************************************!*\
  !*** ./node_modules/querystringparser/js/querystringserializer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

module.exports = QueryStringSerializer;
var enc = encodeURIComponent;
var ARRAY = [];
var isArray = Array.isArray;
var getProto = Object.getPrototypeOf;
var oProto = getProto({});

function isObject(obj) {
    if (isArray(obj)) {
        return true;
    }
    if (obj === null || typeof obj !== "object") {
        return false;
    }
    var proto = getProto(obj);

    return proto === oProto || proto === null;
}

function QueryStringSerializer() {

}

QueryStringSerializer.prototype.serialize =
function QueryStringSerializer$serialize(obj) {
    if (obj === null ||
        typeof obj !== "object") {
        throw new TypeError("the obj to stringify must be an object");
    }
    var keys = Object.keys(obj);
    var len = keys.length;
    var array = ARRAY;
    var stack = [];
    var ret = [];
    var cur = obj;
    var keyPrefix = "";

    for (var i = 0; i < len; ++i) {
        var key = keys === array ? i : keys[i];
        var value = cur[key];
        if (isObject(value)) {
            stack.push(keyPrefix, cur, keys, len, i);

            if (keyPrefix === "") {
                keyPrefix = key;
            }
            else {
                keyPrefix = keyPrefix + "[" + enc(key) + "]";
            }

            if (isArray(value)) {
                keys = array;
                len = value.length;
            }
            else {
                keys = Object.keys(value);
                len = keys.length;
            }
            i = -1;
            cur = value;
        }
        else {
            if (typeof value !== "string") {
                value = "" + value;
            }

            var serializedKey = keyPrefix === ""
                                ? enc(key)
                                : keyPrefix + "[" + enc(key) + "]";
            ret.push(serializedKey + "=" + enc(value));
        }

        if(i === len - 1 && stack.length > 0) {
            i = stack.pop();
            len = stack.pop();
            keys = stack.pop();
            cur = stack.pop();
            keyPrefix = stack.pop();
        }
    }

    return ret.join("&");
};


/***/ }),

/***/ "./node_modules/randomutils/index.js":
/*!*******************************************!*\
  !*** ./node_modules/randomutils/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// index.js

var random = function(a, b) {
    if(b === undefined) {
        b = 0;
    }
    return a + Math.random() * (b - a);
}


var randomFloor = function(a, b) {
    return Math.floor(random(a, b));
}


var randomGaussian = function(n) {
    if( n === undefined) n = 6;
    var rand = 0;
  
    for (var i = 0; i < n; i += 1) {
        rand += Math.random();
    }
  
    return rand / n
}

var getRandomElement = function(ary) {
    return ary[randomFloor(ary.length)];
}


var map = function(v, a, b, c, d) {
    let p = (v - a) / ( b - a);
    return c + (d - c) * p;
}


var randomUtils = {
    random,
    randomFloor,
    randomGaussian,
    map,
    getRandomElement
}


module.exports = randomUtils;

/***/ }),

/***/ "./node_modules/scheduling/build/scheduler.js":
/*!****************************************************!*\
  !*** ./node_modules/scheduling/build/scheduler.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
let n=window,e=60,r=performance.now(),t=0,o=0,f=r;const u=[],c=[],a=[],i=[];let s=[],l=[],m=-1,g=0;function p(){!function(){let n,m=0,g=1e3/e,p=0;for(m=0;m<u.length;m++)n=u[m],null!=n&&n.func(n.args);for(;s.length>0;)n=s.pop(),n.func(n.args);let h=performance.now();for(o=(h-r)/1e3,t=h-f,m=0;m<c.length;m++)n=c[m],h-n.time>n.delay&&(n.func(n.args),c.splice(m,1));for(h=performance.now();a.length>0;){if(n=a.shift(),p=performance.now(),!(p-h<g)){a.unshift(n);break}n.func(n.args)}for(h=performance.now();i.length>0;)n=i.shift(),p=performance.now(),p-h<g&&n.func(n.args);f=h,s=s.concat(l),l=[]}(),m=n.requestAnimationFrame(p)}p();var h={addEF:function(n,e){const r=++g;return u[r]={func:n,args:e},r},removeEF:function(n){return void 0!==u[n]&&(u[n]=null),-1},delay:function(n,e,r){const t=performance.now();c.push({func:n,args:e,delay:r,time:t})},next:function(n,e){l.push({func:n,args:e})},defer:function(n,e){a.push({func:n,args:e})},usurp:function(n,e){i.push({func:n,args:e})},setRequestAnimationFrameSource:function(e){m>-1&&window.cancelAnimationFrame(m),n=e,p()},setFrameRate:function(n){e=n},getElapsedTime:function(){return o},getDeltaTime:function(){return t}};/* harmony default export */ __webpack_exports__["default"] = (h);


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/js/ARUtils.js":
/*!***************************!*\
  !*** ./src/js/ARUtils.js ***!
  \***************************/
/*! exports provided: isARSupported, session, canvas, gl, checkSupported, init, setCamera, bind, hitTest, onSessionEnd, onEnterFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isARSupported", function() { return isARSupported; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "session", function() { return session; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvas", function() { return canvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gl", function() { return gl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkSupported", function() { return checkSupported; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setCamera", function() { return setCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function() { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hitTest", function() { return hitTest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSessionEnd", function() { return onSessionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onEnterFrame", function() { return onEnterFrame; });
/* harmony import */ var scheduling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scheduling */ "./node_modules/scheduling/build/scheduler.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");


let isARSupported = false; // webgl

let canvas;
let gl; // xr

let session;
let xrRefSpace;
let xrViewerSpace;
let xrHitTestSource;
let frame;
let cbSessionEnd;
let pose;
let cbLoop;
let mtxHit = gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].create();

const checkSupported = function checkSupported() {
  return new Promise((resolve, reject) => {
    if (!navigator.xr) {
      resolve(false);
    } else {
      navigator.xr.isSessionSupported("immersive-ar").then(supported => {
        isARSupported = supported;
        resolve(supported);
      });
    }
  });
};

const makeXRCompatible = mSession => {
  session = mSession;
  return new Promise((resolve, reject) => {
    gl.makeXRCompatible().then(() => {
      session.updateRenderState({
        baseLayer: new XRWebGLLayer(session, gl)
      });
      resolve();
    });
  });
};

const initHitTesting = () => {
  return new Promise((resolve, reject) => {
    session.requestReferenceSpace("viewer").then(refSpace => {
      xrViewerSpace = refSpace;
      session.requestHitTestSource({
        space: xrViewerSpace
      }).then(hitTestSource => {
        xrHitTestSource = hitTestSource;
        resolve();
      });
    });
  });
};

const init = function (mGl) {
  gl = mGl;
  return new Promise((resolve, reject) => {
    navigator.xr.requestSession("immersive-ar", {
      optionalFeatures: ["dom-overlay"],
      domOverlay: {
        root: document.querySelector(".container")
      },
      requiredFeatures: ["local", "hit-test"]
    }).then(makeXRCompatible).then(initHitTesting).then(() => {
      // session end handling
      session.onend = () => {
        cbSessionEnd && cbSessionEnd();
      };

      session.requestReferenceSpace("local").then(refSpace => {
        xrRefSpace = refSpace;
        loop(); // set animation frame source

        scheduling__WEBPACK_IMPORTED_MODULE_0__["default"].setRequestAnimationFrameSource(session);
        resolve(gl);
      });
    }).catch(e => {
      reject(e);
    });
  });
}; // animation frame


function loop(t, mFrame) {
  frame = mFrame;
  getPose(frame);

  if (cbLoop) {
    cbLoop();
  }

  session.requestAnimationFrame((t, frame) => loop(t, frame));
} // binding the framebuffer to draw


function bind() {
  gl.bindFramebuffer(gl.FRAMEBUFFER, session.renderState.baseLayer.framebuffer);
}

function getPose(frame) {
  if (frame) pose = frame.getViewerPose(xrRefSpace);
} // set the camera from XRFrame.pose


function setCamera(GL, mCamera, mBind = true) {
  if (!session || !frame) {
    return;
  }

  if (pose) {
    const view = pose.views[0]; // ar has only 1 view

    const {
      x,
      y,
      width,
      height
    } = session.renderState.baseLayer.getViewport(view);
    mCamera.setFromViewProjection(view.transform.inverse.matrix, view.projectionMatrix);
    GL.setMatrices(mCamera);
    GL.viewport(x, y, width, height);

    if (mBind) {
      bind();
    }
  }
} // get hit test result


function hitTest() {
  if (!frame || !xrHitTestSource) {
    return null;
  } // if (Math.random() > 0.95) {
  //   console.log("hit test");
  // }


  const hitTestResults = frame.getHitTestResults(xrHitTestSource);

  if (hitTestResults.length > 0) {
    const pose = hitTestResults[0].getPose(xrRefSpace);
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].copy(mtxHit, pose.transform.matrix);
    return mtxHit;
  } else {
    return null;
  }
} // session end callback


function onSessionEnd(mCb) {
  cbSessionEnd = mCb;
}

function onEnterFrame(mCb) {
  cbLoop = mCb;
}



/***/ }),

/***/ "./src/js/Assets.js":
/*!**************************!*\
  !*** ./src/js/Assets.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);


let _assets;

const init = mAssets => {
  _assets = mAssets.map(asset => {
    const {
      id,
      type,
      file: source
    } = asset;
    let file;

    switch (type) {
      case "jpg":
      case "png":
        file = new alfrid__WEBPACK_IMPORTED_MODULE_0__["GLTexture"](source);
        break;

      case "binary":
        if (id.indexOf("radiance") > -1) {
          const dataTexture = Object(alfrid__WEBPACK_IMPORTED_MODULE_0__["parseDds"])(source);
          const sourceTexture = dataTexture.map(o => o.data);
          file = new alfrid__WEBPACK_IMPORTED_MODULE_0__["GLCubeTexture"](sourceTexture, {
            type: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].FLOAT
          }, dataTexture[0].shape[0], dataTexture[0].shape[1]);
        }

        break;

      case "text":
        file = Object(alfrid__WEBPACK_IMPORTED_MODULE_0__["parseObj"])(source);
        break;
    }

    return {
      id,
      type,
      source,
      file
    };
  });
};

const get = mName => {
  const asset = _assets.find(o => o.id === mName);

  if (!asset) {
    return null;
  }

  return asset.file;
};

const Assets = {
  init,
  get
};
/* harmony default export */ __webpack_exports__["default"] = (Assets);

/***/ }),

/***/ "./src/js/Config.js":
/*!**************************!*\
  !*** ./src/js/Config.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Config.js
/* harmony default export */ __webpack_exports__["default"] = ({
  colorIndex: 0,
  numParticles: 4,
  meshDetail: 6,
  numSwarm: 64,
  savePixelRatio: 1.5,
  bufferflyScale: 0.9893121403124143,
  bufferflySwarmScale: 1,
  bufferflyMap: 0,
  thresholdOpen: 30,
  autoSave: false,
  maxHeight: 16,
  bg: [107, 1, 11],
  contrast: 4.1,
  brightness: 0.38,
  filmGrainStrength: 0.2,
  fov: 75
});

/***/ }),

/***/ "./src/js/DrawButterflies.js":
/*!***********************************!*\
  !*** ./src/js/DrawButterflies.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Assets */ "./src/js/Assets.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var shaders_bufferfly_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shaders/bufferfly.vert */ "./src/shaders/bufferfly.vert");
/* harmony import */ var shaders_bufferfly_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shaders/bufferfly.frag */ "./src/shaders/bufferfly.frag");







const randomGaussianRange = (a, b) => {
  return a + (b - a) * Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomGaussian"])();
};

class DrawButterFlies extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const s = 1;
    const mesh = alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].plane(s, s, 6, "xz");
    const {
      numParticles: num
    } = _Config__WEBPACK_IMPORTED_MODULE_2__["default"];
    const uvOffsets = [];
    const uvOffsets2 = [];
    const randoms = [];

    for (let i = 0; i < num; i++) {
      for (let j = 0; j < num; j++) {
        uvOffsets.push([i / num, j / num]);
        randoms.push([Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomGaussian"])(), Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomGaussian"])(), Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["random"])(Math.PI * 2)]);
        let u = Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomFloor"])(0, 2) / 2;
        let v = Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomFloor"])(0, 3) / 3;
        uvOffsets2.push([u, v]);
      }
    }

    mesh.bufferInstance(randoms, "aRandom");
    mesh.bufferInstance(uvOffsets, "aUVOffset");
    mesh.bufferInstance(uvOffsets2, "aUVOffset2");
    this.setMesh(mesh).useProgram(shaders_bufferfly_vert__WEBPACK_IMPORTED_MODULE_4__["default"], shaders_bufferfly_frag__WEBPACK_IMPORTED_MODULE_5__["default"]).uniform("uUVScale", [1 / 2, 1 / 3]); // states

    this._offset = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](0, "linear", 0.005);
  }

  open() {
    this._offset.value = 1;
  }

  close(mForce = false) {
    if (mForce) {
      this._offset.setTo(0);
    } else {
      this._offset.value = 0;
    }
  }

  draw() {
    if (this._offset.value <= 0.01) {
      return;
    }

    this.uniform("uOffset", this._offset.value);
    super.draw();
  }

  get isShowing() {
    return this._offset.value > 0;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawButterFlies);

/***/ }),

/***/ "./src/js/DrawDebug.js":
/*!*****************************!*\
  !*** ./src/js/DrawDebug.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var shaders_debug_vert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shaders/debug.vert */ "./src/shaders/debug.vert");
/* harmony import */ var shaders_debug_frag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shaders/debug.frag */ "./src/shaders/debug.frag");





class DrawDebug extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const {
      numSwarm: num
    } = _Config__WEBPACK_IMPORTED_MODULE_1__["default"];
    const positions = [];
    const uvs = [];
    const indices = [];
    let index = 0;

    for (let i = 0; i < num; i++) {
      for (let j = 0; j < num; j++) {
        uvs.push([i / num + 0.5 / num, j / num + 0.5 / num]);
        positions.push([Math.random(), Math.random(), Math.random()]);
        indices.push(index);
        index++;
      }
    }

    const mesh = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Mesh"](alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].POINTS).bufferVertex(positions).bufferTexCoord(uvs).bufferIndex(indices);
    this.setMesh(mesh).useProgram(shaders_debug_vert__WEBPACK_IMPORTED_MODULE_2__["default"], shaders_debug_frag__WEBPACK_IMPORTED_MODULE_3__["default"]);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawDebug);

/***/ }),

/***/ "./src/js/DrawFilmGrain.js":
/*!*********************************!*\
  !*** ./src/js/DrawFilmGrain.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Assets */ "./src/js/Assets.js");
/* harmony import */ var shaders_grain_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shaders/grain.frag */ "./src/shaders/grain.frag");




class DrawFilmGrain extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const t = _Assets__WEBPACK_IMPORTED_MODULE_1__["default"].get("noise");
    t.wrapS = t.wrapT = alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].REPEAT;
    this.setMesh(alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].bigTriangle()).useProgram(alfrid__WEBPACK_IMPORTED_MODULE_0__["ShaderLibs"].bigTriangleVert, shaders_grain_frag__WEBPACK_IMPORTED_MODULE_2__["default"]).bindTexture("texture", t);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawFilmGrain);

/***/ }),

/***/ "./src/js/DrawMark.js":
/*!****************************!*\
  !*** ./src/js/DrawMark.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shaders_mark_vert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shaders/mark.vert */ "./src/shaders/mark.vert");
/* harmony import */ var shaders_mark_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shaders/mark.frag */ "./src/shaders/mark.frag");




class DrawMark extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const s = 0.1;
    const mesh = alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].plane(s, s, 1, "xz");
    this.setMesh(mesh).useProgram(shaders_mark_vert__WEBPACK_IMPORTED_MODULE_1__["default"], shaders_mark_frag__WEBPACK_IMPORTED_MODULE_2__["default"]);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawMark);

/***/ }),

/***/ "./src/js/DrawSave.js":
/*!****************************!*\
  !*** ./src/js/DrawSave.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var shaders_save_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shaders/save.vert */ "./src/shaders/save.vert");
/* harmony import */ var shaders_save_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shaders/save.frag */ "./src/shaders/save.frag");







class DrawSave extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const {
      numParticles: num,
      paintingSize
    } = _Config__WEBPACK_IMPORTED_MODULE_1__["default"];
    const positions = [];
    const uvs = [];
    const normals = [];
    const datas = [];
    const indices = [];

    const getPos = () => {
      const r = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["randomGaussian"])() * 2.0;
      const a = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(Math.PI * 2);
      const x = Math.cos(a) * r;
      const z = Math.sin(a) * r;
      const h = 0.2;
      const y = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(-h, h);
      return [x, y, z];
    };

    let index = 0;

    for (let i = 0; i < num; i++) {
      for (let j = 0; j < num; j++) {
        positions.push(getPos());
        uvs.push([i / num * 2 - 1, j / num * 2 - 1]);
        normals.push([Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1)]);
        datas.push([Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(1)]);
        indices.push(index++);
      }
    }

    const mesh = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Mesh"](alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].POINTS).bufferVertex(positions).bufferTexCoord(uvs).bufferNormal(normals).bufferData(datas, "aData", 3).bufferIndex(indices);
    this.setMesh(mesh).useProgram(shaders_save_vert__WEBPACK_IMPORTED_MODULE_4__["default"], shaders_save_frag__WEBPACK_IMPORTED_MODULE_5__["default"]);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawSave);

/***/ }),

/***/ "./src/js/DrawSwarm.js":
/*!*****************************!*\
  !*** ./src/js/DrawSwarm.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var shaders_swarm_vert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shaders/swarm.vert */ "./src/shaders/swarm.vert");
/* harmony import */ var shaders_swarm_frag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shaders/swarm.frag */ "./src/shaders/swarm.frag");






const _random = (a, b) => {
  let p = Object(randomutils__WEBPACK_IMPORTED_MODULE_1__["randomGaussian"])();
  return a + p * (b - a);
};

class DrawSwarm extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const s = 1;
    const mesh = alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].plane(s, s, _Config__WEBPACK_IMPORTED_MODULE_2__["default"].meshDetail, "xz");
    const {
      numSwarm: num
    } = _Config__WEBPACK_IMPORTED_MODULE_2__["default"];
    const posOffsets = [];
    const uvOffsets = [];
    const randoms = [];

    for (let i = 0; i < num; i++) {
      for (let j = 0; j < num; j++) {
        let u = Object(randomutils__WEBPACK_IMPORTED_MODULE_1__["randomFloor"])(0, 2) / 2;
        let v = Object(randomutils__WEBPACK_IMPORTED_MODULE_1__["randomFloor"])(0, 3) / 3;
        posOffsets.push([i / num + 0.5 / num, j / num + 0.5 / num]);
        uvOffsets.push([u, v]);
        randoms.push([Object(randomutils__WEBPACK_IMPORTED_MODULE_1__["randomGaussian"])(), Object(randomutils__WEBPACK_IMPORTED_MODULE_1__["randomGaussian"])(), Math.random()]);
      }
    }

    mesh.bufferInstance(uvOffsets, "aUV").bufferInstance(randoms, "aRandom").bufferInstance(posOffsets, "aPosOffset");
    this.setMesh(mesh).useProgram(shaders_swarm_vert__WEBPACK_IMPORTED_MODULE_3__["default"], shaders_swarm_frag__WEBPACK_IMPORTED_MODULE_4__["default"]).uniform("uUVScale", [1 / 2, 1 / 3]); // states

    const mul = alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].isMobile ? 1.75 : 1.0;
    this._offset = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](0, "linear", 0.01 * mul);
  }

  open() {
    this._offset.value = 1;
  }

  close() {
    this._offset.value = 0;
  }

  draw() {
    this.uniform("uOffset", this._offset.value);
    super.draw();
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawSwarm);

/***/ }),

/***/ "./src/js/DrawSwarmSave.js":
/*!*********************************!*\
  !*** ./src/js/DrawSwarmSave.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var shaders_save_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shaders/save.vert */ "./src/shaders/save.vert");
/* harmony import */ var shaders_save_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shaders/save.frag */ "./src/shaders/save.frag");







class DrawSwarmSave extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"] {
  constructor() {
    super();
    const {
      numSwarm: num,
      maxHeight
    } = _Config__WEBPACK_IMPORTED_MODULE_1__["default"];
    const positions = [];
    const uvs = [];
    const normals = [];
    const datas = [];
    const indices = [];

    const getPos = () => {
      const r = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(5, 10);
      const a = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(Math.PI * 2);
      const x = Math.cos(a) * r;
      const z = Math.sin(a) * r;
      const y = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["random"])(0, maxHeight);
      return [x, y, z];
    };

    const getCircPos = () => {
      return [Math.random(), Math.random(), Math.random()];
    };

    let index = 0;

    for (let i = 0; i < num; i++) {
      for (let j = 0; j < num; j++) {
        positions.push(getPos());
        uvs.push([i / num * 2 - 1, j / num * 2 - 1]);
        normals.push([Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["randomGaussian"])(), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["randomGaussian"])(), Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["randomGaussian"])()]);
        datas.push(getCircPos());
        indices.push(index++);
      }
    }

    const mesh = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Mesh"](alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].POINTS).bufferVertex(positions).bufferTexCoord(uvs).bufferNormal(normals).bufferData(datas, "aData", 3).bufferIndex(indices);
    this.setMesh(mesh).useProgram(shaders_save_vert__WEBPACK_IMPORTED_MODULE_4__["default"], shaders_save_frag__WEBPACK_IMPORTED_MODULE_5__["default"]).setClearColor(0, 0, 0, 1);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (DrawSwarmSave);

/***/ }),

/***/ "./src/js/SceneApp.js":
/*!****************************!*\
  !*** ./src/js/SceneApp.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/js/utils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var scheduling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduling */ "./node_modules/scheduling/build/scheduler.js");
/* harmony import */ var _States__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./States */ "./src/js/States.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Assets */ "./src/js/Assets.js");
/* harmony import */ var _ARUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ARUtils */ "./src/js/ARUtils.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _utils_TouchScale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/TouchScale */ "./src/js/utils/TouchScale.js");
/* harmony import */ var _DrawMark__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DrawMark */ "./src/js/DrawMark.js");
/* harmony import */ var _DrawButterflies__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./DrawButterflies */ "./src/js/DrawButterflies.js");
/* harmony import */ var _DrawSave__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DrawSave */ "./src/js/DrawSave.js");
/* harmony import */ var _DrawFilmGrain__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DrawFilmGrain */ "./src/js/DrawFilmGrain.js");
/* harmony import */ var _SceneIntro__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./SceneIntro */ "./src/js/SceneIntro.js");
/* harmony import */ var _SceneSwarm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./SceneSwarm */ "./src/js/SceneSwarm.js");
/* harmony import */ var shaders_basic_vert__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! shaders/basic.vert */ "./src/shaders/basic.vert");
/* harmony import */ var shaders_floor_vert__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! shaders/floor.vert */ "./src/shaders/floor.vert");
/* harmony import */ var shaders_sculpture_frag__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! shaders/sculpture.frag */ "./src/shaders/sculpture.frag");
/* harmony import */ var shaders_floor_frag__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! shaders/floor.frag */ "./src/shaders/floor.frag");
/* harmony import */ var shaders_pass_vert__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! shaders/pass.vert */ "./src/shaders/pass.vert");
/* harmony import */ var shaders_sim_frag__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! shaders/sim.frag */ "./src/shaders/sim.frag");






















let hasSaved = false;
let canSave = false;
const DEFAULT_Y = 0.25;
const RAD = Math.PI / 180;

class SceneApp extends alfrid__WEBPACK_IMPORTED_MODULE_0__["Scene"] {
  constructor() {
    super();
    Object(_States__WEBPACK_IMPORTED_MODULE_4__["onStateChange"])(o => this._onStateChange(o)); // camera

    this.orbitalControl.rx.setTo(-0.1);
    this.orbitalControl.ry.setTo(0.1);
    this.orbitalControl.radius.setTo(0.8);
    this.orbitalControl.rx.limit(-0.25, Math.PI / 2);
    this.orbitalControl.radius.limit(0.1, 0.8);
    this.camera.setPerspective(_Config__WEBPACK_IMPORTED_MODULE_5__["default"].fov * RAD, alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].aspectRatio, 0.1, 100); // hit

    this._mtxHit = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].translate(this._mtxHit, this._mtxHit, [0, -DEFAULT_Y, 0]);
    this._posHit = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create();
    this._posHitFront = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create();
    this._posCam = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create();
    this._dirFront = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create();
    this._dirCam = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create(); // states

    this._offsetHit = new alfrid__WEBPACK_IMPORTED_MODULE_0__["EaseNumber"](0);
    this._offsetOpen = new alfrid__WEBPACK_IMPORTED_MODULE_0__["EaseNumber"](1);
    this._offsetColor = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](0, "linear", 0.01); // TODO Remove this

    this._hasStarted = false;
    this._hasOpened = false;
    this._hasPresented = false;
    this._shouldSwarmOpen = false;
    this._isInTransition = false;
    this._colorIndex = Object(randomutils__WEBPACK_IMPORTED_MODULE_2__["randomFloor"])(0, 3);
    this._initAngle = 0;
    this._offsetCircle = new alfrid__WEBPACK_IMPORTED_MODULE_0__["EaseNumber"](0, 0.01);
    window.addEventListener("keydown", e => {
      e.code === "Space" && this._hasOpened && !this._isInTransition && this.toggleState();
    });
    this._container = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Object3D"]();
    this._container.y = 0.001;
    this._container.scaleX = this._container.scaleY = this._container.scaleZ = 0.1;
    this._containerSculpture = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Object3D"]();
    this._containerSculpture.rotationY = -Math.PI / 2;

    this._container.addChild(this._containerSculpture);

    this._containerSwarm = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Object3D"]();

    this._container.addChild(this._containerSwarm);

    this._containerBufferfly = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Object3D"]();
    this._containerBufferfly.scaleX = this._containerBufferfly.scaleY = this._containerBufferfly.scaleZ = 0.5;

    this._container.addChild(this._containerBufferfly);

    this._containerBufferfly.y = 4;
    this._touchScale = new _utils_TouchScale__WEBPACK_IMPORTED_MODULE_9__["default"](this._container.scaleX);
    this._touchScale.sensitivity = 0.1;
    this._seed = Math.random() * 0xff; // set size

    this.resize();

    this._drawBufferflies.open();

    this._timeTouchStart = 0;
    window.addEventListener("touchstart", e => this._onTouchStart());
    window.addEventListener("touchend", e => this._onTouchEnd());
  }

  setXREnterframe() {
    console.log("set enter frame, isARSupported", _ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]);

    if (_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]) {
      Object(_ARUtils__WEBPACK_IMPORTED_MODULE_7__["onEnterFrame"])(() => this._render());
    }

    this._render();
  }

  toggleState() {
    this._isInTransition = true;
    const state = Object(_States__WEBPACK_IMPORTED_MODULE_4__["getState"])();
    Object(_States__WEBPACK_IMPORTED_MODULE_4__["setState"])(state === _States__WEBPACK_IMPORTED_MODULE_4__["States"].CIRCLING ? _States__WEBPACK_IMPORTED_MODULE_4__["States"].SWARMING : _States__WEBPACK_IMPORTED_MODULE_4__["States"].CIRCLING);
  }

  updateFov() {
    this.camera.setPerspective(_Config__WEBPACK_IMPORTED_MODULE_5__["default"].fov * RAD, alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].aspectRatio, 0.1, 100);
  }

  present() {
    this._drawBufferflies.close(true);

    this._touchScale.setTo(0.3);

    this._offsetOpen.setTo(0);

    this._hasPresented = true;
  }

  _initTextures() {
    const {
      numParticles: num
    } = _Config__WEBPACK_IMPORTED_MODULE_5__["default"];
    const type = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["iOS"])() ? alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].HALF_FLOAT : alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].FLOAT;
    const oSettings = {
      type,
      minFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].NEAREST,
      magFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].NEAREST
    };
    this._fbo = new alfrid__WEBPACK_IMPORTED_MODULE_0__["FboPingPong"](num, num, oSettings, 4);
  }

  _initViews() {
    this._dCopy = new alfrid__WEBPACK_IMPORTED_MODULE_0__["DrawCopy"]();
    this._dBall = new alfrid__WEBPACK_IMPORTED_MODULE_0__["DrawBall"]();
    this._dAxis = new alfrid__WEBPACK_IMPORTED_MODULE_0__["DrawAxis"]();
    this._dMark = new _DrawMark__WEBPACK_IMPORTED_MODULE_10__["default"]();
    const shader = new alfrid__WEBPACK_IMPORTED_MODULE_0__["GLShader"](shaders_basic_vert__WEBPACK_IMPORTED_MODULE_16__["default"], shaders_sculpture_frag__WEBPACK_IMPORTED_MODULE_18__["default"]);
    this._drawHead = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"]().setMesh(_Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("head")).useProgram(shader).bindTexture("texture", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("head_map"), 0);
    this._drawHand = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"]().setMesh(_Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("hand")).useProgram(shader).bindTexture("texture", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("hand_map"), 0);
    this._drawFloor = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"]().setMesh(_Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("plane")).useProgram(shaders_floor_vert__WEBPACK_IMPORTED_MODULE_17__["default"], shaders_floor_frag__WEBPACK_IMPORTED_MODULE_19__["default"]).bindTexture("uMap", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get("Floor_map"), 0);
    this._drawBufferflies = new _DrawButterflies__WEBPACK_IMPORTED_MODULE_11__["default"](); // particles

    new _DrawSave__WEBPACK_IMPORTED_MODULE_12__["default"]().setClearColor(0, 0, 0, 1).bindFrameBuffer(this._fbo.read).draw();
    this._drawSim = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"]().setMesh(alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].bigTriangle()).useProgram(shaders_pass_vert__WEBPACK_IMPORTED_MODULE_20__["default"], shaders_sim_frag__WEBPACK_IMPORTED_MODULE_21__["default"]).uniform("uNum", parseInt(_Config__WEBPACK_IMPORTED_MODULE_5__["default"].numParticles)).uniform("uCenter", 0).setClearColor(0, 0, 0, 1);
    this._sceneSwarm = new _SceneSwarm__WEBPACK_IMPORTED_MODULE_15__["default"]();
    this._sceneIntro = new _SceneIntro__WEBPACK_IMPORTED_MODULE_14__["default"]();
    this._drawFilmGrain = new _DrawFilmGrain__WEBPACK_IMPORTED_MODULE_13__["default"]();
  }

  _onStateChange(o) {
    // console.log("state change", o, "isARSupported", isARSupported);
    const durMul = _ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"] ? 1.5 : 1.0;

    if (o === _States__WEBPACK_IMPORTED_MODULE_4__["States"].CIRCLING) {
      setTimeout(() => {
        this._offsetCircle.setTo(1);

        setTimeout(() => {
          this._isInTransition = false;
        }, 1000);
      }, 4000 * durMul);
    } else if (o === _States__WEBPACK_IMPORTED_MODULE_4__["States"].SWARMING) {
      setTimeout(() => {
        this._offsetCircle.setTo(0);

        setTimeout(() => {
          this._isInTransition = false;
        }, 1000);
      }, 2000 * durMul);
    }
  }

  _onTouchStart() {
    this._timeTouchStart = new Date().getTime();
    if (!_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]) return;

    if (this._hasOpened && !this._isInTransition) {
      this.toggleState();
      return;
    }

    if (this._hasStarted) {
      return;
    }

    const mtxHit = Object(_ARUtils__WEBPACK_IMPORTED_MODULE_7__["hitTest"])();

    if (mtxHit !== null) {
      gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].copy(this._mtxHit, mtxHit);
      this._hasStarted = true;
      this._offsetHit.value = 0.0;
      this._offsetOpen.value = 1;

      this._drawBufferflies.open();

      Object(_States__WEBPACK_IMPORTED_MODULE_4__["setState"])(_States__WEBPACK_IMPORTED_MODULE_4__["States"].LANDED);
    }
  }

  _onTouchEnd() {
    const THRESHOLD = 300;
    let timeTouch, delta;
    if (_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]) return;
    timeTouch = new Date().getTime();
    delta = timeTouch - this._timeTouchStart;
    if (delta < THRESHOLD) this.toggleState();
  }

  _checkHit() {
    if (!this._hasStarted) {
      const mtxHit = Object(_ARUtils__WEBPACK_IMPORTED_MODULE_7__["hitTest"])();

      if (mtxHit !== null) {
        this._offsetHit.value = 1;
        gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].copy(this._mtxHit, mtxHit);
        Object(_States__WEBPACK_IMPORTED_MODULE_4__["setState"])(_States__WEBPACK_IMPORTED_MODULE_4__["States"].INTRO);
      }
    }
  }

  update() {
    this._containerSwarm.rotationX = this._offsetCircle.value * Math.PI / 2;
    this._container.scaleX = this._container.scaleY = this._container.scaleZ = this._touchScale.value;
    const mtx = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].mul(mtx, this._mtxHit, this._containerSwarm.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mtx);

    if (this._drawBufferflies.isShowing) {
      this._drawSim.bindFrameBuffer(this._fbo.write).bindTexture("uPosMap", this._fbo.read.getTexture(0), 0).bindTexture("uVelMap", this._fbo.read.getTexture(1), 1).bindTexture("uExtraMap", this._fbo.read.getTexture(2), 2).bindTexture("uDataMap", this._fbo.read.getTexture(3), 3).uniform("uTime", "float", scheduling__WEBPACK_IMPORTED_MODULE_3__["default"].getElapsedTime() + this._seed).draw();

      this._fbo.swap();
    }

    this._sceneSwarm.update(mtx, this._mtxHit);

    _ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"] && this._sceneIntro.update(this._mtxHit);
  }

  _checkSwarm() {
    if (_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"] && !this._hasPresented) {
      return;
    }

    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].transformMat4(this._posHit, [0, 0, 0], this._mtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].transformMat4(this._posHitFront, [0, 0, 1], this._mtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].sub(this._dirFront, this._posHitFront, this._posHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].normalize(this._dirFront, this._dirFront);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].copy(this._posCam, this.camera.position);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].sub(this._dirCam, this.camera.position, this._posHit);
    this._dirCam[1] *= 0.0;
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].normalize(this._dirCam, this._dirCam);
    const vDiff = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].sub(vDiff, this._dirCam, this._dirFront);

    if (gl_matrix__WEBPACK_IMPORTED_MODULE_8__["vec3"].length(vDiff) === 0) {
      return;
    }

    const theta = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["angleBetween"])(this._dirCam, this._dirFront);

    if (_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"] && !this._hasStarted) {
      this._initAngle = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["DEGREE"])(theta);

      if (isNaN(this._initAngle)) {
        this._initAngle = 0;
      }

      return;
    }

    const t = Math.abs(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["DEGREE"])(theta) - this._initAngle);
    const shouldSwarmOpen = t > _Config__WEBPACK_IMPORTED_MODULE_5__["default"].thresholdOpen;

    if (shouldSwarmOpen !== this._shouldSwarmOpen && !this._isInTransition) {
      if (this._hasOpened) {
        this.toggleState();
      }

      if (!this._hasOpened && shouldSwarmOpen) {
        this._sceneSwarm.open();

        this._drawBufferflies.close();

        this._hasOpened = true;
      }

      this._shouldSwarmOpen = shouldSwarmOpen;
    }
  }

  render() {
    if (!_ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]) {
      this._render();
    }
  }

  _render() {
    let s;
    const bgColor = _Config__WEBPACK_IMPORTED_MODULE_5__["default"].bg.map(v => v / 255);

    if (!this._hasPresented) {
      const bgBr = 0.7;
      alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].clear(bgColor[0] * bgBr, bgColor[1] * bgBr, bgColor[2] * bgBr, 1);
    } else {
      Object(_ARUtils__WEBPACK_IMPORTED_MODULE_7__["setCamera"])(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"], this.camera);

      this._checkHit();
    }

    this._checkSwarm();

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(this._mtxHit);
    s = this._offsetHit.value * 0.005;

    this._dMark.uniform("uOffset", this._offsetHit.value).draw();

    const mtx = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].create();
    const mtxSculpture = gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].mul(mtx, this._mtxHit, this._container.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mtx);

    this._drawFloor.bindTexture("uDepthMap", this._sceneSwarm.shadowMap, 1).uniform("uIsPresenting", this._hasPresented ? 1.0 : 0.0).uniform("uOpacity", this._offsetOpen.value).uniform("uShadowMatrix", this._sceneSwarm.mtxShadow).uniform("uColor", bgColor).draw(); // GL.isMobile && this._sceneIntro.render(this._mtxHit);


    _ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"] && this._sceneIntro.render(this._mtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].mul(mtxSculpture, this._mtxHit, this._containerSculpture.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mtxSculpture);

    this._drawHand.uniform("uIsPresenting", this._hasPresented ? 1.0 : 0.0).uniform("uColor", bgColor).uniform("uOpacity", this._offsetOpen.value).draw();

    this._drawHead.uniform("uIsPresenting", this._hasPresented ? 1.0 : 0.0).uniform("uColor", bgColor).uniform("uOpacity", this._offsetOpen.value).draw();

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].disable(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].CULL_FACE);
    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].mul(mtx, this._mtxHit, this._containerBufferfly.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mtx);

    this._drawBufferflies.uniform("uTime", scheduling__WEBPACK_IMPORTED_MODULE_3__["default"].getElapsedTime()).uniform("uScale", _Config__WEBPACK_IMPORTED_MODULE_5__["default"].bufferflyScale).uniform("uColorOffset", this._offsetColor.value).bindTexture("uMap", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get(`butterfly`), 0).bindTexture("uColorMap", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get(`00${_Config__WEBPACK_IMPORTED_MODULE_5__["default"].colorIndex}`), 1).bindTexture("uPosMap", this._fbo.read.getTexture(0), 2).bindTexture("uVelMap", this._fbo.read.getTexture(1), 3).draw(); // draw swarm


    gl_matrix__WEBPACK_IMPORTED_MODULE_8__["mat4"].mul(mtx, this._mtxHit, this._containerSwarm.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mtx);

    this._sceneSwarm.render(this._offsetCircle.value);

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].enable(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].CULL_FACE);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].disable(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].DEPTH_TEST);

    this._drawFilmGrain.uniform("uRatio", alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].aspectRatio).uniform("uRandom", Math.random() * 2).uniform("uStrength", _Config__WEBPACK_IMPORTED_MODULE_5__["default"].filmGrainStrength).draw();

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].enable(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].DEPTH_TEST);
    s = 256;
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].viewport(0, 0, s, s); // this._dCopy.draw(this._sceneSwarm.shadowMap);
    // this._dCopy.draw(this._sceneSwarm.fbo.read.getTexture(0));
    // GL.viewport(s, 0, s, s);
    // this._dCopy.draw(this._sceneSwarm.fbo.write.getTexture(0));

    if (canSave && !hasSaved && _Config__WEBPACK_IMPORTED_MODULE_5__["default"].autoSave) {
      Object(_utils__WEBPACK_IMPORTED_MODULE_1__["saveImage"])(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].canvas, Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getDateString"])());
      hasSaved = true;
    }

    if (!this._hasPresented && _ARUtils__WEBPACK_IMPORTED_MODULE_7__["isARSupported"]) {
      requestAnimationFrame(() => this._render());
    }
  }

  resize() {
    if (alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].isMobile || !_Config__WEBPACK_IMPORTED_MODULE_5__["default"].autoSave) {
      const {
        innerWidth,
        innerHeight
      } = window;
      Object(_utils__WEBPACK_IMPORTED_MODULE_1__["resize"])(innerWidth, innerHeight);
      this.camera.setAspectRatio(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].aspectRatio);
    } else {
      const pixelRatio = _Config__WEBPACK_IMPORTED_MODULE_5__["default"].savePixelRatio;
      Object(_utils__WEBPACK_IMPORTED_MODULE_1__["resize"])(1080 * pixelRatio, 1350 * pixelRatio);
      this.camera.setAspectRatio(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].aspectRatio);
    }
  }

}

/* harmony default export */ __webpack_exports__["default"] = (SceneApp);

/***/ }),

/***/ "./src/js/SceneIntro.js":
/*!******************************!*\
  !*** ./src/js/SceneIntro.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _States__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./States */ "./src/js/States.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! randomutils */ "./node_modules/randomutils/index.js");
/* harmony import */ var randomutils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(randomutils__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var scheduling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! scheduling */ "./node_modules/scheduling/build/scheduler.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Assets */ "./src/js/Assets.js");
/* harmony import */ var shaders_butterflySingle_vert__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shaders/butterflySingle.vert */ "./src/shaders/butterflySingle.vert");
/* harmony import */ var shaders_butterflySingle_frag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shaders/butterflySingle.frag */ "./src/shaders/butterflySingle.frag");






 // shaders




class SceneIntro {
  constructor() {
    this._offset = new alfrid__WEBPACK_IMPORTED_MODULE_1__["TweenNumber"](0, "circInOut", 0.01);
    this._drawBall = new alfrid__WEBPACK_IMPORTED_MODULE_1__["DrawBall"]();
    this._target = gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
    this._pos = gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
    this._posPrev = gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
    this._dir = gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
    this._containerButterfly = new alfrid__WEBPACK_IMPORTED_MODULE_1__["Object3D"](); // butterfly

    let s = 0.1;
    let u = Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomFloor"])(0, 2) / 2;
    let v = Object(randomutils__WEBPACK_IMPORTED_MODULE_3__["randomFloor"])(0, 3) / 3;
    const mesh = alfrid__WEBPACK_IMPORTED_MODULE_1__["Geom"].plane(s, s, 40, "xz");
    this._drawButterfly = new alfrid__WEBPACK_IMPORTED_MODULE_1__["Draw"]().setMesh(mesh).useProgram(shaders_butterflySingle_vert__WEBPACK_IMPORTED_MODULE_7__["default"], shaders_butterflySingle_frag__WEBPACK_IMPORTED_MODULE_8__["default"]).uniform("uRandom", [Math.random(), Math.random(), Math.random()]).uniform("uUVScale", [1 / 2, 1 / 3]).uniform("uUVOffset", [u, v]).bindTexture("uMap", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get(`butterfly`), 0); // closing

    Object(_States__WEBPACK_IMPORTED_MODULE_0__["onStateChange"])(o => {
      if (o === _States__WEBPACK_IMPORTED_MODULE_0__["States"].INTRO) {
        this.open();
      } else if (o === _States__WEBPACK_IMPORTED_MODULE_0__["States"].LANDED) {
        this.close();
      }
    });
  }

  open() {
    this._offset.value = 1;
  }

  close() {
    this._offset.value = 0;
  }

  update(mtxHit) {
    const t = scheduling__WEBPACK_IMPORTED_MODULE_4__["default"].getElapsedTime() * 1.1;
    const r = 0.5;
    const x = Math.sin(t) * 2 * r;
    const z = Math.cos(t * 3) * r;
    gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].set(this._target, x, 0, z);

    if (alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].isMobile) {
      gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].transformMat4(this._target, [0, 0, 0], mtxHit);
    }

    const ease = 0.02;
    gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].copy(this._posPrev, this._pos);
    this._pos[0] += (this._target[0] - this._pos[0]) * ease;
    this._pos[2] += (this._target[2] - this._pos[2]) * ease; // position

    this._containerButterfly.x = this._pos[0];
    this._containerButterfly.y = this._pos[1] - 0.2;
    this._containerButterfly.z = this._pos[2]; // rotation

    gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].sub(this._dir, this._pos, this._posPrev);

    if (gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].length(this._dir) > 0) {
      gl_matrix__WEBPACK_IMPORTED_MODULE_2__["vec3"].normalize(this._dir, this._dir);
      const theta = Math.atan2(this._dir[0], this._dir[2]) + Math.PI;
      this._containerButterfly.rotationY = theta;
    } else {
      this._containerButterfly.rotationY = 0;
    }
  }

  render() {
    alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].setModelMatrix(gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].create());
    alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].setModelMatrix(this._containerButterfly.matrix);
    alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].disable(alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].CULL_FACE);

    this._drawButterfly.bindTexture("uColorMap", _Assets__WEBPACK_IMPORTED_MODULE_6__["default"].get(`00${_Config__WEBPACK_IMPORTED_MODULE_5__["default"].colorIndex}`), 1).uniform("uTime", scheduling__WEBPACK_IMPORTED_MODULE_4__["default"].getElapsedTime()).uniform("uOffset", this._offset.value).draw();

    alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].enable(alfrid__WEBPACK_IMPORTED_MODULE_1__["GL"].CULL_FACE);
    return;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (SceneIntro);

/***/ }),

/***/ "./src/js/SceneSwarm.js":
/*!******************************!*\
  !*** ./src/js/SceneSwarm.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/js/utils/index.js");
/* harmony import */ var _ARUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ARUtils */ "./src/js/ARUtils.js");
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Assets */ "./src/js/Assets.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var _DrawSwarm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DrawSwarm */ "./src/js/DrawSwarm.js");
/* harmony import */ var _States__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./States */ "./src/js/States.js");
/* harmony import */ var _DrawSwarmSave__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DrawSwarmSave */ "./src/js/DrawSwarmSave.js");
/* harmony import */ var _DrawDebug__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DrawDebug */ "./src/js/DrawDebug.js");
/* harmony import */ var scheduling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! scheduling */ "./node_modules/scheduling/build/scheduler.js");
/* harmony import */ var shaders_pass_vert__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shaders/pass.vert */ "./src/shaders/pass.vert");
/* harmony import */ var shaders_swarmSim_frag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! shaders/swarmSim.frag */ "./src/shaders/swarmSim.frag");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");













const INCREASED_SPEED = 3;

class SceneSwarm {
  constructor() {
    this._drawSwarm = new _DrawSwarm__WEBPACK_IMPORTED_MODULE_5__["default"](); // init

    const {
      numSwarm: num
    } = _Config__WEBPACK_IMPORTED_MODULE_4__["default"];
    console.log("Swarm size :", num);
    const type = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["iOS"])() ? alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].HALF_FLOAT : alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].FLOAT;
    const oSettings = {
      type,
      minFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].NEAREST,
      magFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].NEAREST
    };
    this._seed = Math.random() * 0xff;
    this._centerCircling = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].fromValues(0.0, 1.5, -1.0);
    this._fbo = new alfrid__WEBPACK_IMPORTED_MODULE_0__["FboPingPong"](num, num, oSettings, 4);
    const fboSize = 1024 * 2;
    this._fboShadow = new alfrid__WEBPACK_IMPORTED_MODULE_0__["FrameBuffer"](fboSize, fboSize, {
      minFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].LINEAR,
      magFilter: alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].LINEAR
    });

    this._fboShadow.bind();

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].clear(0, 0, 0, 1);

    this._fboShadow.unbind();

    this._drawSave = new _DrawSwarmSave__WEBPACK_IMPORTED_MODULE_7__["default"]().setClearColor(0, 0, 0, 1).bindFrameBuffer(this._fbo.read).draw();
    this._drawDebug = new _DrawDebug__WEBPACK_IMPORTED_MODULE_8__["default"]();
    this._drawSim = new alfrid__WEBPACK_IMPORTED_MODULE_0__["Draw"]().setMesh(alfrid__WEBPACK_IMPORTED_MODULE_0__["Geom"].bigTriangle()).useProgram(shaders_pass_vert__WEBPACK_IMPORTED_MODULE_10__["default"], shaders_swarmSim_frag__WEBPACK_IMPORTED_MODULE_11__["default"]).uniform("uMaxHeight", _Config__WEBPACK_IMPORTED_MODULE_4__["default"].maxHeight).setClearColor(0, 0, 0, 1); // shadow

    const r = 2;
    this._cameraLight = new alfrid__WEBPACK_IMPORTED_MODULE_0__["CameraOrtho"]();

    this._cameraLight.ortho(-r, r, r, -r, 1, 5);

    this._cameraPos = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].fromValues(0, 2, 0.5);
    this._cameraTarget = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].fromValues(0, 0, -0.3);
    this._mtxShadow = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["mat4"].create();
    const mul = _ARUtils__WEBPACK_IMPORTED_MODULE_2__["isARSupported"] ? 1.75 : 1;
    this._swarmBrightness = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](0, "quinticIn", 0.005 * mul); // this._offsetCircle = new EaseNumber(0, 0.02 * mul);

    this._offsetCircle = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](0, "circularInOut", 0.01 * mul);
    this._speed = new alfrid__WEBPACK_IMPORTED_MODULE_0__["TweenNumber"](1, "cubicIn", 0.01 * mul);
    Object(_States__WEBPACK_IMPORTED_MODULE_6__["onStateChange"])(o => {
      if (o === _States__WEBPACK_IMPORTED_MODULE_6__["States"].CIRCLING) {
        this.circling();
      } else if (o === _States__WEBPACK_IMPORTED_MODULE_6__["States"].SWARMING) {
        this.swarming();
      }
    }); // debug

    this._light = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].create();
    this._center = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].create();
    this._drawBall = new alfrid__WEBPACK_IMPORTED_MODULE_0__["DrawBall"]();
    this._drawCamera = new alfrid__WEBPACK_IMPORTED_MODULE_0__["DrawCamera"]();
  }

  circling() {
    const mulDur = _ARUtils__WEBPACK_IMPORTED_MODULE_2__["isARSupported"] ? 1.75 : 1;
    this._speed.easing = "circularIn";
    this._offsetCircle.value = 1;
    this._swarmBrightness.value = 1;
    this._speed.value = INCREASED_SPEED;
    setTimeout(() => this.close(), 2300 * mulDur);
    setTimeout(() => {
      this.reset();

      this._offsetCircle.setTo(0);

      this._swarmBrightness.setTo(0);

      this._speed.easing = "circularOut";

      this._speed.setTo(5);

      this._speed.value = 1;
      this.open();
    }, 4000 * mulDur);
  }

  swarming() {
    const mulDur = _ARUtils__WEBPACK_IMPORTED_MODULE_2__["isARSupported"] ? 1.75 : 1;
    setTimeout(() => this.close(), 500 * mulDur);
    this._speed.easing = "circularOut";
    this._speed.value = INCREASED_SPEED;
    setTimeout(() => {
      this.reset();
      this._speed.easing = "circularInOut";

      this._speed.setTo(5);

      this._speed.value = 1;
      this.open();
    }, 2000 * mulDur);
  }

  open() {
    this._drawSwarm.open();
  }

  close() {
    this._drawSwarm.close();
  }

  reset() {
    this._drawSave.setClearColor(0, 0, 0, 1).bindFrameBuffer(this._fbo.read).draw();
  }

  update(mMtx, mMtxHit) {
    const s = mMtx[0]; // console.log("scale", s);

    const r = 12 * s;
    this._cameraLight = new alfrid__WEBPACK_IMPORTED_MODULE_0__["CameraOrtho"]();

    this._cameraLight.ortho(-r, r, r, -r, 1 * s, 30 * s);

    const camPos = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].create();
    const camTarget = gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].transformMat4(camPos, this._cameraPos, mMtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].transformMat4(camTarget, this._cameraTarget, mMtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].transformMat4(this._light, this._cameraPos, mMtxHit);
    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["vec3"].transformMat4(this._center, [0, 0, 0], mMtxHit);

    this._cameraLight.lookAt(camPos, camTarget);

    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["mat4"].mul(this._mtxShadow, this._cameraLight.projection, this._cameraLight.view);
    gl_matrix__WEBPACK_IMPORTED_MODULE_12__["mat4"].mul(this._mtxShadow, _utils__WEBPACK_IMPORTED_MODULE_1__["biasMatrix"], this._mtxShadow);

    this._drawSim.bindFrameBuffer(this._fbo.write).bindTexture("uPosMap", this._fbo.read.getTexture(0), 0).bindTexture("uVelMap", this._fbo.read.getTexture(1), 1).bindTexture("uExtraMap", this._fbo.read.getTexture(2), 2).bindTexture("uDataMap", this._fbo.read.getTexture(3), 3).uniform("uTime", "float", scheduling__WEBPACK_IMPORTED_MODULE_9__["default"].getElapsedTime() + this._seed).uniform("uOffsetCircle", "float", this._offsetCircle.value).uniform("uSpeed", (_ARUtils__WEBPACK_IMPORTED_MODULE_2__["isARSupported"] ? 2 : 1.5) * this._speed.value).uniform("uCircleCenter", this._centerCircling).draw();

    this._fbo.swap();

    this._fboShadow.bind();

    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].clear(0, 0, 0, 1);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setMatrices(this._cameraLight);
    alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setModelMatrix(mMtx);

    this._drawButterflies(false);

    this._fboShadow.unbind();
  }

  _drawButterflies(mWithShadow) {
    const tShadow = mWithShadow ? this._fboShadow.depthTexture : this._fbo.read.getTexture(3);

    this._drawSwarm.bindTexture("uPosMap", this._fbo.read.getTexture(0), 0).bindTexture("uVelMap", this._fbo.read.getTexture(1), 1).bindTexture("uExtraMap", this._fbo.read.getTexture(2), 2).bindTexture("uDepthMap", tShadow, 3).bindTexture("uColorMap", _Assets__WEBPACK_IMPORTED_MODULE_3__["default"].get(`00${_Config__WEBPACK_IMPORTED_MODULE_4__["default"].colorIndex}`), 4).bindTexture("uMap", _Assets__WEBPACK_IMPORTED_MODULE_3__["default"].get(`butterfly`), 5).uniform("uShadowMatrix", this._mtxShadow).uniform("uTime", scheduling__WEBPACK_IMPORTED_MODULE_9__["default"].getElapsedTime()).uniform("uContrast", _Config__WEBPACK_IMPORTED_MODULE_4__["default"].contrast).uniform("uBrightness", _Config__WEBPACK_IMPORTED_MODULE_4__["default"].brightness).uniform("uBrCircling", this._swarmBrightness.value).uniform("uScale", _Config__WEBPACK_IMPORTED_MODULE_4__["default"].bufferflySwarmScale).uniform("uMaxHeight", _Config__WEBPACK_IMPORTED_MODULE_4__["default"].maxHeight).uniform("uCircleCenter", this._centerCircling).draw();
  }

  render(mOffsetCircle) {
    this._drawSwarm.uniform("uOffsetCircle", mOffsetCircle);

    this._drawButterflies(true); // const s = 0.05;
    // GL.setModelMatrix(mat4.create());
    // this._drawCamera.draw(this._cameraLight, [1, 0, 0]);
    // this._drawBall.draw(this._light, [s, s, s], [1, 0.5, 0]);
    // this._drawBall.draw(this._center, [s, s, s], [1, 0, 0]);

  }

  getTexture(mIndex) {
    return this._fbo.read.getTexture(mIndex);
  }

  get fbo() {
    return this._fbo;
  }

  get mtxShadow() {
    return this._mtxShadow;
  }

  get shadowMap() {
    return this._fboShadow.depthTexture;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (SceneSwarm);

/***/ }),

/***/ "./src/js/Settings.js":
/*!****************************!*\
  !*** ./src/js/Settings.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");
/* harmony import */ var fast_url_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-url-parser */ "./node_modules/fast-url-parser/src/urlparser.js");
/* harmony import */ var fast_url_parser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_url_parser__WEBPACK_IMPORTED_MODULE_1__);
// Settings.js


fast_url_parser__WEBPACK_IMPORTED_MODULE_1___default.a.queryString = __webpack_require__(/*! querystringparser */ "./node_modules/querystringparser/js/querystringparser.js");
let enabled = true;

const reload = () => {
  if (!enabled) {
    return;
  }

  window.location.href = window.location.origin + window.location.pathname + '?config=' + JSON.stringify(_Config__WEBPACK_IMPORTED_MODULE_0__["default"]);
};

const refresh = () => {
  if (!enabled) {
    return;
  }

  window.history.pushState('experiment', 'Title', window.location.origin + window.location.pathname + '?config=' + JSON.stringify(_Config__WEBPACK_IMPORTED_MODULE_0__["default"]));
};

const reset = () => {
  window.location.href = window.location.origin + window.location.pathname;
};

let delayIndex = -1;

const delayReload = () => {
  if (!enabled) {
    return;
  }

  window.clearTimeout(delayIndex);
  delayIndex = window.setTimeout(() => {
    window.location.href = window.location.origin + window.location.pathname + '?config=' + JSON.stringify(_Config__WEBPACK_IMPORTED_MODULE_0__["default"]);
  }, 500);
};

const init = (mEnabled = true) => {
  enabled = mEnabled;
  const parsed = fast_url_parser__WEBPACK_IMPORTED_MODULE_1___default.a.parse(window.location.search, true);
  let parsedJson = {};

  if (parsed.query.config) {
    parsedJson = JSON.parse(parsed.query.config);
  }

  Object.assign(_Config__WEBPACK_IMPORTED_MODULE_0__["default"], parsedJson);
  refresh();
};

/* harmony default export */ __webpack_exports__["default"] = ({
  enabled,
  reload,
  reset,
  refresh,
  delayReload,
  init
});

/***/ }),

/***/ "./src/js/States.js":
/*!**************************!*\
  !*** ./src/js/States.js ***!
  \**************************/
/*! exports provided: States, setState, onStateChange, getState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "States", function() { return States; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setState", function() { return setState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onStateChange", function() { return onStateChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getState", function() { return getState; });
/* harmony import */ var _objState_State__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objState/State */ "./src/js/objState/State.js");


const _state = new _objState_State__WEBPACK_IMPORTED_MODULE_0__["default"]({
  currentState: "init"
});

const setState = mState => {
  _state.setState({
    currentState: mState
  });
};

const getState = () => {
  return _state.currentState.value;
};

const onStateChange = mHandler => {
  _state.currentState.onChange(mHandler);
};

const States = {
  INIT: "init",
  INTRO: "intro",
  LANDED: "landed",
  CIRCLING: "circling",
  SWARMING: "swarming"
};


/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_global_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/global.scss */ "./src/scss/global.scss");
/* harmony import */ var _scss_global_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_global_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_Capture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Capture */ "./src/js/utils/Capture.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ARUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ARUtils */ "./src/js/ARUtils.js");
/* harmony import */ var _Settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Settings */ "./src/js/Settings.js");
/* harmony import */ var _SceneApp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SceneApp */ "./src/js/SceneApp.js");
/* harmony import */ var _utils_preload__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/preload */ "./src/js/utils/preload.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./src/js/utils/index.js");
/* harmony import */ var _debug_addControls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./debug/addControls */ "./src/js/debug/addControls.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Config */ "./src/js/Config.js");










let canvas;
let container;
let scene;

if (document.body) {
  _init();
} else {
  window.addEventListener("DOMContentLoaded", _init);
}

function _init() {
  Object(_utils_preload__WEBPACK_IMPORTED_MODULE_6__["default"])().then(_init3D, _utils__WEBPACK_IMPORTED_MODULE_7__["logError"]);
}

function _init3D() {
  canvas = document.createElement("canvas");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  container = document.querySelector(".container");
  container.appendChild(canvas);
  canvas.className = "Main-Canvas";
  const preserveDrawingBuffer =  true && !alfrid__WEBPACK_IMPORTED_MODULE_2__["GL"].isMobile;
  const webgl1 = false;
  alfrid__WEBPACK_IMPORTED_MODULE_2__["GL"].init(canvas, {
    webgl1,
    preserveDrawingBuffer
  });

  if (!alfrid__WEBPACK_IMPORTED_MODULE_2__["GL"].webgl2) {
    document.body.classList.add("no-webgl2");
    return;
  }

  if ( true && !_ARUtils__WEBPACK_IMPORTED_MODULE_3__["isARSupported"]) {
    _Settings__WEBPACK_IMPORTED_MODULE_4__["default"].init();
  }

  _Config__WEBPACK_IMPORTED_MODULE_9__["default"].numSwarm = alfrid__WEBPACK_IMPORTED_MODULE_2__["GL"].isMobile ? 64 : 128;
  scene = new _SceneApp__WEBPACK_IMPORTED_MODULE_5__["default"]();

  if (true) {
    Object(_debug_addControls__WEBPACK_IMPORTED_MODULE_8__["default"])(scene);
  }

  checkAR();
}

function checkAR() {
  _ARUtils__WEBPACK_IMPORTED_MODULE_3__["checkSupported"]().then(supported => {
    if (!supported) {
      document.body.classList.add("no-xr");
    } else {
      document.body.classList.add("has-xr");
      initStartButton();
    }
  });
  setTimeout(() => {
    document.body.classList.add("hide-messages");
  }, 5000);
}

function initStartButton() {
  scene.setXREnterframe();
  const btnAR = document.body.querySelector(".btnAR");
  btnAR.addEventListener("click", () => {
    _ARUtils__WEBPACK_IMPORTED_MODULE_3__["init"](alfrid__WEBPACK_IMPORTED_MODULE_2__["GL"].gl).then(gl => {
      container.removeChild(canvas);
      scene.present();
      _ARUtils__WEBPACK_IMPORTED_MODULE_3__["onSessionEnd"](() => {
        console.log("session end");
        window.location.reload();
      });
    });
  });
}

/***/ }),

/***/ "./src/js/asset-list.js":
/*!******************************!*\
  !*** ./src/js/asset-list.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const assetsToLoad = [{
  "id": "000",
  "url": "assets/img/000.jpg",
  "type": "jpg"
}, {
  "id": "001",
  "url": "assets/img/001.jpg",
  "type": "jpg"
}, {
  "id": "002",
  "url": "assets/img/002.jpg",
  "type": "jpg"
}, {
  "id": "003",
  "url": "assets/img/003.jpg",
  "type": "jpg"
}, {
  "id": "004",
  "url": "assets/img/004.jpg",
  "type": "jpg"
}, {
  "id": "005",
  "url": "assets/img/005.jpg",
  "type": "jpg"
}, {
  "id": "006",
  "url": "assets/img/006.jpg",
  "type": "jpg"
}, {
  "id": "007",
  "url": "assets/img/007.jpg",
  "type": "jpg"
}, {
  "id": "008",
  "url": "assets/img/008.jpg",
  "type": "jpg"
}, {
  "id": "009",
  "url": "assets/img/009.jpg",
  "type": "jpg"
}, {
  "id": "Floor_map",
  "url": "assets/img/Floor_map.jpg",
  "type": "jpg"
}, {
  "id": "butterfly",
  "url": "assets/img/butterfly.png",
  "type": "png"
}, {
  "id": "hand_map",
  "url": "assets/img/hand_map.jpg",
  "type": "jpg"
}, {
  "id": "head_map",
  "url": "assets/img/head_map.jpg",
  "type": "jpg"
}, {
  "id": "noise",
  "url": "assets/img/noise.jpg",
  "type": "jpg"
}, {
  "id": "backdrop",
  "url": "assets/obj/backdrop.obj",
  "type": "text"
}, {
  "id": "hand",
  "url": "assets/obj/hand.obj",
  "type": "text"
}, {
  "id": "head",
  "url": "assets/obj/head.obj",
  "type": "text"
}, {
  "id": "plane",
  "url": "assets/obj/plane.obj",
  "type": "text"
}];
/* harmony default export */ __webpack_exports__["default"] = (assetsToLoad);

/***/ }),

/***/ "./src/js/debug/addControls.js":
/*!*************************************!*\
  !*** ./src/js/debug/addControls.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Settings */ "./src/js/Settings.js");
/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Config */ "./src/js/Config.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/js/utils/index.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ARUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ARUtils */ "./src/js/ARUtils.js");
// addControls.js






const addControls = scene => {
  if (!window.gui) {
    return;
  }

  const oControl = {
    save: () => {
      Object(_utils__WEBPACK_IMPORTED_MODULE_2__["saveJson"])(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "Settings");
    },
    webgl2: alfrid__WEBPACK_IMPORTED_MODULE_3__["GL"].webgl2.toString()
  };
  const {
    refresh,
    reload
  } = _Settings__WEBPACK_IMPORTED_MODULE_0__["default"];
  setTimeout(() => {
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "colorIndex", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).onFinishChange(refresh); // gui.add(Config, "savePixelRatio", [1, 1.5, 2]).onFinishChange(reload);
    // gui.add(Config, "meshDetail", [4, 5, 6, 7, 8]).onFinishChange(reload);
    // gui.add(Config, "bufferflyMap", [0, 1, 2]).onFinishChange(refresh);

    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "numParticles", [4, 8, 16, 32]).onFinishChange(reload);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "numSwarm", [16, 32, 50, 64, 80, 128, 256]).onFinishChange(reload);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "bufferflyScale", 0, 1).onFinishChange(refresh);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "bufferflySwarmScale", 0, 1).onFinishChange(refresh);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "contrast", 1, 5).onFinishChange(refresh);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "brightness", 0, 1).onFinishChange(refresh);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "filmGrainStrength", 0, 0.5).onFinishChange(refresh);
    gui.add(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "fov", 30, 160).step(1).onChange(() => {
      scene.updateFov();
      _Settings__WEBPACK_IMPORTED_MODULE_0__["default"].refresh();
    });
    gui.addColor(_Config__WEBPACK_IMPORTED_MODULE_1__["default"], "bg").onFinishChange(_Settings__WEBPACK_IMPORTED_MODULE_0__["default"].refresh); // gui.add(Config, "autoSave").onFinishChange(refresh);

    gui.add(oControl, "save").name("Save Settings");
    gui.add(_Settings__WEBPACK_IMPORTED_MODULE_0__["default"], "reset").name("Reset Default"); // gui.add(scene, "toggleState");
    // gui.add(scene._sceneSwarm, "reset");

    if (alfrid__WEBPACK_IMPORTED_MODULE_3__["GL"].isMobile) {
      dat.GUI.toggleHide();
    }
  }, 200);
};

/* harmony default export */ __webpack_exports__["default"] = (addControls);

/***/ }),

/***/ "./src/js/objState/Attribute.js":
/*!**************************************!*\
  !*** ./src/js/objState/Attribute.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
// Attribute.js


const equals = (a1, a2) => a1.length == a2.length && a1.every((v, i) => v === a2[i]);

class Attribute extends events__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"] {
  constructor(mName, mValue) {
    super();
    this._value = mValue;
    this._name = mName;
    this._isArray = !!mValue.every;
    this._changeBinds = [];
  }

  onChange(mCb) {
    this._changeBinds.push(mCb);
  }

  setValue(mValue) {
    let hasChanged = false;

    if (this._isArray) {
      hasChanged = !equals(mValue, this._value);
    } else {
      hasChanged = this._value !== mValue;
    }

    if (hasChanged) {
      this._value = mValue;

      this._changeBinds.forEach(cb => {
        cb(this._value);
      });

      this.emit('changed', this._value);
    }

    return hasChanged;
  }

  getValue() {
    return this._value;
  }

  set value(mValue) {
    this.setValue(mValue);
  }

  get value() {
    return this._value;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (Attribute);

/***/ }),

/***/ "./src/js/objState/State.js":
/*!**********************************!*\
  !*** ./src/js/objState/State.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Attribute */ "./src/js/objState/Attribute.js");
// State.js



const isObject = o => typeof o === "object" && !Array.isArray(o) && o.length === undefined;

class State extends events__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"] {
  constructor(mInitState = {}) {
    super();
    this._state = {};

    for (const s in mInitState) {
      if (!isObject(mInitState[s])) {
        this[s] = new _Attribute__WEBPACK_IMPORTED_MODULE_1__["default"](s, mInitState[s]);
        this._state[s] = this[s];
      } else {
        this[s] = new State(mInitState[s]);
        this._state[s] = this[s];
      }
    }

    this._changeBinds = [];
    this._addBinds = [];
  }

  onChange(mCb) {
    this._changeBinds.push(mCb);
  }

  onAdd(mCb) {
    this._addBinds.push(mCb);
  }

  setState(mNewState) {
    let hasChanged = false;
    let hasNewState = false;
    const stateChanged = {};
    const stateAdded = {};

    for (const s in mNewState) {
      if (this[s] === undefined) {
        if (!isObject(mNewState[s])) {
          this[s] = new _Attribute__WEBPACK_IMPORTED_MODULE_1__["default"](s, mNewState[s]);
        } else {
          this[s] = new State(mNewState[s]);
        }

        hasNewState = true;
        stateAdded[s] = mNewState[s];
      } else {
        if (!isObject(mNewState[s])) {
          const attrChanged = this[s].setValue(mNewState[s]);
          hasChanged = hasChanged || attrChanged;

          if (attrChanged) {
            stateChanged[s] = mNewState[s];
          }
        } else {
          const attrChanged = this[s].setState(mNewState[s]);

          if (attrChanged) {
            stateChanged[s] = mNewState[s];
          }
        }
      }
    }

    if (hasChanged) {
      this._changeBinds.forEach(cb => {
        cb(stateChanged);
      });

      this.emit("changed", stateChanged);
    }

    if (hasNewState) {
      this._addBinds.forEach(cb => {
        cb(stateAdded);
      });

      this.emit("added", stateAdded);
    }

    return hasChanged;
  }

  getState() {
    return this._state;
  }

  getValue() {
    const o = {};

    for (let s in this._state) {
      o[s] = this._state[s].getValue();
    }

    return o;
  }

  set value(mState) {
    return this.setState(mState);
  }

  get value() {
    return this.getValue();
  }

}

/* harmony default export */ __webpack_exports__["default"] = (State);

/***/ }),

/***/ "./src/js/utils/Capture.js":
/*!*********************************!*\
  !*** ./src/js/utils/Capture.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ "./src/js/utils/index.js");
// Capture.js



String.prototype.replaceAll = function (search, replacement) {
  var target = this;
  return target.replace(new RegExp(search, "g"), replacement);
};

const capture = () => {
  window.addEventListener("keydown", e => {
    let toCapture = false;

    if (window.navigator.userAgent.indexOf("Macintosh") > -1) {
      toCapture = e.keyCode === 83 && e.metaKey;
    } else {
      toCapture = e.keyCode === 83 && e.ctrlKey;
    }

    if (toCapture) {
      e.preventDefault();
      const date = new Date();
      let strDate = `${date.getFullYear()}.` + `${date.getMonth() + 1}.` + `${date.getDate()}-` + `${date.getHours()}.` + `${date.getMinutes()}.` + `${date.getSeconds()}`;
      Object(___WEBPACK_IMPORTED_MODULE_1__["saveImage"])(alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].canvas, strDate);
    }
  });
};

/* harmony default export */ __webpack_exports__["default"] = (capture());

/***/ }),

/***/ "./src/js/utils/TouchScale.js":
/*!************************************!*\
  !*** ./src/js/utils/TouchScale.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_1__);



const getTouchPos = (e, i) => {
  return [e.touches[i].pageX, e.touches[i].pageY];
};

class TouchScale {
  constructor(mScale = 1) {
    this._isScaling = false;
    this._scale = new alfrid__WEBPACK_IMPORTED_MODULE_1__["EaseNumber"](mScale);
    this._initDistance = 0;
    this._initScale = 1;
    this.sensitivity = 1;
    window.addEventListener("touchstart", e => this._onTouchStart(e));
    window.addEventListener("touchend", e => this._onTouchStart(e));
    window.addEventListener("touchmove", e => this._onTouchMove(e));
  }

  _onTouchStart(e) {
    if (e.touches.length < 2) {
      this._isScaling = false;
      return;
    }

    this._initScale = this._scale.value;
    const a = getTouchPos(e, 0);
    const b = getTouchPos(e, 1);
    this._initDistance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].distance(a, b);
    this._isScaling = true;
  }

  _onTouchMove(e) {
    if (e.touches.length < 2) {
      this._isScaling = false;
      return;
    }

    const a = getTouchPos(e, 0);
    const b = getTouchPos(e, 1);
    const dist = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].distance(a, b);
    const delta = dist - this._initDistance;
    this._scale.value = this._initScale + delta * 0.01 * this.sensitivity;
  }

  setTo(mValue) {
    this._scale.setTo(mValue);
  }

  _onTouchEnd() {}

  get value() {
    return this._scale.value;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (TouchScale);

/***/ }),

/***/ "./src/js/utils/getDateString.js":
/*!***************************************!*\
  !*** ./src/js/utils/getDateString.js ***!
  \***************************************/
/*! exports provided: getDateString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDateString", function() { return getDateString; });
const getDateString = () => {
  const date = new Date();
  const strDate = `${date.getFullYear()}.` + `${date.getMonth() + 1}.` + `${date.getDate()}-` + `${date.getHours()}.` + `${date.getMinutes()}.` + `${date.getSeconds()}`;
  return strDate;
};



/***/ }),

/***/ "./src/js/utils/index.js":
/*!*******************************!*\
  !*** ./src/js/utils/index.js ***!
  \*******************************/
/*! exports provided: saveImage, saveJson, resize, getDateString, logError, biasMatrix, definesToString, angleBetween, DEGREE, RAD, iOS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logError", function() { return logError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "biasMatrix", function() { return biasMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "definesToString", function() { return definesToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angleBetween", function() { return angleBetween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEGREE", function() { return DEGREE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RAD", function() { return RAD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iOS", function() { return iOS; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _saveImage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./saveImage */ "./src/js/utils/saveImage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "saveImage", function() { return _saveImage__WEBPACK_IMPORTED_MODULE_1__["saveImage"]; });

/* harmony import */ var _saveJson__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./saveJson */ "./src/js/utils/saveJson.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "saveJson", function() { return _saveJson__WEBPACK_IMPORTED_MODULE_2__["saveJson"]; });

/* harmony import */ var _resizeCanavs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resizeCanavs */ "./src/js/utils/resizeCanavs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return _resizeCanavs__WEBPACK_IMPORTED_MODULE_3__["resize"]; });

/* harmony import */ var _getDateString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getDateString */ "./src/js/utils/getDateString.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDateString", function() { return _getDateString__WEBPACK_IMPORTED_MODULE_4__["getDateString"]; });

// index.js





const logError = e => {
  console.error(e);
};
const biasMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat4"].fromValues(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);
const definesToString = defines => {
  let outStr = "";

  for (const def in defines) {
    if (defines[def]) {
      outStr += "#define " + def + " " + defines[def] + "\n";
    }
  }

  return outStr;
};
const angleBetween = (mA, mB) => {
  const dotValue = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].dot(mA, mB);
  return Math.acos(dotValue);
};
const DEGREE = mValue => {
  return Math.floor(mValue * 180 / Math.PI);
};
const RAD = mValue => {
  return mValue * Math.PI / 180;
};
const iOS = () => {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes("Mac") && "ontouchend" in document;
};

/***/ }),

/***/ "./src/js/utils/preload.js":
/*!*********************************!*\
  !*** ./src/js/utils/preload.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _asset_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../asset-list */ "./src/js/asset-list.js");
/* harmony import */ var _Assets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Assets */ "./src/js/Assets.js");
/* harmony import */ var assets_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! assets-loader */ "./node_modules/assets-loader/src/index.js");
/* harmony import */ var assets_loader__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(assets_loader__WEBPACK_IMPORTED_MODULE_2__);
// preload.js




const loadAssets = gl => new Promise((resolve, reject) => {
  const loader = document.body.querySelector(".Loading-Bar");
  console.log("Load Assets", _asset_list__WEBPACK_IMPORTED_MODULE_0__["default"]);

  if (_asset_list__WEBPACK_IMPORTED_MODULE_0__["default"].length > 0) {
    document.body.classList.add("isLoading");
    new assets_loader__WEBPACK_IMPORTED_MODULE_2___default.a({
      assets: _asset_list__WEBPACK_IMPORTED_MODULE_0__["default"]
    }).on("error", error => {
      console.log("Error :", error);
    }).on("progress", p => {
      if (loader) loader.style.width = `${p * 100}%`;
    }).on("complete", o => {
      if (loader) loader.style.width = `100%`;
      _Assets__WEBPACK_IMPORTED_MODULE_1__["default"].init(o);
      setTimeout(() => {
        document.body.classList.remove("isLoading");
        resolve(gl);
      }, 500);
    }).start();
  } else {
    resolve(gl);
  }
});

/* harmony default export */ __webpack_exports__["default"] = (loadAssets);

/***/ }),

/***/ "./src/js/utils/resizeCanavs.js":
/*!**************************************!*\
  !*** ./src/js/utils/resizeCanavs.js ***!
  \**************************************/
/*! exports provided: resize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return resize; });
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alfrid */ "./node_modules/alfrid/lib/alfrid.umd.js");
/* harmony import */ var alfrid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alfrid__WEBPACK_IMPORTED_MODULE_0__);
// resizeCanavs.js


const resize = (w, h) => {
  const {
    innerWidth,
    innerHeight
  } = window;
  w = w || innerWidth;
  h = h || innerHeight;
  alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].setSize(w, h);
  let tw = Math.min(w, innerWidth);
  let th = Math.min(h, innerHeight);
  const sx = innerWidth / w;
  const sy = innerHeight / h;
  const scale = Math.min(sx, sy);
  tw = w * scale;
  th = h * scale;
  alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].canvas.style.width = `${tw}px`;
  alfrid__WEBPACK_IMPORTED_MODULE_0__["GL"].canvas.style.height = `${th}px`;
};



/***/ }),

/***/ "./src/js/utils/saveImage.js":
/*!***********************************!*\
  !*** ./src/js/utils/saveImage.js ***!
  \***********************************/
/*! exports provided: saveImage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveImage", function() { return saveImage; });
// saveImage.js
// const FILE_EXTENTION = 'jpg'
// const MIME_TYPE = 'image/jpeg'
const dataURLtoBlob = dataurl => {
  var arr = dataurl.split(',');
  var mime = arr[0].match(/:(.*?);/)[1];
  var bstr = atob(arr[1]);
  var n = bstr.length;
  var u8arr = new Uint8Array(n);

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }

  return new Blob([u8arr], {
    type: mime
  });
};

const saveImage = (canvas, filename) => {
  var link = document.createElement('a');
  var imgData = canvas.toDataURL({
    format: 'png',
    multiplier: 4
  }); // var strDataURI = imgData.substr(22, imgData.length);

  var blob = dataURLtoBlob(imgData);
  var objurl = URL.createObjectURL(blob);
  link.download = `${filename}.png`;
  link.href = objurl;
  link.click();
};



/***/ }),

/***/ "./src/js/utils/saveJson.js":
/*!**********************************!*\
  !*** ./src/js/utils/saveJson.js ***!
  \**********************************/
/*! exports provided: saveJson */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveJson", function() { return saveJson; });
// saveJson.js
const saveJson = (obj, mName = 'dagta', mPretty = true) => {
  var str = mPretty ? JSON.stringify(obj, null, 4) : JSON.stringify(obj);
  var data = encode(str);
  var blob = new Blob([data], {
    type: 'application/octet-stream'
  });
  var url = URL.createObjectURL(blob);
  var link = document.createElement('a');
  link.setAttribute('href', url);
  link.setAttribute('download', `${mName}.json`);
  var event = document.createEvent('MouseEvents');
  event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
  link.dispatchEvent(event);
};

const encode = s => {
  var out = [];

  for (var i = 0; i < s.length; i++) {
    out[i] = s.charCodeAt(i);
  }

  return new Uint8Array(out);
};



/***/ }),

/***/ "./src/scss/global.scss":
/*!******************************!*\
  !*** ./src/scss/global.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js?url=false!../../node_modules/sass-loader/dist/cjs.js!./global.scss */ "./node_modules/css-loader/dist/cjs.js?url=false!./node_modules/sass-loader/dist/cjs.js!./src/scss/global.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/shaders/basic.vert":
/*!********************************!*\
  !*** ./src/shaders/basic.vert ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// basic.vert\n\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nvoid main(void) {\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\n    vTextureCoord = aTextureCoord;\n    vNormal = uNormalMatrix * aNormal;\n    vPosition = aVertexPosition;\n}");

/***/ }),

/***/ "./src/shaders/bufferfly.frag":
/*!************************************!*\
  !*** ./src/shaders/bufferfly.frag ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// copy.frag\n\n#define SHADER_NAME SIMPLE_TEXTURE\n\nprecision highp float;\n#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nvarying vec3 vRandom;\nuniform sampler2D uMap;\nuniform sampler2D uColorMap;\nuniform vec2 uUVScale;\nuniform float uColorOffset;\n\nvoid main(void) {\n    float offset = clamp(-vRandom.y + uColorOffset * 2.0, 0.0, 1.0);\n\n    vec4 color = texture2D(uMap, vTextureCoord);\n    vec3 mapColor = texture2D(uColorMap, vRandom.xy).rgb;\n    color.rgb *= mapColor;\n    if(color.a <= 0.01) {\n        discard;\n    }\n    if(!gl_FrontFacing) {\n        color.rgb *= 0.85;\n    }\n    gl_FragColor = color;\n\n}");

/***/ }),

/***/ "./src/shaders/bufferfly.vert":
/*!************************************!*\
  !*** ./src/shaders/bufferfly.vert ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// basic.vert\n\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec2 aUVOffset;\nattribute vec2 aUVOffset2;\nattribute vec3 aNormal;\nattribute vec3 aRandom;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uTime;\nuniform float uScale;\nuniform float uOffset;\nuniform vec2 uUVScale;\nuniform sampler2D uPosMap;\nuniform sampler2D uVelMap;\n\nvarying vec2 vTextureCoord;\nvarying vec3 vNormal;\nvarying vec3 vRandom;\n\nvec2 rotate_1(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix_1(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate_1(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix_1(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nvec3 align(vec3 pos, vec3 dir) {\n    vec3 initDir = vec3(1.0, 0.0, 0.0);\n    vec3 axis = cross(dir, initDir);\n    float angle = acos(dot(dir, initDir));\n    return rotate_1(pos, axis, angle);\n}\n\nvec2 rotate_0(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix_0(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate_0(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix_0(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nvec3 safeNormalize(vec3 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec2 safeNormalize(vec2 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec2(0.0);\n    }\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat map(float value, float min1, float max1) {\n  return map(value, min1, max1, 0.0, 1.0);\n}\n\nfloat circularInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\n#define PI 3.141592657\n\nvoid main(void) {\n    float scaleOpen = circularInOut(clamp(uOffset * 2.0 - aRandom.x, 0.0, 1.0));\n\n    float t = abs(aTextureCoord.x - 0.5);\n    float scale = mix(0.5, 1.0, aRandom.x) * 0.75 * scaleOpen;\n    vec3 pos = aVertexPosition * scale * uScale;\n\n    float speed = mix(5.0, 7.0, aRandom.y);\n    float a = sin(uTime * speed + aTextureCoord.y * 2.5 + aRandom.z);\n    if(a > 0.0) {\n        a = circularOut(a) * 1.25;\n    }\n    a *= mix(0.5, 1.0, aTextureCoord.y);\n    if(aVertexPosition.x < 0.0) a *= -1.0;\n    pos.xy = rotate_0(pos.xy, a);\n\n    vec3 dir = texture2D(uVelMap, aUVOffset).xyz;\n    a = dir.y * 5.0;\n    pos.xy = rotate_0(pos.xy, a);    \n    dir *= vec3(1.0, 0.0, 1.0);\n    dir = safeNormalize(dir);\n    if(length(dir) < 0.0) {\n        dir = vec3(1.0, 0.0, 0.0);\n    }\n\n    pos = align(pos, dir);\n    pos.xz = rotate_0(pos.xz, PI * 0.5);\n\n    vec3 posOffset = texture2D(uPosMap, aUVOffset).xyz;\n    pos += posOffset;\n\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\n\n    vec2 uv = aTextureCoord * uUVScale + aUVOffset2;\n\n    vTextureCoord = uv;\n    vNormal = aNormal;\n    vRandom = aRandom;\n}");

/***/ }),

/***/ "./src/shaders/butterflySingle.frag":
/*!******************************************!*\
  !*** ./src/shaders/butterflySingle.frag ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// copy.frag\n\n#define SHADER_NAME SIMPLE_TEXTURE\n\nprecision highp float;\n#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nuniform sampler2D texture;\nuniform sampler2D uColorMap;\nuniform vec3 uRandom;\n\n#define COLOR vec3(107.0, 1.0, 11.0)/255.0\n\nvoid main(void) {\n    vec4 oColor = texture2D(texture, vTextureCoord);\n\n    if(oColor.a < 0.5) {\n        discard;\n    }\n\n    if(!gl_FrontFacing) {\n        oColor.rgb *= 0.85;\n    }\n\n    // vec3 mapColor = texture2D(uColorMap, uRandom.xy).rgb;\n    oColor.rgb *= COLOR * 1.5;\n\n    gl_FragColor = oColor;\n\n}");

/***/ }),

/***/ "./src/shaders/butterflySingle.vert":
/*!******************************************!*\
  !*** ./src/shaders/butterflySingle.vert ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// basic.vert\n\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform float uOffset;\nuniform float uTime;\nuniform vec2 uUVScale;\nuniform vec2 uUVOffset;\n\nvarying vec2 vTextureCoord;\nvarying vec3 vNormal;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat circularInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nvec3 safeNormalize(vec3 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec2 safeNormalize(vec2 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec2(0.0);\n    }\n}\n\nvoid main(void) {\n    float t = abs(aTextureCoord.x - 0.5);\n    vec3 pos = aVertexPosition * uOffset;\n\n    float speed = 6.0;\n    float a = sin(uTime * speed + aTextureCoord.y * 2.5);\n    if(a > 0.0) {\n        a = circularOut(a) * 1.25;\n    }\n    a *= mix(0.5, 1.0, aTextureCoord.y);\n    if(aVertexPosition.x < 0.0) a *= -1.0;\n    pos.xy = rotate(pos.xy, a);\n\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\n    vTextureCoord = aTextureCoord * uUVScale + uUVOffset;\n    vNormal = aNormal;\n}");

/***/ }),

/***/ "./src/shaders/debug.frag":
/*!********************************!*\
  !*** ./src/shaders/debug.frag ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\n#define GLSLIFY 1\n\nvoid main(void) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}");

/***/ }),

/***/ "./src/shaders/debug.vert":
/*!********************************!*\
  !*** ./src/shaders/debug.vert ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// basic.vert\n\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform sampler2D uPosMap;\n\nvoid main(void) {\n    vec3 pos = texture2D(uPosMap, aTextureCoord).xyz;\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(pos, 1.0);\n\n    gl_PointSize = mix(5.0, 6.0, aVertexPosition.x);\n}");

/***/ }),

/***/ "./src/shaders/floor.frag":
/*!********************************!*\
  !*** ./src/shaders/floor.frag ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\n\nin vec2 vTextureCoord;\nin vec4 vShadowCoord;\n\nuniform sampler2D uMap;\nuniform sampler2D uDepthMap;\nuniform float uIsPresenting;\nuniform float uOpacity;\nuniform vec3 uColor;\n\n#define SHADOW_STRENGTH 0.8\n#define PI 3.141592653\n\nout vec4 oColor;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat samplePCF3x3( vec4 sc )\n{\n    const int s = 2;\n    float shadow = 0.0;\n    float bias = 0.01;\n    float threshold = sc.z - bias;\n\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s, s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0, s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s, s) ).r);\n    return shadow/9.0;\n}\n\nvoid main(void) {\n    vec2 uv = vTextureCoord - 0.5;\n    uv = rotate(uv, PI * 0.5);\n    vec4 color = texture(uMap, uv + 0.5);\n\n    float shadow = length(color.rgb);\n    shadow = 1.0 - shadow;\n    shadow *= SHADOW_STRENGTH;\n\n    color.rgb = mix(color.rgb, vec3(1.0), .25);\n    // shadow\n    vec4 shadowCoord    = vShadowCoord / vShadowCoord.w;\n    float s             = samplePCF3x3(shadowCoord);\n\n    if(uIsPresenting > 0.5) {\n        oColor = vec4(0.0, 0.0, 0.0, shadow * uOpacity + (1.0 - s));\n    } else {\n        float d = distance(vTextureCoord, vec2(0.5));\n        d = smoothstep(0.5, 0.3, d);\n        color.a *= d;\n\n        s = mix(s, 1.0, .75);\n        color.rgb *= s * uColor;\n\n        oColor = color;\n    }\n\n}");

/***/ }),

/***/ "./src/shaders/floor.vert":
/*!********************************!*\
  !*** ./src/shaders/floor.vert ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nin vec3 aNormal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uShadowMatrix;\n\nout vec2 vTextureCoord;\nout vec3 vNormal;\nout vec4 vShadowCoord;\n\nvoid main(void) {\n    vec4 wsPos = uModelMatrix * vec4(aVertexPosition, 1.0);\n    gl_Position = uProjectionMatrix * uViewMatrix * wsPos;\n    vTextureCoord = aTextureCoord;\n    vNormal = aNormal;\n    vShadowCoord = uShadowMatrix * wsPos;\n}");

/***/ }),

/***/ "./src/shaders/grain.frag":
/*!********************************!*\
  !*** ./src/shaders/grain.frag ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// copy.frag\n\n#define SHADER_NAME SIMPLE_TEXTURE\n\nprecision highp float;\n#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nuniform float uRatio;\nuniform float uRandom;\nuniform float uStrength;\nuniform sampler2D texture;\n\nvoid main(void) {\n    vec2 uv = vTextureCoord;\n    uv.y /= uRatio;\n    float noise = texture2D(texture, uv * 5.0 + uRandom).r;\n\n    // gl_FragColor = vec4(vec3(noise), 1.0);\n    gl_FragColor = vec4(vec3(1.0), noise * uStrength);\n}");

/***/ }),

/***/ "./src/shaders/mark.frag":
/*!*******************************!*\
  !*** ./src/shaders/mark.frag ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\n#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nuniform float uOffset;\n\nvoid main(void) {\n    float d = distance(vTextureCoord, vec2(.5))/.5;\n    \n    float t = distance(d, uOffset - 0.06);\n    t = smoothstep(0.06, 0.05, t);\n    if(t <= 0.0001) {discard;}\n\n    gl_FragColor = vec4(1.0, 1.0, 1.0, t);\n}");

/***/ }),

/***/ "./src/shaders/mark.vert":
/*!*******************************!*\
  !*** ./src/shaders/mark.vert ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// basic.vert\n\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec3 vNormal;\n\nvoid main(void) {\n    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\n    vTextureCoord = aTextureCoord;\n    vNormal = aNormal;\n}");

/***/ }),

/***/ "./src/shaders/pass.vert":
/*!*******************************!*\
  !*** ./src/shaders/pass.vert ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision mediump float;\n#define GLSLIFY 1\nin vec2 aPosition;\nout vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vTextureCoord = aPosition *.5 + .5;\n}");

/***/ }),

/***/ "./src/shaders/save.frag":
/*!*******************************!*\
  !*** ./src/shaders/save.frag ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 vPosition;\nin vec3 vNormal;\nin vec3 vData;\n\nlayout (location = 0) out vec4 oFragColor0;\nlayout (location = 1) out vec4 oFragColor1;\nlayout (location = 2) out vec4 oFragColor2;\nlayout (location = 3) out vec4 oFragColor3;\n\nvoid main(void) {\n    oFragColor0 = vec4(vPosition, 1.0);\n    oFragColor1 = vec4(vec3(0.0), 1.0);\n    oFragColor2 = vec4(vNormal, 1.0);\n    oFragColor3 = vec4(vData, 1.0);\n}");

/***/ }),

/***/ "./src/shaders/save.vert":
/*!*******************************!*\
  !*** ./src/shaders/save.vert ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nin vec3 aNormal;\nin vec3 aData;\n\nout vec3 vPosition;\nout vec3 vNormal;\nout vec3 vData;\n\nvoid main(void) {\n    gl_Position = vec4(aTextureCoord, 0.0, 1.0);\n    vPosition = aVertexPosition;\n    vNormal = aNormal;\n    vData = aData;\n\n    gl_PointSize = 2.0;\n}");

/***/ }),

/***/ "./src/shaders/sculpture.frag":
/*!************************************!*\
  !*** ./src/shaders/sculpture.frag ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("// copy.frag\n\n#define SHADER_NAME SIMPLE_TEXTURE\n\nprecision highp float;\n#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nvarying vec3 vPosition;\nuniform sampler2D texture;\nuniform float uOpacity;\nuniform float uIsPresenting;\nuniform vec3 uColor;\n\nfloat blendScreen(float base, float blend) {\n\treturn 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n    return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n    // with conditionals, may be worth benchmarking\n    // return vec3(\n    //     base.r < 0.5 ? (2.0 * base.r * blend.r) : (1.0 - 2.0 * (1.0 - base.r) * (1.0 - blend.r)),\n    //     base.g < 0.5 ? (2.0 * base.g * blend.g) : (1.0 - 2.0 * (1.0 - base.g) * (1.0 - blend.g)),\n    //     base.b < 0.5 ? (2.0 * base.b * blend.b) : (1.0 - 2.0 * (1.0 - base.b) * (1.0 - blend.b))\n    // );\n}\n\nvoid main(void) {\n\n    vec4 color = texture2D(texture, vTextureCoord);\n    color.rgb = mix(color.rgb, vec3(1.0), .25);\n\n    float reflStr = smoothstep(2.0, 0.0, vPosition.y) * 0.5 * (1.0 - uIsPresenting);\n\n    vec3 finalColor = blendScreen(color.rgb, uColor);\n    color.rgb = mix(color.rgb, finalColor, reflStr);\n\n    color.a *= uOpacity * 1.5;\n    gl_FragColor = color;\n}");

/***/ }),

/***/ "./src/shaders/sim.frag":
/*!******************************!*\
  !*** ./src/shaders/sim.frag ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec2 vTextureCoord;\n\nuniform sampler2D uPosMap;\nuniform sampler2D uVelMap;\nuniform sampler2D uExtraMap;\nuniform sampler2D uDataMap;\n\nuniform float uNum;\nuniform float uCenter;\nuniform float uTime;\n\nlayout (location = 0) out vec4 oFragColor0;\nlayout (location = 1) out vec4 oFragColor1;\nlayout (location = 2) out vec4 oFragColor2;\nlayout (location = 3) out vec4 oFragColor3;\n\n// curlNoise.glsl\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;  }\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;  }\n\n// snoise.glsl\nvec4 permute(vec4 x) {  return mod(((x*34.0)+1.0)*x, 289.0);    }\nvec4 taylorInvSqrt(vec4 r) {    return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n    \n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n    \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n    \n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    float n_ = 1.0/7.0;\n    vec3  ns = n_ * D.wyz - D.xzx;\n    \n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n    \n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );\n    \n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    \n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n    \n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    \n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n    \n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise(float x, float y, float z){\n    return snoise(vec3(x, y, z));\n}\n\nvec3 snoiseVec3( vec3 x ){\n\n\tfloat s  = snoise(vec3( x ));\n\tfloat s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n\tfloat s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n\tvec3 c = vec3( s , s1 , s2 );\n\treturn c;\n\n}\n\nvec3 curlNoise( vec3 p ){\n\t\n\tconst float e = .1;\n\tvec3 dx = vec3( e   , 0.0 , 0.0 );\n\tvec3 dy = vec3( 0.0 , e   , 0.0 );\n\tvec3 dz = vec3( 0.0 , 0.0 , e   );\n\n\tvec3 p_x0 = snoiseVec3( p - dx );\n\tvec3 p_x1 = snoiseVec3( p + dx );\n\tvec3 p_y0 = snoiseVec3( p - dy );\n\tvec3 p_y1 = snoiseVec3( p + dy );\n\tvec3 p_z0 = snoiseVec3( p - dz );\n\tvec3 p_z1 = snoiseVec3( p + dz );\n\n\tfloat x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n\tfloat y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n\tfloat z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n\tconst float divisor = 1.0 / ( 2.0 * e );\n\treturn normalize( vec3( x , y , z ) * divisor );\n\n}\n\nvec3 safeNormalize(vec3 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec2 safeNormalize(vec2 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec2(0.0);\n    }\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat map(float value, float min1, float max1) {\n  return map(value, min1, max1, 0.0, 1.0);\n}\n\n#define NUM uNum\n#define senseRadius 1.0\n#define PI 3.141529653\n\nconst float minThreshold = 0.2;\nconst float maxThreshold = 0.6;\n\nvoid main(void) {\n    vec3 center = vec3(0.0, uCenter, 0.0);\n\n    vec3 pos = texture(uPosMap, vTextureCoord).rgb;\n    vec3 vel = texture(uVelMap, vTextureCoord).rgb;\n    vec3 extra = texture(uExtraMap, vTextureCoord).rgb;\n    vec3 data = texture(uDataMap, vTextureCoord).rgb;\n\n    vec2 uv;\n    vec3 posParticle, velParticle, dataParticle, dir;\n    float t, f, p, dist, delta;\n    vec3 acc = vec3(0.0);\n\n    for(float i=0.0; i<uNum; i++) {\n        for(float j=0.0; j<uNum; j++) {\n            uv = vec2(i/NUM, j/NUM);\n\n            posParticle = texture(uPosMap, uv).xyz;\n            velParticle = texture(uVelMap, uv).xyz;\n\n            dist = distance(posParticle, pos);\n\n            if(dist > 0.0 && dist < senseRadius) {\n                p = dist/senseRadius;\n                dir = normalize(pos - posParticle);\n\n                if(p < minThreshold) {\n                    delta = map(p, 0.0, minThreshold);\n                    f = 1.0 / delta;\n                    f = min(f, 5.0);\n                    acc += dir * 0.5 * f * (1.0 + t);\n                } else if( p > maxThreshold) {\n                    delta = map(p, maxThreshold, 1.0);\n                    delta = sin(delta * PI);\n                    f = pow(delta, 1.5) * 0.02;\n                    acc -= dir * 0.15 * f;\n                }\n\n                // alignment\n                dir = (safeNormalize(vel) + safeNormalize(velParticle)) * 0.5;\n                f = sin(p * PI);\n                acc += dir * f * 0.01;\n            }\n        }\n    }\n\n    // noise\n    vec3 noise = curlNoise(pos + uTime * 0.2);\n    acc += noise * 0.1;\n\n    // pull force\n    float radius = 3.0;\n    dist = distance(pos, center);\n    dir = safeNormalize(center - pos);\n    f = smoothstep(radius * 0.5, radius, dist);\n    acc += dir * f * mix(0.5, 1.5, extra.y) * 1.0;\n\n    float speedOffset = mix(0.95, 1.0, extra.x);\n    vel += acc * 0.005 * speedOffset;\n\n    pos += vel;\n    vel *= 0.98;\n\n    oFragColor0 = vec4(pos, 1.0);\n    oFragColor1 = vec4(vel, 1.0);\n    oFragColor2 = vec4(extra, 1.0);\n    oFragColor3 = vec4(data, 1.0);\n}");

/***/ }),

/***/ "./src/shaders/swarm.frag":
/*!********************************!*\
  !*** ./src/shaders/swarm.frag ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec2 vTextureCoord;\nin vec3 vRandom;\nin vec3 vPosition;\nin vec4 vShadowCoord;\n\nuniform sampler2D uColor0Map;\nuniform sampler2D uColor1Map;\nuniform sampler2D uDepthMap;\nuniform sampler2D uColorMap;\nuniform sampler2D uMap;\nuniform float uColorOffset;\nuniform float uContrast;\nuniform float uBrightness;\nuniform float uBrCircling;\nuniform float uMaxHeight;\nuniform vec3 uCircleCenter;\n\nout vec4 oColor;\n\nfloat samplePCF3x3( vec4 sc )\n{\n    const int s = 2;\n    float shadow = 0.0;\n    float bias = 0.01;\n    float threshold = sc.z - bias;\n\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2(-s, s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( 0, s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s,-s) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s, 0) ).r);\n    shadow += step(threshold, textureProjOffset( uDepthMap, sc, ivec2( s, s) ).r);\n    return shadow/9.0;\n}\n\nvoid main(void) {\n    float offset = clamp(-vRandom.y + uColorOffset * 2.0, 0.0, 1.0);\n\n    vec4 color = texture(uMap, vTextureCoord);\n\n    float h = uMaxHeight * 0.5;\n    float yOffset = abs(vPosition.y - h);\n    yOffset = smoothstep(h, h * 0.85, yOffset);\n\n    if(color.a <= 0.5) {\n        discard;\n    }\n    color.a *= yOffset;\n\n    vec3 mapColor = texture(uColorMap, vRandom.xy).rgb;\n    color.rgb *= mapColor;\n\n    if(!gl_FrontFacing) {\n        color.rgb *= 0.85;\n    }\n\n    // shadow\n    vec4 shadowCoord    = vShadowCoord / vShadowCoord.w;\n\tfloat s             = samplePCF3x3(shadowCoord);\n    s = mix(s, 1.0, .75);\n    color.rgb *= s;\n\n    float distToCenter = distance(vPosition.xy, uCircleCenter.xy);\n    float diff = 5.0;\n    float t = uBrCircling * (15.0 + diff) - vRandom.z * diff;\n    float br = smoothstep(t, t - 1.0, distToCenter);\n\n    color.rgb = pow(color.rgb + uBrightness + br, vec3(uContrast));\n\n    oColor = color;\n}");

/***/ }),

/***/ "./src/shaders/swarm.vert":
/*!********************************!*\
  !*** ./src/shaders/swarm.vert ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nin vec3 aNormal;\nin vec3 aRandom;\nin vec2 aPosOffset;\nin vec2 aUV;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uShadowMatrix;\n\nuniform vec2 uUVScale;\nuniform float uScale;\nuniform float uOffset;\nuniform float uTime;\nuniform float uOffsetCircle;\n\nuniform sampler2D uPosMap;\nuniform sampler2D uVelMap;\nuniform sampler2D uExtraMap;\n\nout vec2 vTextureCoord;\nout vec3 vNormal;\nout vec3 vRandom;\nout vec3 vPosition;\nout vec4 vShadowCoord;\n\nvec2 rotate_0(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix_0(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate_0(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix_0(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nvec3 align(vec3 pos, vec3 dir) {\n    vec3 initDir = vec3(1.0, 0.0, 0.0);\n    vec3 axis = cross(dir, initDir);\n    float angle = acos(dot(dir, initDir));\n    return rotate_0(pos, axis, angle);\n}\n\n// snoise.glsl\nvec4 permute(vec4 x) {  return mod(((x*34.0)+1.0)*x, 289.0);    }\nvec4 taylorInvSqrt(vec4 r) {    return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n    \n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n    \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n    \n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    float n_ = 1.0/7.0;\n    vec3  ns = n_ * D.wyz - D.xzx;\n    \n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n    \n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );\n    \n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    \n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n    \n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    \n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n    \n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise(float x, float y, float z){\n    return snoise(vec3(x, y, z));\n}\n\nvec2 rotate_1(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix_1(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate_1(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix_1(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat circularInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nvec3 safeNormalize(vec3 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec2 safeNormalize(vec2 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec2(0.0);\n    }\n}\n\n#define PI 3.141592653\n#define CENTER vec3(0.0, 1.5, 0.4)\n\nvoid main(void) {\n    float scaleOpen = circularInOut(clamp(uOffset * 2.0 - aRandom.z, 0.0, 1.0));\n\n    float t = abs(aTextureCoord.x - 0.5);\n    float scale = mix(0.25, 1.0, aRandom.x);\n    vec3 pos = aVertexPosition * scale * uOffset * uScale;\n\n    float speed = mix(5.0, 7.0, aRandom.y);\n    float a = sin(uTime * speed + aTextureCoord.y * 2.5 + aRandom.z);\n    if(a > 0.0) {\n        a = circularOut(a) * 1.25;\n    }\n    a *= mix(0.5, 1.0, aTextureCoord.y);\n    if(aVertexPosition.x < 0.0) a *= -1.0;\n    pos.xy = rotate_1(pos.xy, a);\n\n    vec3 posOffset = texture(uPosMap, aPosOffset).xyz;\n    vec3 extra = texture(uExtraMap, aPosOffset).xyz;\n\n    vec3 dir = safeNormalize(texture(uVelMap, aPosOffset).xyz);\n    a = atan(dir.z, dir.x) + PI * 0.5;\n    pos.xz = rotate_1(pos.xz, a);\n\n    float offset = clamp(uOffsetCircle * 2.0 - aRandom.z, 0.0, 1.0);\n    offset = circularInOut(offset);\n    vPosition = posOffset;\n\n    float yMul = mix(1.0, -0.1, offset);\n    float xzMul = mix(1.0, 0.75, offset);\n    posOffset.xz *= xzMul;\n    posOffset.y *= yMul;\n    posOffset.y -= mix(0.0, 1.0, offset);\n    posOffset.z -= mix(0.0, 0.0, offset);\n\n    pos += posOffset;\n\n    \n    vec4 wsPosition = uModelMatrix * vec4(pos, 1.0);\n    \n    gl_Position = uProjectionMatrix * uViewMatrix * wsPosition;\n    vShadowCoord = uShadowMatrix * wsPosition;\n    vTextureCoord = aTextureCoord * uUVScale + aUV;\n\n    vNormal = aNormal;\n    vRandom = aRandom;\n}");

/***/ }),

/***/ "./src/shaders/swarmSim.frag":
/*!***********************************!*\
  !*** ./src/shaders/swarmSim.frag ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\nin vec2 vTextureCoord;\n\nuniform sampler2D uPosMap;\nuniform sampler2D uVelMap;\nuniform sampler2D uExtraMap;\nuniform sampler2D uDataMap;\n\nuniform float uMaxHeight;\nuniform float uTime;\nuniform float uSpeed;\nuniform float uOffsetCircle;\nuniform vec3 uCircleCenter;\n\nlayout (location = 0) out vec4 oFragColor0;\nlayout (location = 1) out vec4 oFragColor1;\nlayout (location = 2) out vec4 oFragColor2;\nlayout (location = 3) out vec4 oFragColor3;\n\n// snoise.glsl\nvec4 permute_0(vec4 x) {  return mod(((x*34.0)+1.0)*x, 289.0);    }\nvec4 taylorInvSqrt_0(vec4 r) {    return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise_0(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D_0 = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n    \n    vec3 g_0 = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g_0;\n    vec3 i1 = min( g_0.xyz, l.zxy );\n    vec3 i2 = max( g_0.xyz, l.zxy );\n    \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n    \n    i = mod(i, 289.0 );\n    vec4 p = permute_0( permute_0( permute_0( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    float n_ = 1.0/7.0;\n    vec3  ns = n_ * D_0.wyz - D_0.xzx;\n    \n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n    \n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );\n    \n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    \n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n    \n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    \n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1_0 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n    vec3 p0_0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1_0.xy,h.z);\n    vec3 p3 = vec3(a1_0.zw,h.w);\n    \n    vec4 norm = taylorInvSqrt_0(vec4(dot(p0_0,p0_0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0_0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0_0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise_0(float x, float y, float z){\n    return snoise_0(vec3(x, y, z));\n}\n\n// curlNoise.glsl\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;  }\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;  }\n\n// snoise.glsl\nvec4 permute_1(vec4 x) {  return mod(((x*34.0)+1.0)*x, 289.0);    }\nvec4 taylorInvSqrt_1(vec4 r) {    return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise_1(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D_1 = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n    \n    vec3 g_1 = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g_1;\n    vec3 i1 = min( g_1.xyz, l.zxy );\n    vec3 i2 = max( g_1.xyz, l.zxy );\n    \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n    \n    i = mod(i, 289.0 );\n    vec4 p = permute_1( permute_1( permute_1( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n    float n_ = 1.0/7.0;\n    vec3  ns = n_ * D_1.wyz - D_1.xzx;\n    \n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n    \n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );\n    \n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    \n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n    \n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    \n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1_1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    \n    vec3 p0_1 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1_1.xy,h.z);\n    vec3 p3 = vec3(a1_1.zw,h.w);\n    \n    vec4 norm = taylorInvSqrt_1(vec4(dot(p0_1,p0_1), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0_1 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0_1,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise_1(float x, float y, float z){\n    return snoise_1(vec3(x, y, z));\n}\n\nvec3 snoiseVec3( vec3 x ){\n\n\tfloat s  = snoise_1(vec3( x ));\n\tfloat s1 = snoise_1(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n\tfloat s2 = snoise_1(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n\tvec3 c = vec3( s , s1 , s2 );\n\treturn c;\n\n}\n\nvec3 curlNoise( vec3 p ){\n\t\n\tconst float e = .1;\n\tvec3 dx = vec3( e   , 0.0 , 0.0 );\n\tvec3 dy = vec3( 0.0 , e   , 0.0 );\n\tvec3 dz = vec3( 0.0 , 0.0 , e   );\n\n\tvec3 p_x0 = snoiseVec3( p - dx );\n\tvec3 p_x1 = snoiseVec3( p + dx );\n\tvec3 p_y0 = snoiseVec3( p - dy );\n\tvec3 p_y1 = snoiseVec3( p + dy );\n\tvec3 p_z0 = snoiseVec3( p - dz );\n\tvec3 p_z1 = snoiseVec3( p + dz );\n\n\tfloat x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n\tfloat y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n\tfloat z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n\tconst float divisor = 1.0 / ( 2.0 * e );\n\treturn normalize( vec3( x , y , z ) * divisor );\n\n}\n\nvec3 safeNormalize(vec3 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec2 safeNormalize(vec2 v) {\n    if(length(v) > 0.0) {\n        return normalize(v);\n    } else {\n        return vec2(0.0);\n    }\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\n#define PI 3.141529653\n\nvoid main(void) {\n    vec3 pos = texture(uPosMap, vTextureCoord).rgb;\n    vec3 vel = texture(uVelMap, vTextureCoord).rgb;\n    vec3 extra = texture(uExtraMap, vTextureCoord).rgb;\n    vec3 data = texture(uDataMap, vTextureCoord).rgb;\n\n    vec3 acc = vec3(0.0, 0.1, 0.0);\n\n    float posOffset = snoise_0(pos + uTime);\n    posOffset = mix(1.0, 2.0, posOffset) * 0.1;\n    vec3 noise = curlNoise(pos * posOffset);\n    // noise = clamp(noise, vec3(-1.0), vec3(1.0));\n    noise.y = (noise.y + 1.0) * 0.5;\n\n    acc += noise;\n\n    // rotation force\n    vec3 dir = safeNormalize(pos * vec3(1.0, 0.0, 1.0));\n    vec3 dirPull = -dir;\n    dir.xz = rotate(dir.xz, PI * 0.5);\n    acc += dir * 0.5;\n\n    // pull back to center\n    float dist = length(pos.xz);\n    float f = smoothstep(5.0, 8.0, dist);\n    acc += dirPull * f;\n\n    // circling state\n    dir = safeNormalize((pos - uCircleCenter) * vec3(1.0, 1.0, 0.0));\n    dir.xy = rotate(dir.xy, -PI * mix(0.65, 0.75, data.x));\n    acc += dir * 2.0 * uOffsetCircle;\n    float az = pos.z > uCircleCenter.z ? -1.0 : 1.0;\n    acc.z += az * uOffsetCircle;\n\n    float speed = mix(1.0, 2.0, extra.y) * 0.0005;\n    vel += acc * speed * uSpeed;\n    pos += vel;\n    vel *= 0.96;\n\n    if(pos.y > uMaxHeight) {\n        pos.y -= uMaxHeight;\n        pos.xz = safeNormalize(pos.xz) * mix(5.0, 10.0, extra.z);\n        pos.xz = rotate(pos.xz, data.y * PI + data.x);\n        vel *= 0.1;\n    }\n\n    oFragColor0 = vec4(pos, 1.0);\n    oFragColor1 = vec4(vel, 1.0);\n    oFragColor2 = vec4(extra, 1.0);\n    oFragColor3 = vec4(data, 1.0);\n}");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,